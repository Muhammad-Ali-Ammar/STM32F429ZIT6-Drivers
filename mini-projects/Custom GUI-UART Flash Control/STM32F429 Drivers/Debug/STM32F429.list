
STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db0  08003db0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003db8  08003db8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08003dc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000240  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005eae  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001068  00000000  00000000  00026119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005a8  00000000  00000000  00027188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000418  00000000  00000000  00027730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002473  00000000  00000000  00027b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000031a9  00000000  00000000  00029fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00015b20  00000000  00000000  0002d164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d3c  00000000  00000000  00042c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000449c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003964 	.word	0x08003964

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08003964 	.word	0x08003964

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a40:	f000 b98e 	b.w	8000d60 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f824 	bl	8000a98 <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2ulz>:
 8000a5c:	b5d0      	push	{r4, r6, r7, lr}
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__aeabi_d2ulz+0x34>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	4606      	mov	r6, r0
 8000a64:	460f      	mov	r7, r1
 8000a66:	f7ff fdcf 	bl	8000608 <__aeabi_dmul>
 8000a6a:	f000 f97b 	bl	8000d64 <__aeabi_d2uiz>
 8000a6e:	4604      	mov	r4, r0
 8000a70:	f7ff fd50 	bl	8000514 <__aeabi_ui2d>
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <__aeabi_d2ulz+0x38>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f7ff fdc6 	bl	8000608 <__aeabi_dmul>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	460b      	mov	r3, r1
 8000a80:	4630      	mov	r0, r6
 8000a82:	4639      	mov	r1, r7
 8000a84:	f7ff fc08 	bl	8000298 <__aeabi_dsub>
 8000a88:	f000 f96c 	bl	8000d64 <__aeabi_d2uiz>
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000a90:	3df00000 	.word	0x3df00000
 8000a94:	41f00000 	.word	0x41f00000

08000a98 <__udivmoddi4>:
 8000a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a9c:	9e08      	ldr	r6, [sp, #32]
 8000a9e:	460d      	mov	r5, r1
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	460f      	mov	r7, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14a      	bne.n	8000b3e <__udivmoddi4+0xa6>
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	4694      	mov	ip, r2
 8000aac:	d965      	bls.n	8000b7a <__udivmoddi4+0xe2>
 8000aae:	fab2 f382 	clz	r3, r2
 8000ab2:	b143      	cbz	r3, 8000ac6 <__udivmoddi4+0x2e>
 8000ab4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab8:	f1c3 0220 	rsb	r2, r3, #32
 8000abc:	409f      	lsls	r7, r3
 8000abe:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	409c      	lsls	r4, r3
 8000ac6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aca:	fa1f f58c 	uxth.w	r5, ip
 8000ace:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad2:	0c22      	lsrs	r2, r4, #16
 8000ad4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000adc:	fb01 f005 	mul.w	r0, r1, r5
 8000ae0:	4290      	cmp	r0, r2
 8000ae2:	d90a      	bls.n	8000afa <__udivmoddi4+0x62>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000aec:	f080 811c 	bcs.w	8000d28 <__udivmoddi4+0x290>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f240 8119 	bls.w	8000d28 <__udivmoddi4+0x290>
 8000af6:	3902      	subs	r1, #2
 8000af8:	4462      	add	r2, ip
 8000afa:	1a12      	subs	r2, r2, r0
 8000afc:	b2a4      	uxth	r4, r4
 8000afe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0a:	fb00 f505 	mul.w	r5, r0, r5
 8000b0e:	42a5      	cmp	r5, r4
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x90>
 8000b12:	eb1c 0404 	adds.w	r4, ip, r4
 8000b16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x294>
 8000b1e:	42a5      	cmp	r5, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x294>
 8000b24:	4464      	add	r4, ip
 8000b26:	3802      	subs	r0, #2
 8000b28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2c:	1b64      	subs	r4, r4, r5
 8000b2e:	2100      	movs	r1, #0
 8000b30:	b11e      	cbz	r6, 8000b3a <__udivmoddi4+0xa2>
 8000b32:	40dc      	lsrs	r4, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0xbc>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	f000 80ed 	beq.w	8000d22 <__udivmoddi4+0x28a>
 8000b48:	2100      	movs	r1, #0
 8000b4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b54:	fab3 f183 	clz	r1, r3
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	d149      	bne.n	8000bf0 <__udivmoddi4+0x158>
 8000b5c:	42ab      	cmp	r3, r5
 8000b5e:	d302      	bcc.n	8000b66 <__udivmoddi4+0xce>
 8000b60:	4282      	cmp	r2, r0
 8000b62:	f200 80f8 	bhi.w	8000d56 <__udivmoddi4+0x2be>
 8000b66:	1a84      	subs	r4, r0, r2
 8000b68:	eb65 0203 	sbc.w	r2, r5, r3
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d0e2      	beq.n	8000b3a <__udivmoddi4+0xa2>
 8000b74:	e9c6 4700 	strd	r4, r7, [r6]
 8000b78:	e7df      	b.n	8000b3a <__udivmoddi4+0xa2>
 8000b7a:	b902      	cbnz	r2, 8000b7e <__udivmoddi4+0xe6>
 8000b7c:	deff      	udf	#255	; 0xff
 8000b7e:	fab2 f382 	clz	r3, r2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 8090 	bne.w	8000ca8 <__udivmoddi4+0x210>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f fe8c 	uxth.w	lr, ip
 8000b92:	2101      	movs	r1, #1
 8000b94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b98:	fb07 2015 	mls	r0, r7, r5, r2
 8000b9c:	0c22      	lsrs	r2, r4, #16
 8000b9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba2:	fb0e f005 	mul.w	r0, lr, r5
 8000ba6:	4290      	cmp	r0, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x124>
 8000baa:	eb1c 0202 	adds.w	r2, ip, r2
 8000bae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x122>
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	f200 80cb 	bhi.w	8000d50 <__udivmoddi4+0x2b8>
 8000bba:	4645      	mov	r5, r8
 8000bbc:	1a12      	subs	r2, r2, r0
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000bc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x14e>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bdc:	d202      	bcs.n	8000be4 <__udivmoddi4+0x14c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f200 80bb 	bhi.w	8000d5a <__udivmoddi4+0x2c2>
 8000be4:	4610      	mov	r0, r2
 8000be6:	eba4 040e 	sub.w	r4, r4, lr
 8000bea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bee:	e79f      	b.n	8000b30 <__udivmoddi4+0x98>
 8000bf0:	f1c1 0720 	rsb	r7, r1, #32
 8000bf4:	408b      	lsls	r3, r1
 8000bf6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000c02:	fa20 f307 	lsr.w	r3, r0, r7
 8000c06:	40fd      	lsrs	r5, r7
 8000c08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0c:	4323      	orrs	r3, r4
 8000c0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1a:	0c1c      	lsrs	r4, r3, #16
 8000c1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c20:	fb08 f50e 	mul.w	r5, r8, lr
 8000c24:	42a5      	cmp	r5, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000c2e:	d90b      	bls.n	8000c48 <__udivmoddi4+0x1b0>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c38:	f080 8088 	bcs.w	8000d4c <__udivmoddi4+0x2b4>
 8000c3c:	42a5      	cmp	r5, r4
 8000c3e:	f240 8085 	bls.w	8000d4c <__udivmoddi4+0x2b4>
 8000c42:	f1a8 0802 	sub.w	r8, r8, #2
 8000c46:	4464      	add	r4, ip
 8000c48:	1b64      	subs	r4, r4, r5
 8000c4a:	b29d      	uxth	r5, r3
 8000c4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c50:	fb09 4413 	mls	r4, r9, r3, r4
 8000c54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x1da>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c68:	d26c      	bcs.n	8000d44 <__udivmoddi4+0x2ac>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	d96a      	bls.n	8000d44 <__udivmoddi4+0x2ac>
 8000c6e:	3b02      	subs	r3, #2
 8000c70:	4464      	add	r4, ip
 8000c72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c76:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	46c8      	mov	r8, r9
 8000c82:	46ae      	mov	lr, r5
 8000c84:	d356      	bcc.n	8000d34 <__udivmoddi4+0x29c>
 8000c86:	d053      	beq.n	8000d30 <__udivmoddi4+0x298>
 8000c88:	b156      	cbz	r6, 8000ca0 <__udivmoddi4+0x208>
 8000c8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000c8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000c92:	fa04 f707 	lsl.w	r7, r4, r7
 8000c96:	40ca      	lsrs	r2, r1
 8000c98:	40cc      	lsrs	r4, r1
 8000c9a:	4317      	orrs	r7, r2
 8000c9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	f1c3 0120 	rsb	r1, r3, #32
 8000cac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000cb8:	409d      	lsls	r5, r3
 8000cba:	432a      	orrs	r2, r5
 8000cbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc0:	fa1f fe8c 	uxth.w	lr, ip
 8000cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ccc:	0c11      	lsrs	r1, r2, #16
 8000cce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000cd6:	428d      	cmp	r5, r1
 8000cd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x258>
 8000cde:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce6:	d22f      	bcs.n	8000d48 <__udivmoddi4+0x2b0>
 8000ce8:	428d      	cmp	r5, r1
 8000cea:	d92d      	bls.n	8000d48 <__udivmoddi4+0x2b0>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4461      	add	r1, ip
 8000cf0:	1b49      	subs	r1, r1, r5
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cf8:	fb07 1115 	mls	r1, r7, r5, r1
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	fb05 f10e 	mul.w	r1, r5, lr
 8000d04:	4291      	cmp	r1, r2
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x282>
 8000d08:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d10:	d216      	bcs.n	8000d40 <__udivmoddi4+0x2a8>
 8000d12:	4291      	cmp	r1, r2
 8000d14:	d914      	bls.n	8000d40 <__udivmoddi4+0x2a8>
 8000d16:	3d02      	subs	r5, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a52      	subs	r2, r2, r1
 8000d1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d20:	e738      	b.n	8000b94 <__udivmoddi4+0xfc>
 8000d22:	4631      	mov	r1, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e708      	b.n	8000b3a <__udivmoddi4+0xa2>
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e6e6      	b.n	8000afa <__udivmoddi4+0x62>
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x90>
 8000d30:	4548      	cmp	r0, r9
 8000d32:	d2a9      	bcs.n	8000c88 <__udivmoddi4+0x1f0>
 8000d34:	ebb9 0802 	subs.w	r8, r9, r2
 8000d38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	e7a3      	b.n	8000c88 <__udivmoddi4+0x1f0>
 8000d40:	4645      	mov	r5, r8
 8000d42:	e7ea      	b.n	8000d1a <__udivmoddi4+0x282>
 8000d44:	462b      	mov	r3, r5
 8000d46:	e794      	b.n	8000c72 <__udivmoddi4+0x1da>
 8000d48:	4640      	mov	r0, r8
 8000d4a:	e7d1      	b.n	8000cf0 <__udivmoddi4+0x258>
 8000d4c:	46d0      	mov	r8, sl
 8000d4e:	e77b      	b.n	8000c48 <__udivmoddi4+0x1b0>
 8000d50:	3d02      	subs	r5, #2
 8000d52:	4462      	add	r2, ip
 8000d54:	e732      	b.n	8000bbc <__udivmoddi4+0x124>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e70a      	b.n	8000b70 <__udivmoddi4+0xd8>
 8000d5a:	4464      	add	r4, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	e742      	b.n	8000be6 <__udivmoddi4+0x14e>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <__aeabi_d2uiz>:
 8000d64:	004a      	lsls	r2, r1, #1
 8000d66:	d211      	bcs.n	8000d8c <__aeabi_d2uiz+0x28>
 8000d68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d6c:	d211      	bcs.n	8000d92 <__aeabi_d2uiz+0x2e>
 8000d6e:	d50d      	bpl.n	8000d8c <__aeabi_d2uiz+0x28>
 8000d70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d78:	d40e      	bmi.n	8000d98 <__aeabi_d2uiz+0x34>
 8000d7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d86:	fa23 f002 	lsr.w	r0, r3, r2
 8000d8a:	4770      	bx	lr
 8000d8c:	f04f 0000 	mov.w	r0, #0
 8000d90:	4770      	bx	lr
 8000d92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d96:	d102      	bne.n	8000d9e <__aeabi_d2uiz+0x3a>
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr

08000da4 <main>:
static u8 Global_UartMessage[100];
static Std_True_or_FalseType Global_UartMessageFlag = ZERO_VALUE;


int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	/********************************** It must *************************************/

	/* RCC PART */
	Rcc_enuInit(&rcc);
 8000da8:	4815      	ldr	r0, [pc, #84]	; (8000e00 <main+0x5c>)
 8000daa:	f001 fb81 	bl	80024b0 <Rcc_enuInit>
	Gpio_enuEnableClockAllGPIOs();
 8000dae:	f000 ff3b 	bl	8001c28 <Gpio_enuEnableClockAllGPIOs>



	/* Interrupt Part */
	Scb_enuSetGroupPrioirty(SCB_SELECT_GROUP_PRIORITY_ZERO_AND_SUB_PRIORITY_16);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f001 fc2a 	bl	800260c <Scb_enuSetGroupPrioirty>



	Gpio_enuInit();
 8000db8:	f000 fe2c 	bl	8001a14 <Gpio_enuInit>



	/* UART part */

	Nvic_SetInterruptPriority(NVIC_USART1, NVIC_Select_Group_0, NVIC_Select_Sub_0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2025      	movs	r0, #37	; 0x25
 8000dc2:	f000 ff95 	bl	8001cf0 <Nvic_SetInterruptPriority>
	Gpio_enuSetAF(GPIO_PINB6, GPIO_SELECT_AF7_USART1_USART2_USART3); // for Usart Tx1
 8000dc6:	2107      	movs	r1, #7
 8000dc8:	2016      	movs	r0, #22
 8000dca:	f000 fecf 	bl	8001b6c <Gpio_enuSetAF>
	Gpio_enuSetAF(GPIO_PINB7, GPIO_SELECT_AF7_USART1_USART2_USART3); // for Usart Rx1
 8000dce:	2107      	movs	r1, #7
 8000dd0:	2017      	movs	r0, #23
 8000dd2:	f000 fecb 	bl	8001b6c <Gpio_enuSetAF>


	Usart_enuSetCallbackRxFunction(&Usart1, Usart_Isr);
 8000dd6:	490b      	ldr	r1, [pc, #44]	; (8000e04 <main+0x60>)
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <main+0x64>)
 8000dda:	f001 ffc7 	bl	8002d6c <Usart_enuSetCallbackRxFunction>
	Usart_enuInit(&Usart1);
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <main+0x64>)
 8000de0:	f001 fe1e 	bl	8002a20 <Usart_enuInit>
	Usart_enuEnableRxInterrupt(&Usart1);
 8000de4:	4808      	ldr	r0, [pc, #32]	; (8000e08 <main+0x64>)
 8000de6:	f001 ff9b 	bl	8002d20 <Usart_enuEnableRxInterrupt>
	Nvic_enuEnableInterrupt(NVIC_USART1);
 8000dea:	2025      	movs	r0, #37	; 0x25
 8000dec:	f000 ff58 	bl	8001ca0 <Nvic_enuEnableInterrupt>


	/* Flash Driver Part */
	Flash_enuInit();
 8000df0:	f000 fb5e 	bl	80014b0 <Flash_enuInit>



///////////////////////////////////////////////////////////////////////////////////////

	App_IdleState();
 8000df4:	f000 f80a 	bl	8000e0c <App_IdleState>


	App_WaitCommandState();
 8000df8:	f000 f886 	bl	8000f08 <App_WaitCommandState>

	for(;;){
 8000dfc:	e7fe      	b.n	8000dfc <main+0x58>
 8000dfe:	bf00      	nop
 8000e00:	20000158 	.word	0x20000158
 8000e04:	080013f9 	.word	0x080013f9
 8000e08:	20000190 	.word	0x20000190

08000e0c <App_IdleState>:





void App_IdleState(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

	u8 Loc_u8CheckFlag = ZERO_VALUE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
	while(Loc_u8CheckFlag == ZERO_VALUE){
 8000e16:	e011      	b.n	8000e3c <App_IdleState+0x30>

		if(Global_UartMessageFlag == STD_TRUE){
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <App_IdleState+0x40>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10d      	bne.n	8000e3c <App_IdleState+0x30>

			Global_UartMessageFlag = STD_FALSE;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <App_IdleState+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]


			/* If True, then break from While */
			if(CompareTwoStrings(Global_UartMessage,(u8*)"Start") == STD_TRUE){
 8000e26:	490a      	ldr	r1, [pc, #40]	; (8000e50 <App_IdleState+0x44>)
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <App_IdleState+0x48>)
 8000e2a:	f002 f887 	bl	8002f3c <CompareTwoStrings>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d103      	bne.n	8000e3c <App_IdleState+0x30>
				Loc_u8CheckFlag = ONE_VALUE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	71fb      	strb	r3, [r7, #7]
				App_WelcomeMesasage();
 8000e38:	f000 f80e 	bl	8000e58 <App_WelcomeMesasage>
	while(Loc_u8CheckFlag == ZERO_VALUE){
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0ea      	beq.n	8000e18 <App_IdleState+0xc>
			}
		}
	}
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000278 	.word	0x20000278
 8000e50:	0800397c 	.word	0x0800397c
 8000e54:	20000214 	.word	0x20000214

08000e58 <App_WelcomeMesasage>:

void App_WelcomeMesasage(void){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "******WELCOME To Flash Controller******\n");
 8000e5c:	491c      	ldr	r1, [pc, #112]	; (8000ed0 <App_WelcomeMesasage+0x78>)
 8000e5e:	481d      	ldr	r0, [pc, #116]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e60:	f001 ff28 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "Select Command From The Following: \n");
 8000e64:	491c      	ldr	r1, [pc, #112]	; (8000ed8 <App_WelcomeMesasage+0x80>)
 8000e66:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e68:	f001 ff24 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "***************************************\n");
 8000e6c:	491b      	ldr	r1, [pc, #108]	; (8000edc <App_WelcomeMesasage+0x84>)
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e70:	f001 ff20 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "1- Flash Lock \n");
 8000e74:	491a      	ldr	r1, [pc, #104]	; (8000ee0 <App_WelcomeMesasage+0x88>)
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e78:	f001 ff1c 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "2- Flash Unlock \n");
 8000e7c:	4919      	ldr	r1, [pc, #100]	; (8000ee4 <App_WelcomeMesasage+0x8c>)
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e80:	f001 ff18 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"3- Write Data \n");
 8000e84:	4918      	ldr	r1, [pc, #96]	; (8000ee8 <App_WelcomeMesasage+0x90>)
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e88:	f001 ff14 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"4- Read Data \n");
 8000e8c:	4917      	ldr	r1, [pc, #92]	; (8000eec <App_WelcomeMesasage+0x94>)
 8000e8e:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e90:	f001 ff10 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"5- Sector Erase  \n");
 8000e94:	4916      	ldr	r1, [pc, #88]	; (8000ef0 <App_WelcomeMesasage+0x98>)
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000e98:	f001 ff0c 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"6- Write Protection \n");
 8000e9c:	4915      	ldr	r1, [pc, #84]	; (8000ef4 <App_WelcomeMesasage+0x9c>)
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000ea0:	f001 ff08 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"7- Remove Write Protection \n");
 8000ea4:	4914      	ldr	r1, [pc, #80]	; (8000ef8 <App_WelcomeMesasage+0xa0>)
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000ea8:	f001 ff04 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "8- Option Byte unlock \n");
 8000eac:	4913      	ldr	r1, [pc, #76]	; (8000efc <App_WelcomeMesasage+0xa4>)
 8000eae:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000eb0:	f001 ff00 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "9- Option Byte Lock \n");
 8000eb4:	4912      	ldr	r1, [pc, #72]	; (8000f00 <App_WelcomeMesasage+0xa8>)
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000eb8:	f001 fefc 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1,(u8*) "***************************************\n");
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <App_WelcomeMesasage+0x84>)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000ec0:	f001 fef8 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"Thanks To Eng/ Ahmed El-Deep... https://www.youtube.com/@ahmedeldeep \n\n");
 8000ec4:	490f      	ldr	r1, [pc, #60]	; (8000f04 <App_WelcomeMesasage+0xac>)
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <App_WelcomeMesasage+0x7c>)
 8000ec8:	f001 fef4 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08003984 	.word	0x08003984
 8000ed4:	20000190 	.word	0x20000190
 8000ed8:	080039b0 	.word	0x080039b0
 8000edc:	080039d8 	.word	0x080039d8
 8000ee0:	08003a04 	.word	0x08003a04
 8000ee4:	08003a14 	.word	0x08003a14
 8000ee8:	08003a28 	.word	0x08003a28
 8000eec:	08003a38 	.word	0x08003a38
 8000ef0:	08003a48 	.word	0x08003a48
 8000ef4:	08003a5c 	.word	0x08003a5c
 8000ef8:	08003a74 	.word	0x08003a74
 8000efc:	08003a94 	.word	0x08003a94
 8000f00:	08003aac 	.word	0x08003aac
 8000f04:	08003ac4 	.word	0x08003ac4

08000f08 <App_WaitCommandState>:



void App_WaitCommandState(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

	while(1){
		if(Global_UartMessageFlag == STD_TRUE){
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <App_WaitCommandState+0xc8>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1fb      	bne.n	8000f0c <App_WaitCommandState+0x4>

			Global_UartMessageFlag = STD_FALSE;
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <App_WaitCommandState+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]


			if( CompareTwoStrings(Global_UartMessage,(u8*)"1") == STD_TRUE){
 8000f1a:	492e      	ldr	r1, [pc, #184]	; (8000fd4 <App_WaitCommandState+0xcc>)
 8000f1c:	482e      	ldr	r0, [pc, #184]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f1e:	f002 f80d 	bl	8002f3c <CompareTwoStrings>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d102      	bne.n	8000f2e <App_WaitCommandState+0x26>
				App_FlashLockState();
 8000f28:	f000 f868 	bl	8000ffc <App_FlashLockState>
 8000f2c:	e7ee      	b.n	8000f0c <App_WaitCommandState+0x4>
			}

			else if( CompareTwoStrings(Global_UartMessage,(u8*)"2") == STD_TRUE){
 8000f2e:	492b      	ldr	r1, [pc, #172]	; (8000fdc <App_WaitCommandState+0xd4>)
 8000f30:	4829      	ldr	r0, [pc, #164]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f32:	f002 f803 	bl	8002f3c <CompareTwoStrings>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <App_WaitCommandState+0x3a>
				App_FlashUnlockState();
 8000f3c:	f000 f86c 	bl	8001018 <App_FlashUnlockState>
 8000f40:	e7e4      	b.n	8000f0c <App_WaitCommandState+0x4>
			}

			else if( CompareTwoStrings(Global_UartMessage,(u8*)"3") == STD_TRUE){
 8000f42:	4927      	ldr	r1, [pc, #156]	; (8000fe0 <App_WaitCommandState+0xd8>)
 8000f44:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f46:	f001 fff9 	bl	8002f3c <CompareTwoStrings>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d102      	bne.n	8000f56 <App_WaitCommandState+0x4e>
				App_WriteState();
 8000f50:	f000 f870 	bl	8001034 <App_WriteState>
 8000f54:	e7da      	b.n	8000f0c <App_WaitCommandState+0x4>
			}
			else if( CompareTwoStrings(Global_UartMessage,(u8*)"4") == STD_TRUE){
 8000f56:	4923      	ldr	r1, [pc, #140]	; (8000fe4 <App_WaitCommandState+0xdc>)
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f5a:	f001 ffef 	bl	8002f3c <CompareTwoStrings>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <App_WaitCommandState+0x62>
				App_ReadState();
 8000f64:	f000 f8b4 	bl	80010d0 <App_ReadState>
 8000f68:	e7d0      	b.n	8000f0c <App_WaitCommandState+0x4>
			}
			else if( CompareTwoStrings(Global_UartMessage,(u8*)"5") == STD_TRUE){
 8000f6a:	491f      	ldr	r1, [pc, #124]	; (8000fe8 <App_WaitCommandState+0xe0>)
 8000f6c:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f6e:	f001 ffe5 	bl	8002f3c <CompareTwoStrings>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <App_WaitCommandState+0x76>
				App_SectorEraseState();
 8000f78:	f000 f91e 	bl	80011b8 <App_SectorEraseState>
 8000f7c:	e7c6      	b.n	8000f0c <App_WaitCommandState+0x4>
			}
			else if( CompareTwoStrings(Global_UartMessage,(u8*)"6") == STD_TRUE){
 8000f7e:	491b      	ldr	r1, [pc, #108]	; (8000fec <App_WaitCommandState+0xe4>)
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f82:	f001 ffdb 	bl	8002f3c <CompareTwoStrings>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d102      	bne.n	8000f92 <App_WaitCommandState+0x8a>
				App_WriteProtectionState();
 8000f8c:	f000 f950 	bl	8001230 <App_WriteProtectionState>
 8000f90:	e7bc      	b.n	8000f0c <App_WaitCommandState+0x4>
			}
			else if( CompareTwoStrings(Global_UartMessage,(u8*)"7") == STD_TRUE){
 8000f92:	4917      	ldr	r1, [pc, #92]	; (8000ff0 <App_WaitCommandState+0xe8>)
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000f96:	f001 ffd1 	bl	8002f3c <CompareTwoStrings>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d102      	bne.n	8000fa6 <App_WaitCommandState+0x9e>
				App_RemoveWriteProtectionState();
 8000fa0:	f000 f984 	bl	80012ac <App_RemoveWriteProtectionState>
 8000fa4:	e7b2      	b.n	8000f0c <App_WaitCommandState+0x4>
			}
			else if( CompareTwoStrings(Global_UartMessage,(u8*)"8") == STD_TRUE){
 8000fa6:	4913      	ldr	r1, [pc, #76]	; (8000ff4 <App_WaitCommandState+0xec>)
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000faa:	f001 ffc7 	bl	8002f3c <CompareTwoStrings>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <App_WaitCommandState+0xb2>

				App_OptionByteUnlockState();
 8000fb4:	f000 f9be 	bl	8001334 <App_OptionByteUnlockState>
 8000fb8:	e7a8      	b.n	8000f0c <App_WaitCommandState+0x4>
			}
			else if( CompareTwoStrings(Global_UartMessage,(u8*)"9") == STD_TRUE){
 8000fba:	490f      	ldr	r1, [pc, #60]	; (8000ff8 <App_WaitCommandState+0xf0>)
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <App_WaitCommandState+0xd0>)
 8000fbe:	f001 ffbd 	bl	8002f3c <CompareTwoStrings>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1a1      	bne.n	8000f0c <App_WaitCommandState+0x4>
				App_OptionByteLockState();
 8000fc8:	f000 f9a6 	bl	8001318 <App_OptionByteLockState>
		if(Global_UartMessageFlag == STD_TRUE){
 8000fcc:	e79e      	b.n	8000f0c <App_WaitCommandState+0x4>
 8000fce:	bf00      	nop
 8000fd0:	20000278 	.word	0x20000278
 8000fd4:	08003b0c 	.word	0x08003b0c
 8000fd8:	20000214 	.word	0x20000214
 8000fdc:	08003b10 	.word	0x08003b10
 8000fe0:	08003b14 	.word	0x08003b14
 8000fe4:	08003b18 	.word	0x08003b18
 8000fe8:	08003b1c 	.word	0x08003b1c
 8000fec:	08003b20 	.word	0x08003b20
 8000ff0:	08003b24 	.word	0x08003b24
 8000ff4:	08003b28 	.word	0x08003b28
 8000ff8:	08003b2c 	.word	0x08003b2c

08000ffc <App_FlashLockState>:

	}
}


void App_FlashLockState(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nFlash Is Locked \n\n");
 8001000:	4903      	ldr	r1, [pc, #12]	; (8001010 <App_FlashLockState+0x14>)
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <App_FlashLockState+0x18>)
 8001004:	f001 fe56 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Flash_enuLock();
 8001008:	f000 fa78 	bl	80014fc <Flash_enuLock>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08003b30 	.word	0x08003b30
 8001014:	20000190 	.word	0x20000190

08001018 <App_FlashUnlockState>:
void App_FlashUnlockState(void){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nFlash Is UnLocked \n\n");
 800101c:	4903      	ldr	r1, [pc, #12]	; (800102c <App_FlashUnlockState+0x14>)
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <App_FlashUnlockState+0x18>)
 8001020:	f001 fe48 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Flash_enuUnlock();
 8001024:	f000 fa7e 	bl	8001524 <Flash_enuUnlock>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	08003b44 	.word	0x08003b44
 8001030:	20000190 	.word	0x20000190

08001034 <App_WriteState>:


void App_WriteState(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

	u8 Loc_u8CheckFlag = ZERO_VALUE;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
	Std_True_or_FalseType Loc_Check = STD_FALSE;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
	u32 Loc_u32Address;
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nEnter Address To Write To : ");
 8001042:	491d      	ldr	r1, [pc, #116]	; (80010b8 <App_WriteState+0x84>)
 8001044:	481d      	ldr	r0, [pc, #116]	; (80010bc <App_WriteState+0x88>)
 8001046:	f001 fe35 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


	/* Get Address Part */
	while(Loc_u8CheckFlag == ZERO_VALUE){
 800104a:	e00b      	b.n	8001064 <App_WriteState+0x30>

		if(Global_UartMessageFlag == STD_TRUE){
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <App_WriteState+0x8c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <App_WriteState+0x30>

			Global_UartMessageFlag = STD_FALSE;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <App_WriteState+0x8c>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
			Loc_u32Address = (*((u32*)Global_UartMessage));
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <App_WriteState+0x90>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	60bb      	str	r3, [r7, #8]

			Loc_u8CheckFlag = ONE_VALUE;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
	while(Loc_u8CheckFlag == ZERO_VALUE){
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <App_WriteState+0x18>
		}
	}


	/* Get Data Part */
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nEnter Data To Write To : ");
 800106a:	4917      	ldr	r1, [pc, #92]	; (80010c8 <App_WriteState+0x94>)
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <App_WriteState+0x88>)
 800106e:	f001 fe21 	bl	8002cb4 <Usart_enuTransmitStringBlocking>

	Loc_u8CheckFlag = ZERO_VALUE;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	while(Loc_u8CheckFlag == ZERO_VALUE){
 8001076:	e008      	b.n	800108a <App_WriteState+0x56>

		if(Global_UartMessageFlag == STD_TRUE){
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <App_WriteState+0x8c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d104      	bne.n	800108a <App_WriteState+0x56>
			Global_UartMessageFlag = STD_FALSE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <App_WriteState+0x8c>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
			Loc_u8CheckFlag = ONE_VALUE;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
	while(Loc_u8CheckFlag == ZERO_VALUE){
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f3      	beq.n	8001078 <App_WriteState+0x44>
		}
	}

	Flash_enuWriteWordAt_Sync(Loc_u32Address, Global_UartMessage);
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <App_WriteState+0x90>)
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f000 fa5e 	bl	8001554 <Flash_enuWriteWordAt_Sync>
	App_CheckErrors(&Loc_Check);
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f958 	bl	8001350 <App_CheckErrors>
	if(Loc_Check != STD_TRUE){
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d003      	beq.n	80010ae <App_WriteState+0x7a>
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nWriting Is Done \n");
 80010a6:	4909      	ldr	r1, [pc, #36]	; (80010cc <App_WriteState+0x98>)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <App_WriteState+0x88>)
 80010aa:	f001 fe03 	bl	8002cb4 <Usart_enuTransmitStringBlocking>

	}



}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	08003b5c 	.word	0x08003b5c
 80010bc:	20000190 	.word	0x20000190
 80010c0:	20000278 	.word	0x20000278
 80010c4:	20000214 	.word	0x20000214
 80010c8:	08003b7c 	.word	0x08003b7c
 80010cc:	08003b98 	.word	0x08003b98

080010d0 <App_ReadState>:

void App_ReadState(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09e      	sub	sp, #120	; 0x78
 80010d4:	af00      	add	r7, sp, #0
	u8 Loc_u8CheckFlag = ZERO_VALUE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	u32 Loc_u32Address;
	Std_True_or_FalseType Loc_Check = STD_FALSE;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	u8 Loc_DataTempInAsci[4];
	u8 Loc_DataTempString[100];
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nEnter Address To Read From : ");
 80010e2:	4930      	ldr	r1, [pc, #192]	; (80011a4 <App_ReadState+0xd4>)
 80010e4:	4830      	ldr	r0, [pc, #192]	; (80011a8 <App_ReadState+0xd8>)
 80010e6:	f001 fde5 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


	/* Get Address Part */
	while(Loc_u8CheckFlag == ZERO_VALUE){
 80010ea:	e00c      	b.n	8001106 <App_ReadState+0x36>

		if(Global_UartMessageFlag == STD_TRUE){
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <App_ReadState+0xdc>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <App_ReadState+0x36>

			Global_UartMessageFlag = STD_FALSE;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <App_ReadState+0xdc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
			Loc_u32Address = (*((u32*)Global_UartMessage));
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <App_ReadState+0xe0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	673b      	str	r3, [r7, #112]	; 0x70

			Loc_u8CheckFlag = ONE_VALUE;
 8001100:	2301      	movs	r3, #1
 8001102:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while(Loc_u8CheckFlag == ZERO_VALUE){
 8001106:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0ee      	beq.n	80010ec <App_ReadState+0x1c>
		}
	}
	App_CheckErrors(&Loc_Check);
 800110e:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f91c 	bl	8001350 <App_CheckErrors>

	if(Loc_Check != STD_TRUE){
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	2b01      	cmp	r3, #1
 800111e:	d03d      	beq.n	800119c <App_ReadState+0xcc>
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nThe Data Is : ");
 8001120:	4924      	ldr	r1, [pc, #144]	; (80011b4 <App_ReadState+0xe4>)
 8001122:	4821      	ldr	r0, [pc, #132]	; (80011a8 <App_ReadState+0xd8>)
 8001124:	f001 fdc6 	bl	8002cb4 <Usart_enuTransmitStringBlocking>

		Flash_enuReadWordAt_Sync(Loc_u32Address , Loc_DataTempInAsci);
 8001128:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800112c:	4619      	mov	r1, r3
 800112e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001130:	f000 fa42 	bl	80015b8 <Flash_enuReadWordAt_Sync>

		Convert_IntToString(Loc_DataTempInAsci[0], Loc_DataTempString);
 8001134:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001138:	461a      	mov	r2, r3
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f001 fe7e 	bl	8002e40 <Convert_IntToString>
		Usart_enuTransmitStringBlocking(&Usart1, Loc_DataTempString);
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <App_ReadState+0xd8>)
 800114a:	f001 fdb3 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


		Convert_IntToString(Loc_DataTempInAsci[1], Loc_DataTempString);
 800114e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001152:	461a      	mov	r2, r3
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f001 fe71 	bl	8002e40 <Convert_IntToString>
		Usart_enuTransmitStringBlocking(&Usart1, Loc_DataTempString);
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <App_ReadState+0xd8>)
 8001164:	f001 fda6 	bl	8002cb4 <Usart_enuTransmitStringBlocking>

		Convert_IntToString(Loc_DataTempInAsci[2], Loc_DataTempString);
 8001168:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800116c:	461a      	mov	r2, r3
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f001 fe64 	bl	8002e40 <Convert_IntToString>
		Usart_enuTransmitStringBlocking(&Usart1, Loc_DataTempString);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <App_ReadState+0xd8>)
 800117e:	f001 fd99 	bl	8002cb4 <Usart_enuTransmitStringBlocking>

		Convert_IntToString(Loc_DataTempInAsci[3], Loc_DataTempString);
 8001182:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001186:	461a      	mov	r2, r3
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f001 fe57 	bl	8002e40 <Convert_IntToString>
		Usart_enuTransmitStringBlocking(&Usart1, Loc_DataTempString);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <App_ReadState+0xd8>)
 8001198:	f001 fd8c 	bl	8002cb4 <Usart_enuTransmitStringBlocking>





}
 800119c:	bf00      	nop
 800119e:	3778      	adds	r7, #120	; 0x78
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08003bac 	.word	0x08003bac
 80011a8:	20000190 	.word	0x20000190
 80011ac:	20000278 	.word	0x20000278
 80011b0:	20000214 	.word	0x20000214
 80011b4:	08003bcc 	.word	0x08003bcc

080011b8 <App_SectorEraseState>:


void App_SectorEraseState(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

	u8 Loc_u8CheckFlag = ZERO_VALUE;
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
	u8 Loc_u8SectorNumberInt;

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nEnter Sector Index To Write To : ");
 80011c2:	4916      	ldr	r1, [pc, #88]	; (800121c <App_SectorEraseState+0x64>)
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <App_SectorEraseState+0x68>)
 80011c6:	f001 fd75 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


	/* Get sector number Part */
	while(Loc_u8CheckFlag == ZERO_VALUE){
 80011ca:	e011      	b.n	80011f0 <App_SectorEraseState+0x38>

		if(Global_UartMessageFlag == STD_TRUE){
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <App_SectorEraseState+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d10d      	bne.n	80011f0 <App_SectorEraseState+0x38>

			Global_UartMessageFlag = STD_FALSE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <App_SectorEraseState+0x6c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
			Usart_enuTransmitStringBlocking(&Usart1,Global_UartMessage );
 80011da:	4913      	ldr	r1, [pc, #76]	; (8001228 <App_SectorEraseState+0x70>)
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <App_SectorEraseState+0x68>)
 80011de:	f001 fd69 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
			Convert_StringTou8(&Loc_u8SectorNumberInt, Global_UartMessage);
 80011e2:	1dbb      	adds	r3, r7, #6
 80011e4:	4910      	ldr	r1, [pc, #64]	; (8001228 <App_SectorEraseState+0x70>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fe44 	bl	8002e74 <Convert_StringTou8>


			Loc_u8CheckFlag = ONE_VALUE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	71fb      	strb	r3, [r7, #7]
	while(Loc_u8CheckFlag == ZERO_VALUE){
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0ea      	beq.n	80011cc <App_SectorEraseState+0x14>
	}
	/*
	 * user will enter 0 to 11  --->
	 * and will enter  12 to 23
	 */
	if(Loc_u8SectorNumberInt> 11){
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	2b0b      	cmp	r3, #11
 80011fa:	d903      	bls.n	8001204 <App_SectorEraseState+0x4c>
		Loc_u8SectorNumberInt+=FOUR_VALUE;
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	3304      	adds	r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	71bb      	strb	r3, [r7, #6]
	}

	Flash_enuEraseSectorAt_Sync(Loc_u8SectorNumberInt);
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f4 	bl	80015f4 <Flash_enuEraseSectorAt_Sync>

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nErasing Action Is Done \n");
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <App_SectorEraseState+0x74>)
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <App_SectorEraseState+0x68>)
 8001210:	f001 fd50 	bl	8002cb4 <Usart_enuTransmitStringBlocking>

}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08003bdc 	.word	0x08003bdc
 8001220:	20000190 	.word	0x20000190
 8001224:	20000278 	.word	0x20000278
 8001228:	20000214 	.word	0x20000214
 800122c:	08003c00 	.word	0x08003c00

08001230 <App_WriteProtectionState>:
void App_WriteProtectionState(void){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	u8 Loc_u8CheckFlag = ZERO_VALUE;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
	Std_True_or_FalseType Loc_Check = STD_FALSE;
 800123a:	2300      	movs	r3, #0
 800123c:	71bb      	strb	r3, [r7, #6]

		u8 Loc_u8SectorNumberInt;
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nEnter Sector Index To Add Write Protection: ");
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <App_WriteProtectionState+0x68>)
 8001240:	4816      	ldr	r0, [pc, #88]	; (800129c <App_WriteProtectionState+0x6c>)
 8001242:	f001 fd37 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


		/* Get sector number Part */
		while(Loc_u8CheckFlag == ZERO_VALUE){
 8001246:	e011      	b.n	800126c <App_WriteProtectionState+0x3c>

			if(Global_UartMessageFlag == STD_TRUE){
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <App_WriteProtectionState+0x70>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10d      	bne.n	800126c <App_WriteProtectionState+0x3c>

				Global_UartMessageFlag = STD_FALSE;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <App_WriteProtectionState+0x70>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
				Usart_enuTransmitStringBlocking(&Usart1,Global_UartMessage );
 8001256:	4913      	ldr	r1, [pc, #76]	; (80012a4 <App_WriteProtectionState+0x74>)
 8001258:	4810      	ldr	r0, [pc, #64]	; (800129c <App_WriteProtectionState+0x6c>)
 800125a:	f001 fd2b 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
				Convert_StringTou8(&Loc_u8SectorNumberInt, Global_UartMessage);
 800125e:	1d7b      	adds	r3, r7, #5
 8001260:	4910      	ldr	r1, [pc, #64]	; (80012a4 <App_WriteProtectionState+0x74>)
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fe06 	bl	8002e74 <Convert_StringTou8>


				Loc_u8CheckFlag = ONE_VALUE;
 8001268:	2301      	movs	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
		while(Loc_u8CheckFlag == ZERO_VALUE){
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0ea      	beq.n	8001248 <App_WriteProtectionState+0x18>
		/*
		 * user will enter 0 to 11  --->
		 * and will enter  12 to 23
		 */

		Flash_enuWriteProtectionForSectorx_Sync(Loc_u8SectorNumberInt);
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f9ff 	bl	8001678 <Flash_enuWriteProtectionForSectorx_Sync>
		App_CheckErrors(&Loc_Check);
 800127a:	1dbb      	adds	r3, r7, #6
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f867 	bl	8001350 <App_CheckErrors>

		if(Loc_Check != STD_TRUE){
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d003      	beq.n	8001290 <App_WriteProtectionState+0x60>
			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nWrite Protection Is Done \n");
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <App_WriteProtectionState+0x78>)
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <App_WriteProtectionState+0x6c>)
 800128c:	f001 fd12 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


		}


}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	08003c1c 	.word	0x08003c1c
 800129c:	20000190 	.word	0x20000190
 80012a0:	20000278 	.word	0x20000278
 80012a4:	20000214 	.word	0x20000214
 80012a8:	08003c4c 	.word	0x08003c4c

080012ac <App_RemoveWriteProtectionState>:


void App_RemoveWriteProtectionState(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	u8 Loc_u8CheckFlag = ZERO_VALUE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
		u8 Loc_u8SectorNumberInt;
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nEnter Sector Index To Remove Write Protection : ");
 80012b6:	4913      	ldr	r1, [pc, #76]	; (8001304 <App_RemoveWriteProtectionState+0x58>)
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <App_RemoveWriteProtectionState+0x5c>)
 80012ba:	f001 fcfb 	bl	8002cb4 <Usart_enuTransmitStringBlocking>


		/* Get sector number Part */
		while(Loc_u8CheckFlag == ZERO_VALUE){
 80012be:	e011      	b.n	80012e4 <App_RemoveWriteProtectionState+0x38>

			if(Global_UartMessageFlag == STD_TRUE){
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <App_RemoveWriteProtectionState+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d10d      	bne.n	80012e4 <App_RemoveWriteProtectionState+0x38>

				Global_UartMessageFlag = STD_FALSE;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <App_RemoveWriteProtectionState+0x60>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
				Usart_enuTransmitStringBlocking(&Usart1,Global_UartMessage );
 80012ce:	4910      	ldr	r1, [pc, #64]	; (8001310 <App_RemoveWriteProtectionState+0x64>)
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <App_RemoveWriteProtectionState+0x5c>)
 80012d2:	f001 fcef 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
				Convert_StringTou8(&Loc_u8SectorNumberInt, Global_UartMessage);
 80012d6:	1dbb      	adds	r3, r7, #6
 80012d8:	490d      	ldr	r1, [pc, #52]	; (8001310 <App_RemoveWriteProtectionState+0x64>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fdca 	bl	8002e74 <Convert_StringTou8>


				Loc_u8CheckFlag = ONE_VALUE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	71fb      	strb	r3, [r7, #7]
		while(Loc_u8CheckFlag == ZERO_VALUE){
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ea      	beq.n	80012c0 <App_RemoveWriteProtectionState+0x14>
		/*
		 * user will enter 0 to 11  --->
		 * and will enter  12 to 23
		 */

		Flash_enuRemoveWriteProtectionForSectorx_Sync(Loc_u8SectorNumberInt);
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa09 	bl	8001704 <Flash_enuRemoveWriteProtectionForSectorx_Sync>

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nRemove Write Protection Is Done \n");
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <App_RemoveWriteProtectionState+0x68>)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <App_RemoveWriteProtectionState+0x5c>)
 80012f6:	f001 fcdd 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08003c68 	.word	0x08003c68
 8001308:	20000190 	.word	0x20000190
 800130c:	20000278 	.word	0x20000278
 8001310:	20000214 	.word	0x20000214
 8001314:	08003c9c 	.word	0x08003c9c

08001318 <App_OptionByteLockState>:

void App_OptionByteLockState(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nOption Byte Is Locked \n\n");
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <App_OptionByteLockState+0x14>)
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <App_OptionByteLockState+0x18>)
 8001320:	f001 fcc8 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Flash_enuLockOptionByte();
 8001324:	f000 fa32 	bl	800178c <Flash_enuLockOptionByte>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08003cc0 	.word	0x08003cc0
 8001330:	20000190 	.word	0x20000190

08001334 <App_OptionByteUnlockState>:

void App_OptionByteUnlockState(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nOption Byte Is Unlocked \n\n");
 8001338:	4903      	ldr	r1, [pc, #12]	; (8001348 <App_OptionByteUnlockState+0x14>)
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <App_OptionByteUnlockState+0x18>)
 800133c:	f001 fcba 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
	Flash_enuUnlockOptionByte();
 8001340:	f000 fa38 	bl	80017b4 <Flash_enuUnlockOptionByte>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	08003cdc 	.word	0x08003cdc
 800134c:	20000190 	.word	0x20000190

08001350 <App_CheckErrors>:


void App_CheckErrors(Std_True_or_FalseType* Address_Result){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	Std_True_or_FalseType Loc_FLagCheck = STD_FALSE;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
	*Address_Result = STD_FALSE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
	Flash_enuIsProgramSequenceErrorHappended(&Loc_FLagCheck);
 8001362:	f107 030f 	add.w	r3, r7, #15
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa88 	bl	800187c <Flash_enuIsProgramSequenceErrorHappended>
	if(Loc_FLagCheck == STD_TRUE){
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d106      	bne.n	8001380 <App_CheckErrors+0x30>
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nProgram Sequnce Error \n\n");
 8001372:	491c      	ldr	r1, [pc, #112]	; (80013e4 <App_CheckErrors+0x94>)
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <App_CheckErrors+0x98>)
 8001376:	f001 fc9d 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
		*Address_Result = STD_TRUE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

	}

	Flash_enuIsProgramParallelismErrorHappended(&Loc_FLagCheck);
 8001380:	f107 030f 	add.w	r3, r7, #15
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fa53 	bl	8001830 <Flash_enuIsProgramParallelismErrorHappended>
	if(Loc_FLagCheck == STD_TRUE){
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d106      	bne.n	800139e <App_CheckErrors+0x4e>
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nProgram Parallelism Error \n\n");
 8001390:	4916      	ldr	r1, [pc, #88]	; (80013ec <App_CheckErrors+0x9c>)
 8001392:	4815      	ldr	r0, [pc, #84]	; (80013e8 <App_CheckErrors+0x98>)
 8001394:	f001 fc8e 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
		*Address_Result = STD_TRUE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
	}


	Flash_enuIsProgramAlignmentErrorHappended(&Loc_FLagCheck);
 800139e:	f107 030f 	add.w	r3, r7, #15
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fa1e 	bl	80017e4 <Flash_enuIsProgramAlignmentErrorHappended>
	if(Loc_FLagCheck == STD_TRUE){
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d106      	bne.n	80013bc <App_CheckErrors+0x6c>
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nProgram Alignment Error \n\n");
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <App_CheckErrors+0xa0>)
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <App_CheckErrors+0x98>)
 80013b2:	f001 fc7f 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
		*Address_Result = STD_TRUE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
	}

	Flash_enuIsWriteProtoectionErrorHappended(&Loc_FLagCheck);
 80013bc:	f107 030f 	add.w	r3, r7, #15
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fa81 	bl	80018c8 <Flash_enuIsWriteProtoectionErrorHappended>
	if(Loc_FLagCheck == STD_TRUE){
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <App_CheckErrors+0x8a>
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\nWrite Protection Error \n\n");
 80013cc:	4909      	ldr	r1, [pc, #36]	; (80013f4 <App_CheckErrors+0xa4>)
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <App_CheckErrors+0x98>)
 80013d0:	f001 fc70 	bl	8002cb4 <Usart_enuTransmitStringBlocking>
		*Address_Result = STD_TRUE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
	}



}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08003cf8 	.word	0x08003cf8
 80013e8:	20000190 	.word	0x20000190
 80013ec:	08003d14 	.word	0x08003d14
 80013f0:	08003d34 	.word	0x08003d34
 80013f4:	08003d50 	.word	0x08003d50

080013f8 <Usart_Isr>:

/* Uart String PArt */
void Usart_Isr(u16 Copy_u16Result){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]

	static u8 Loc_u8Counter = ZERO_VALUE;

	Global_UartMessage[Loc_u8Counter++]=(u8)Copy_u16Result;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <Usart_Isr+0x40>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	b2d1      	uxtb	r1, r2
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <Usart_Isr+0x40>)
 800140c:	7011      	strb	r1, [r2, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	b2d9      	uxtb	r1, r3
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <Usart_Isr+0x44>)
 8001416:	5499      	strb	r1, [r3, r2]
	if(Copy_u16Result =='\r'){
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2b0d      	cmp	r3, #13
 800141c:	d105      	bne.n	800142a <Usart_Isr+0x32>
		Global_UartMessageFlag= STD_TRUE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <Usart_Isr+0x48>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
		Loc_u8Counter = ZERO_VALUE;
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <Usart_Isr+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	}




}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000279 	.word	0x20000279
 800143c:	20000214 	.word	0x20000214
 8001440:	20000278 	.word	0x20000278

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f001 fdfa 	bl	800306c <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20030000 	.word	0x20030000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	2000027c 	.word	0x2000027c
 80014ac:	20000438 	.word	0x20000438

080014b0 <Flash_enuInit>:



/******************************* Software Interfaces Implementation *******************/

Flash_ErrorStatusType Flash_enuInit(void){
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0

	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]

	Flash_Unlock();
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <Flash_enuInit+0x40>)
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <Flash_enuInit+0x44>)
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <Flash_enuInit+0x40>)
 80014c2:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <Flash_enuInit+0x48>)
 80014c4:	605a      	str	r2, [r3, #4]

	Flash_SetProgramSize(FLASH_SELECT_VOLT_RAGE);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <Flash_enuInit+0x40>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <Flash_enuInit+0x40>)
 80014d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d4:	6113      	str	r3, [r2, #16]

	Flash_Lock();
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <Flash_enuInit+0x40>)
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <Flash_enuInit+0x40>)
 80014dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014e0:	6113      	str	r3, [r2, #16]
	return Loc_enuFlashErrorStatus;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40023c00 	.word	0x40023c00
 80014f4:	45670123 	.word	0x45670123
 80014f8:	cdef89ab 	.word	0xcdef89ab

080014fc <Flash_enuLock>:

Flash_ErrorStatusType Flash_enuLock(void){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0

		Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 8001502:	2301      	movs	r3, #1
 8001504:	71fb      	strb	r3, [r7, #7]

		Flash_Lock();
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Flash_enuLock+0x24>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <Flash_enuLock+0x24>)
 800150c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001510:	6113      	str	r3, [r2, #16]


		return Loc_enuFlashErrorStatus;
 8001512:	79fb      	ldrb	r3, [r7, #7]
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40023c00 	.word	0x40023c00

08001524 <Flash_enuUnlock>:

Flash_ErrorStatusType Flash_enuUnlock(void){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0

		Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 800152a:	2301      	movs	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]

		Flash_Unlock();
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <Flash_enuUnlock+0x24>)
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <Flash_enuUnlock+0x28>)
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <Flash_enuUnlock+0x24>)
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <Flash_enuUnlock+0x2c>)
 8001538:	605a      	str	r2, [r3, #4]


		return Loc_enuFlashErrorStatus;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40023c00 	.word	0x40023c00
 800154c:	45670123 	.word	0x45670123
 8001550:	cdef89ab 	.word	0xcdef89ab

08001554 <Flash_enuWriteWordAt_Sync>:


Flash_ErrorStatusType Flash_enuWriteWordAt_Sync(u32 Copy_u32Address,u8 Copy_u8Data[]){
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
	u32 Loc_u32Data;
	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 8001562:	bf00      	nop
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <Flash_enuWriteWordAt_Sync+0x60>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0fdb      	lsrs	r3, r3, #31
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d0f8      	beq.n	8001564 <Flash_enuWriteWordAt_Sync+0x10>

	/* Enter Write Mode */
	Flash_SetFlashWritingMode();
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <Flash_enuWriteWordAt_Sync+0x60>)
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <Flash_enuWriteWordAt_Sync+0x60>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6113      	str	r3, [r2, #16]

	/* Write To the address */
	Loc_u32Data =*((u32*)(Copy_u8Data));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60bb      	str	r3, [r7, #8]
	*((volatile u32*)(Copy_u32Address)) = Loc_u32Data;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	601a      	str	r2, [r3, #0]


	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 800158a:	bf00      	nop
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <Flash_enuWriteWordAt_Sync+0x60>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0fdb      	lsrs	r3, r3, #31
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d0f8      	beq.n	800158c <Flash_enuWriteWordAt_Sync+0x38>

	/* Get Out of Write Mode */
	Flash_GetOutOfFlashWritingMode();
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <Flash_enuWriteWordAt_Sync+0x60>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <Flash_enuWriteWordAt_Sync+0x60>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6113      	str	r3, [r2, #16]

	return Loc_enuFlashErrorStatus;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <Flash_enuReadWordAt_Sync>:

Flash_ErrorStatusType Flash_enuReadWordAt_Sync(u32 Copy_u32Address,u8 Address_Result[]){
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
	u32 Loc_u32Data;
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 80015c6:	bf00      	nop
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <Flash_enuReadWordAt_Sync+0x38>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0fdb      	lsrs	r3, r3, #31
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d0f8      	beq.n	80015c8 <Flash_enuReadWordAt_Sync+0x10>

	Loc_u32Data= *((u32*)(Copy_u32Address));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60bb      	str	r3, [r7, #8]
	*((u32*)(Address_Result)) = Loc_u32Data;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	601a      	str	r2, [r3, #0]


		return Loc_enuFlashErrorStatus;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <Flash_enuEraseSectorAt_Sync>:
/*
 * From 0 To 11 (BANK 1 )
 * from (12 to 23) + 4  (BANK 2 )
 *
 */
Flash_ErrorStatusType Flash_enuEraseSectorAt_Sync(u8 Copy_u8SectorIndex){
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]


	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 8001602:	bf00      	nop
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0fdb      	lsrs	r3, r3, #31
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d0f8      	beq.n	8001604 <Flash_enuEraseSectorAt_Sync+0x10>

	/* Select Sector */
	Flash_SetEraseModeSectorx(Copy_u8SectorIndex);
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4914      	ldr	r1, [pc, #80]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001622:	4313      	orrs	r3, r2
 8001624:	610b      	str	r3, [r1, #16]
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6113      	str	r3, [r2, #16]


	/* Start Erasing */
	Flash_StartErasingAction();
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	0fdb      	lsrs	r3, r3, #31
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d0f8      	beq.n	8001632 <Flash_enuEraseSectorAt_Sync+0x3e>
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164a:	6113      	str	r3, [r2, #16]
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0fdb      	lsrs	r3, r3, #31
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d0f8      	beq.n	800164c <Flash_enuEraseSectorAt_Sync+0x58>


	/* Get Out */
	Flash_GetOutOfEraseMode();
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <Flash_enuEraseSectorAt_Sync+0x80>)
 8001660:	f023 0302 	bic.w	r3, r3, #2
 8001664:	6113      	str	r3, [r2, #16]

	return Loc_enuFlashErrorStatus;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40023c00 	.word	0x40023c00

08001678 <Flash_enuWriteProtectionForSectorx_Sync>:
/*
 * Copy_u8SectorIndex = from 0 TO 11
 * or From 12 To 23
 *
 */
Flash_ErrorStatusType Flash_enuWriteProtectionForSectorx_Sync(u8 Copy_u8SectorIndex){
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 8001682:	2301      	movs	r3, #1
 8001684:	73bb      	strb	r3, [r7, #14]

	u8 Loc_u8BankIndex;

	if(Copy_u8SectorIndex<=11){
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b0b      	cmp	r3, #11
 800168a:	d802      	bhi.n	8001692 <Flash_enuWriteProtectionForSectorx_Sync+0x1a>
		Loc_u8BankIndex = ZERO_VALUE;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e004      	b.n	800169c <Flash_enuWriteProtectionForSectorx_Sync+0x24>
	}
	else{
		Loc_u8BankIndex = ONE_VALUE;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
		Copy_u8SectorIndex-=12;
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	3b0c      	subs	r3, #12
 800169a:	71fb      	strb	r3, [r7, #7]
	}

	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 800169c:	bf00      	nop
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <Flash_enuWriteProtectionForSectorx_Sync+0x88>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	0fdb      	lsrs	r3, r3, #31
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d0f8      	beq.n	800169e <Flash_enuWriteProtectionForSectorx_Sync+0x26>

	/* Write Protection */
	Flash_WriteProtectionAtSectorx(Loc_u8BankIndex,Copy_u8SectorIndex);
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <Flash_enuWriteProtectionForSectorx_Sync+0x88>)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3304      	adds	r3, #4
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	3310      	adds	r3, #16
 80016bc:	2101      	movs	r1, #1
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <Flash_enuWriteProtectionForSectorx_Sync+0x88>)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	4002      	ands	r2, r0
 80016cc:	3304      	adds	r3, #4
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	605a      	str	r2, [r3, #4]

	/* Start Write Protection ACtion */
	Flash_StartWriteProtectionAction();
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <Flash_enuWriteProtectionForSectorx_Sync+0x88>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	4a09      	ldr	r2, [pc, #36]	; (8001700 <Flash_enuWriteProtectionForSectorx_Sync+0x88>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	6153      	str	r3, [r2, #20]

	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 80016e0:	bf00      	nop
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <Flash_enuWriteProtectionForSectorx_Sync+0x88>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	0fdb      	lsrs	r3, r3, #31
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d0f8      	beq.n	80016e2 <Flash_enuWriteProtectionForSectorx_Sync+0x6a>

	return Loc_enuFlashErrorStatus;
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <Flash_enuRemoveWriteProtectionForSectorx_Sync>:
/*
 * Copy_u8SectorIndex = from 0 TO 11
 * or From 12 To 23
 *
 */
Flash_ErrorStatusType Flash_enuRemoveWriteProtectionForSectorx_Sync(u8 Copy_u8SectorIndex){
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 800170e:	2301      	movs	r3, #1
 8001710:	73bb      	strb	r3, [r7, #14]

	u8 Loc_u8BankIndex;

	if(Copy_u8SectorIndex<=11){
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b0b      	cmp	r3, #11
 8001716:	d802      	bhi.n	800171e <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x1a>
		Loc_u8BankIndex = ZERO_VALUE;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e004      	b.n	8001728 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x24>
	}
	else{
		Loc_u8BankIndex = ONE_VALUE;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
		Copy_u8SectorIndex-=12;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3b0c      	subs	r3, #12
 8001726:	71fb      	strb	r3, [r7, #7]
	}

	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 8001728:	bf00      	nop
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x84>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	0fdb      	lsrs	r3, r3, #31
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d0f8      	beq.n	800172a <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x26>

	/* Remove Write Protection */
	Flash_RemoveWriteProtectionAtSectorx(Loc_u8BankIndex,Copy_u8SectorIndex);
 8001738:	4a13      	ldr	r2, [pc, #76]	; (8001788 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x84>)
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3304      	adds	r3, #4
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	3310      	adds	r3, #16
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	4618      	mov	r0, r3
 8001750:	490d      	ldr	r1, [pc, #52]	; (8001788 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x84>)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4302      	orrs	r2, r0
 8001756:	3304      	adds	r3, #4
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	605a      	str	r2, [r3, #4]

	/* Start Write Protection ACtion */
	Flash_StartWriteProtectionAction();
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x84>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x84>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6153      	str	r3, [r2, #20]

	/* wait busy flag */
	while(Flash_IsFlashOperatingBusy() == ONE_VALUE);
 800176a:	bf00      	nop
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x84>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0fdb      	lsrs	r3, r3, #31
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d0f8      	beq.n	800176c <Flash_enuRemoveWriteProtectionForSectorx_Sync+0x68>

	return Loc_enuFlashErrorStatus;
 800177a:	7bbb      	ldrb	r3, [r7, #14]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40023c00 	.word	0x40023c00

0800178c <Flash_enuLockOptionByte>:



Flash_ErrorStatusType Flash_enuLockOptionByte(void){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0

	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 8001792:	2301      	movs	r3, #1
 8001794:	71fb      	strb	r3, [r7, #7]

	Flash_LockByteOption();
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <Flash_enuLockOptionByte+0x24>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <Flash_enuLockOptionByte+0x24>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6153      	str	r3, [r2, #20]


	return Loc_enuFlashErrorStatus;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <Flash_enuUnlockOptionByte>:


Flash_ErrorStatusType Flash_enuUnlockOptionByte(void){
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0

	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 80017ba:	2301      	movs	r3, #1
 80017bc:	71fb      	strb	r3, [r7, #7]

	Flash_UnlockByteOption();
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <Flash_enuUnlockOptionByte+0x24>)
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <Flash_enuUnlockOptionByte+0x28>)
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <Flash_enuUnlockOptionByte+0x24>)
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <Flash_enuUnlockOptionByte+0x2c>)
 80017c8:	609a      	str	r2, [r3, #8]


	return Loc_enuFlashErrorStatus;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	08192a3b 	.word	0x08192a3b
 80017e0:	4c5d6e7f 	.word	0x4c5d6e7f

080017e4 <Flash_enuIsProgramAlignmentErrorHappended>:

	return Loc_enuFlashErrorStatus;
}


Flash_ErrorStatusType Flash_enuIsProgramAlignmentErrorHappended(Std_True_or_FalseType* Address_Result){
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
	if(Address_Result == NULL){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d013      	beq.n	800181e <Flash_enuIsProgramAlignmentErrorHappended+0x3a>

	}
	else{
		if(Flash_IsProgramAlignmentErrorHappended() == ONE_VALUE ){
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <Flash_enuIsProgramAlignmentErrorHappended+0x48>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d109      	bne.n	8001818 <Flash_enuIsProgramAlignmentErrorHappended+0x34>
			*Address_Result = STD_TRUE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
			Flash_ClearProgramAlignmentErrorFlag();
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <Flash_enuIsProgramAlignmentErrorHappended+0x48>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <Flash_enuIsProgramAlignmentErrorHappended+0x48>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	60d3      	str	r3, [r2, #12]
 8001816:	e002      	b.n	800181e <Flash_enuIsProgramAlignmentErrorHappended+0x3a>
		}
		else{
			*Address_Result = STD_FALSE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
		}
	}
	return Loc_enuFlashErrorStatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40023c00 	.word	0x40023c00

08001830 <Flash_enuIsProgramParallelismErrorHappended>:

Flash_ErrorStatusType Flash_enuIsProgramParallelismErrorHappended(Std_True_or_FalseType* Address_Result){
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
	if(Address_Result == NULL){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d013      	beq.n	800186a <Flash_enuIsProgramParallelismErrorHappended+0x3a>

	}
	else{
		if(Flash_IsProgramParallelismErrorHappended() == ONE_VALUE ){
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <Flash_enuIsProgramParallelismErrorHappended+0x48>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d109      	bne.n	8001864 <Flash_enuIsProgramParallelismErrorHappended+0x34>
			*Address_Result = STD_TRUE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
			Flash_ClearProgramParallelismErrorFlag();
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <Flash_enuIsProgramParallelismErrorHappended+0x48>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <Flash_enuIsProgramParallelismErrorHappended+0x48>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	60d3      	str	r3, [r2, #12]
 8001862:	e002      	b.n	800186a <Flash_enuIsProgramParallelismErrorHappended+0x3a>
		}
		else{
			*Address_Result = STD_FALSE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		}
	}
	return Loc_enuFlashErrorStatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40023c00 	.word	0x40023c00

0800187c <Flash_enuIsProgramSequenceErrorHappended>:

Flash_ErrorStatusType Flash_enuIsProgramSequenceErrorHappended(Std_True_or_FalseType* Address_Result){
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
	if(Address_Result == NULL){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d013      	beq.n	80018b6 <Flash_enuIsProgramSequenceErrorHappended+0x3a>

	}
	else{
		if(Flash_IsProgramSequenceErrorHappended() == ONE_VALUE ){
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <Flash_enuIsProgramSequenceErrorHappended+0x48>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	09db      	lsrs	r3, r3, #7
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d109      	bne.n	80018b0 <Flash_enuIsProgramSequenceErrorHappended+0x34>
			*Address_Result = STD_TRUE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
			Flash_ClearProgramSequenceErrorFlag();
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <Flash_enuIsProgramSequenceErrorHappended+0x48>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <Flash_enuIsProgramSequenceErrorHappended+0x48>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	60d3      	str	r3, [r2, #12]
 80018ae:	e002      	b.n	80018b6 <Flash_enuIsProgramSequenceErrorHappended+0x3a>
		}
		else{
			*Address_Result = STD_FALSE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
		}
	}
	return Loc_enuFlashErrorStatus;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <Flash_enuIsWriteProtoectionErrorHappended>:

Flash_ErrorStatusType Flash_enuIsWriteProtoectionErrorHappended(Std_True_or_FalseType* Address_Result){
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	Flash_ErrorStatusType Loc_enuFlashErrorStatus = FLASH_STATUS_OK;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
	if(Address_Result == NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d013      	beq.n	8001902 <Flash_enuIsWriteProtoectionErrorHappended+0x3a>

	}
	else{
		if(Flash_IsWriteProtoectionErrorHappended() == ONE_VALUE ){
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <Flash_enuIsWriteProtoectionErrorHappended+0x48>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d109      	bne.n	80018fc <Flash_enuIsWriteProtoectionErrorHappended+0x34>
			*Address_Result = STD_TRUE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
			Flash_ClearWriteProtoectionErrorFlag();
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <Flash_enuIsWriteProtoectionErrorHappended+0x48>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <Flash_enuIsWriteProtoectionErrorHappended+0x48>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	60d3      	str	r3, [r2, #12]
 80018fa:	e002      	b.n	8001902 <Flash_enuIsWriteProtoectionErrorHappended+0x3a>
		}
		else{
			*Address_Result = STD_FALSE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		}
	}
	return Loc_enuFlashErrorStatus;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40023c00 	.word	0x40023c00

08001914 <FLASH_IRQHandler>:


/**************************** Private Software Interface Implementation **************/


void FLASH_IRQHandler(void){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

	/* Error Part FIrst */

	if(Flash_IsOperationErrorHappended() == ONE_VALUE){
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d155      	bne.n	80019d2 <FLASH_IRQHandler+0xbe>

		/* Which Error */
		if(Flash_IsProgramAlignmentErrorHappended() == ONE_VALUE ){
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10c      	bne.n	800194e <FLASH_IRQHandler+0x3a>

			if( Flash_ErrorInterruptHandler[FLASH_PROGRAM_ALIGNEMNT_ERROR_INDEx] != NULL){
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <FLASH_IRQHandler+0x2e>
			Flash_ErrorInterruptHandler[FLASH_PROGRAM_ALIGNEMNT_ERROR_INDEx]();
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4798      	blx	r3
			}

			/* Clear Flag */
			Flash_ClearProgramAlignmentErrorFlag();
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001948:	f043 0320 	orr.w	r3, r3, #32
 800194c:	60d3      	str	r3, [r2, #12]

		}

		if(Flash_IsProgramParallelismErrorHappended() == ONE_VALUE){
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10c      	bne.n	8001976 <FLASH_IRQHandler+0x62>

			if( Flash_ErrorInterruptHandler[FLASH_PROGRAM_PARALLELISM_ERROR_INDEx] != NULL){
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <FLASH_IRQHandler+0x56>

				Flash_ErrorInterruptHandler[FLASH_PROGRAM_PARALLELISM_ERROR_INDEx]();
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4798      	blx	r3
			}
			/* Clear Flag */
			Flash_ClearProgramParallelismErrorFlag();
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001974:	60d3      	str	r3, [r2, #12]

		}

		if(Flash_IsProgramSequenceErrorHappended() == ONE_VALUE){
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	09db      	lsrs	r3, r3, #7
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10c      	bne.n	800199e <FLASH_IRQHandler+0x8a>

			if( Flash_ErrorInterruptHandler[FLASH_PROGRAM_SEQUANCE_ERROR_INDEx] != NULL){
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <FLASH_IRQHandler+0x7e>

			Flash_ErrorInterruptHandler[FLASH_PROGRAM_SEQUANCE_ERROR_INDEx]();
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4798      	blx	r3
			}
			/* Clear Flag */
			Flash_ClearProgramSequenceErrorFlag();
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	60d3      	str	r3, [r2, #12]

		}

		if(Flash_IsWriteProtoectionErrorHappended() == ONE_VALUE){
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d10c      	bne.n	80019c6 <FLASH_IRQHandler+0xb2>

			if( Flash_ErrorInterruptHandler[FLASH_WRITE_PROTECTION_ERROR_INDEX] != NULL){
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <FLASH_IRQHandler+0xa6>

			Flash_ErrorInterruptHandler[FLASH_WRITE_PROTECTION_ERROR_INDEX]();
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <FLASH_IRQHandler+0xf8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4798      	blx	r3

			}
			/* Clear Flag */
			Flash_ClearWriteProtoectionErrorFlag();
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	60d3      	str	r3, [r2, #12]

		}

		Flash_ClearOperationErrorFlag();
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	60d3      	str	r3, [r2, #12]
	}



	/* End Of Operation Part */
	if(Flash_IsEndOfOperationrHappended() == ONE_VALUE){
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d112      	bne.n	8001a04 <FLASH_IRQHandler+0xf0>

			if(Flash_EndOfOperationInterruptHandler != NULL){
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <FLASH_IRQHandler+0xfc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <FLASH_IRQHandler+0xd8>
				Flash_EndOfOperationInterruptHandler();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <FLASH_IRQHandler+0xfc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4798      	blx	r3

			}

				/* Clear Flag */
				Flash_ClearProgramAlignmentErrorFlag();
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	60d3      	str	r3, [r2, #12]


			Flash_ClearEndOfOperationrFlag();
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a02      	ldr	r2, [pc, #8]	; (8001a08 <FLASH_IRQHandler+0xf4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	60d3      	str	r3, [r2, #12]

	}


}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	20000280 	.word	0x20000280
 8001a10:	20000290 	.word	0x20000290

08001a14 <Gpio_enuInit>:

/********************************** Macros Function Declarations *********************/


/******************************* Software Interfaces Implementation *******************/
Gpio_StatusErrorType Gpio_enuInit(void){
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]

	Gpio_concat(
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <Gpio_enuInit+0x134>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <Gpio_enuInit+0x138>)
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <Gpio_enuInit+0x140>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <Gpio_enuInit+0x144>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <Gpio_enuInit+0x148>)
 8001a40:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel1_PINA1,
	    GPIO_u8PinChannel0_PINA0 // End with the lowest channel
	);


	Gpio_concat(
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <Gpio_enuInit+0x134>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <Gpio_enuInit+0x14c>)
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <Gpio_enuInit+0x140>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <Gpio_enuInit+0x144>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001a62:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel17_PINB1,  // Corresponds to pin B1
	    GPIO_u8PinChannel16_PINB0   // Corresponds to pin B0, which is indicated as 16
	);


	Gpio_concat(
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <Gpio_enuInit+0x134>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <Gpio_enuInit+0x150>)
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <Gpio_enuInit+0x140>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <Gpio_enuInit+0x144>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001a84:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel35_PINC3,  // Corresponds to pin C3
	    GPIO_u8PinChannel34_PINC2,  // Corresponds to pin C2
	    GPIO_u8PinChannel33_PINC1,  // Corresponds to pin C1
	    GPIO_u8PinChannel32_PINC0   // Corresponds to pin C0, which is indicated as 32
	);
	Gpio_concat(
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <Gpio_enuInit+0x134>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <Gpio_enuInit+0x154>)
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <Gpio_enuInit+0x140>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <Gpio_enuInit+0x144>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001aa6:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel49_PIND1,  // Corresponds to pin D1
	    GPIO_u8PinChannel48_PIND0   // Corresponds to pin D0, which is indicated as 48
	);


	Gpio_concat(
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <Gpio_enuInit+0x134>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <Gpio_enuInit+0x140>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <Gpio_enuInit+0x144>)
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001aca:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel67_PINE3,  // Corresponds to pin E3
	    GPIO_u8PinChannel66_PINE2,  // Corresponds to pin E2
	    GPIO_u8PinChannel65_PINE1,  // Corresponds to pin E1
	    GPIO_u8PinChannel64_PINE0   // Corresponds to pin E0, starting from 64
	);
	Gpio_concat(
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <Gpio_enuInit+0x134>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <Gpio_enuInit+0x140>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <Gpio_enuInit+0x144>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001aee:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel83_PINF3,  // Corresponds to pin F3
	    GPIO_u8PinChannel82_PINF2,  // Corresponds to pin F2
	    GPIO_u8PinChannel81_PINF1,  // Corresponds to pin F1
	    GPIO_u8PinChannel80_PINF0   // Corresponds to pin F0, starting from 80
	);
	Gpio_concat(
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <Gpio_enuInit+0x134>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <Gpio_enuInit+0x140>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <Gpio_enuInit+0x144>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001b12:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel96_PING0    // Corresponds to pin G0, starting from 96
	);



	Gpio_concat(
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <Gpio_enuInit+0x134>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <Gpio_enuInit+0x13c>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <Gpio_enuInit+0x140>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <Gpio_enuInit+0x144>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001b36:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel113_PINH1,  // Corresponds to pin H1
	    GPIO_u8PinChannel112_PINH0   // Corresponds to pin H0, starting from 112
	);


	return Loc_enuGpioStatusError;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	aaa95555 	.word	0xaaa95555
 8001b50:	20000020 	.word	0x20000020
 8001b54:	20000040 	.word	0x20000040
 8001b58:	20000060 	.word	0x20000060
 8001b5c:	01555555 	.word	0x01555555
 8001b60:	5555a555 	.word	0x5555a555
 8001b64:	55595555 	.word	0x55595555
 8001b68:	5555555a 	.word	0x5555555a

08001b6c <Gpio_enuSetAF>:
		}

			return Loc_enuGpioStatusError;
}

Gpio_StatusErrorType Gpio_enuSetAF(u8 Copy_u8ChannelId,Gpio_SelectAFType Copy_enuAF){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	737b      	strb	r3, [r7, #13]
		u8 Loc_u8TempPinNumber =Loc_u8PinNumber %EIGHT_VALUE;   // from 0 to 7
 8001b8e:	7bbb      	ldrb	r3, [r7, #14]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	733b      	strb	r3, [r7, #12]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d902      	bls.n	8001ba2 <Gpio_enuSetAF+0x36>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e037      	b.n	8001c12 <Gpio_enuSetAF+0xa6>
		}


			else{

				if(Loc_u8PinNumber<EIGHT_VALUE){
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	2b07      	cmp	r3, #7
 8001ba6:	d81a      	bhi.n	8001bde <Gpio_enuSetAF+0x72>
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <Gpio_enuSetAF+0xb4>)
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	7bba      	ldrb	r2, [r7, #14]
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	43d2      	mvns	r2, r2
 8001bbe:	401a      	ands	r2, r3
												((Copy_enuAF & 0xF ) <<(Loc_u8PinNumber*FOUR_VALUE));
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	f003 010f 	and.w	r1, r3, #15
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	4618      	mov	r0, r3
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8001bd0:	7b7b      	ldrb	r3, [r7, #13]
 8001bd2:	4913      	ldr	r1, [pc, #76]	; (8001c20 <Gpio_enuSetAF+0xb4>)
 8001bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e019      	b.n	8001c12 <Gpio_enuSetAF+0xa6>

				}
				else{
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 8001bde:	7b7b      	ldrb	r3, [r7, #13]
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <Gpio_enuSetAF+0xb8>)
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	7b3a      	ldrb	r2, [r7, #12]
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	210f      	movs	r1, #15
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	43d2      	mvns	r2, r2
 8001bf4:	401a      	ands	r2, r3
																	((Copy_enuAF & 0xF ) <<(Loc_u8TempPinNumber*FOUR_VALUE));
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	f003 010f 	and.w	r1, r3, #15
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4618      	mov	r0, r3
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 8001c06:	7b7b      	ldrb	r3, [r7, #13]
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <Gpio_enuSetAF+0xb8>)
 8001c0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c0e:	4302      	orrs	r2, r0
 8001c10:	601a      	str	r2, [r3, #0]
				}
		}

			return Loc_enuGpioStatusError;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000080 	.word	0x20000080
 8001c24:	200000a0 	.word	0x200000a0

08001c28 <Gpio_enuEnableClockAllGPIOs>:

		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuEnableClockAllGPIOs(void){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	71fb      	strb	r3, [r7, #7]
	volatile Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001c32:	2301      	movs	r3, #1
 8001c34:	71bb      	strb	r3, [r7, #6]

	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTA);
 8001c36:	2100      	movs	r1, #0
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 fb3b 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTB);
 8001c42:	2101      	movs	r1, #1
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 fb35 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTC);
 8001c4e:	2102      	movs	r1, #2
 8001c50:	2000      	movs	r0, #0
 8001c52:	f000 fb2f 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c56:	4603      	mov	r3, r0
 8001c58:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTD);
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 fb29 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c62:	4603      	mov	r3, r0
 8001c64:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTE);
 8001c66:	2104      	movs	r1, #4
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 fb23 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTF);
 8001c72:	2105      	movs	r1, #5
 8001c74:	2000      	movs	r0, #0
 8001c76:	f000 fb1d 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTH);
 8001c7e:	2107      	movs	r1, #7
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 fb17 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c86:	4603      	mov	r3, r0
 8001c88:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTG);
 8001c8a:	2106      	movs	r1, #6
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 fb11 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
 8001c92:	4603      	mov	r3, r0
 8001c94:	71bb      	strb	r3, [r7, #6]



	return Loc_enuGpioStatusError;
 8001c96:	79fb      	ldrb	r3, [r7, #7]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <Nvic_enuEnableInterrupt>:



/******************************* Software Interfaces Implementation *******************/

Nvic_ErrorStatusType Nvic_enuEnableInterrupt(Nvic_IndexPeripheralType Copy_NvicIndex){
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
	Nvic_ErrorStatusType Loc_NvicErrorStatus = NVIC_STATUS_OK;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8RegNumber = Copy_NvicIndex/THIRTYTWO_VALUE;
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	73bb      	strb	r3, [r7, #14]
	u8 Loc_u8BitNumber = Copy_NvicIndex%THIRTYTWO_VALUE;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	737b      	strb	r3, [r7, #13]

	SET_BIT(*GlobalStatic_NvicIsrEnableArr[Loc_u8RegNumber], Loc_u8BitNumber);
 8001cbc:	7bbb      	ldrb	r3, [r7, #14]
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <Nvic_enuEnableInterrupt+0x4c>)
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	4906      	ldr	r1, [pc, #24]	; (8001cec <Nvic_enuEnableInterrupt+0x4c>)
 8001cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cd8:	4302      	orrs	r2, r0
 8001cda:	601a      	str	r2, [r3, #0]


	return Loc_NvicErrorStatus;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200000c0 	.word	0x200000c0

08001cf0 <Nvic_SetInterruptPriority>:

	return Loc_NvicErrorStatus;
}

Nvic_ErrorStatusType Nvic_SetInterruptPriority(Nvic_IndexPeripheralType Copy_NvicIndex,Nvic_SelectGroupxType Copy_enuGroupNumber,
																Nvic_SelectSubxType Copy_enuSubNumber){
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	71bb      	strb	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
	Nvic_ErrorStatusType Loc_NvicErrorStatus = NVIC_STATUS_OK;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8PriorityResult= ZERO_VALUE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73bb      	strb	r3, [r7, #14]

	switch(Global_GroupPrioritySelection){
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <Nvic_SetInterruptPriority+0xb4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b07      	cmp	r3, #7
 8001d10:	d836      	bhi.n	8001d80 <Nvic_SetInterruptPriority+0x90>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <Nvic_SetInterruptPriority+0x28>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d39 	.word	0x08001d39
 8001d1c:	08001d81 	.word	0x08001d81
 8001d20:	08001d81 	.word	0x08001d81
 8001d24:	08001d81 	.word	0x08001d81
 8001d28:	08001d3f 	.word	0x08001d3f
 8001d2c:	08001d81 	.word	0x08001d81
 8001d30:	08001d5d 	.word	0x08001d5d
 8001d34:	08001d7b 	.word	0x08001d7b

	case SCB_SELECT_GROUP_PRIORITY_16_AND_SUB_PRIORITY_ZERO :
		Loc_u8PriorityResult = Copy_enuGroupNumber;
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	73bb      	strb	r3, [r7, #14]
		break;
 8001d3c:	e022      	b.n	8001d84 <Nvic_SetInterruptPriority+0x94>

	case SCB_SELECT_GROUP_PRIORITY_4_AND_SUB_PRIORITY_4:
		Loc_u8PriorityResult = ((Copy_enuGroupNumber & 0b11) <<TWO_VALUE) | ((Copy_enuSubNumber & 0b11) <<ZERO_VALUE);
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	b25a      	sxtb	r2, r3
 8001d4a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	73bb      	strb	r3, [r7, #14]
		break;
 8001d5a:	e013      	b.n	8001d84 <Nvic_SetInterruptPriority+0x94>
	case SCB_SELECT_GROUP_PRIORITY_2_AND_SUB_PRIORITY_8:
		Loc_u8PriorityResult = ((Copy_enuGroupNumber & 0b1) <<ONE_VALUE) | ((Copy_enuSubNumber & 0b111) <<ZERO_VALUE);
 8001d5c:	79bb      	ldrb	r3, [r7, #6]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	73bb      	strb	r3, [r7, #14]
		break;
 8001d78:	e004      	b.n	8001d84 <Nvic_SetInterruptPriority+0x94>

	case SCB_SELECT_GROUP_PRIORITY_ZERO_AND_SUB_PRIORITY_16:
		Loc_u8PriorityResult = Copy_enuSubNumber;
 8001d7a:	797b      	ldrb	r3, [r7, #5]
 8001d7c:	73bb      	strb	r3, [r7, #14]
		break;
 8001d7e:	e001      	b.n	8001d84 <Nvic_SetInterruptPriority+0x94>

	default :
		Loc_NvicErrorStatus = NVIC_STATUS_FAIL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
	}


	NVIC_IPR[Copy_NvicIndex] = Loc_u8PriorityResult<<FOUR_VALUE; // first 4 bits reserved
 8001d84:	7bbb      	ldrb	r3, [r7, #14]
 8001d86:	011a      	lsls	r2, r3, #4
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001d90:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001d94:	601a      	str	r2, [r3, #0]


	return Loc_NvicErrorStatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	200002a8 	.word	0x200002a8

08001da8 <Rcc_enuEnableClock>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuEnableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8CounterTimeOut = 240;
 8001db6:	23f0      	movs	r3, #240	; 0xf0
 8001db8:	73bb      	strb	r3, [r7, #14]
	switch (Copy_enuClockSourceIndex){
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d876      	bhi.n	8001eae <Rcc_enuEnableClock+0x106>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <Rcc_enuEnableClock+0x20>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001ddd 	.word	0x08001ddd
 8001dcc:	08001e07 	.word	0x08001e07
 8001dd0:	08001e31 	.word	0x08001e31
 8001dd4:	08001e5b 	.word	0x08001e5b
 8001dd8:	08001e85 	.word	0x08001e85

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_enableHSI();
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001de8:	e002      	b.n	8001df0 <Rcc_enuEnableClock+0x48>
			Loc_u8CounterTimeOut--;
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001df0:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d05a      	beq.n	8001eb4 <Rcc_enuEnableClock+0x10c>
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f2      	bne.n	8001dea <Rcc_enuEnableClock+0x42>
		}

		break;
 8001e04:	e056      	b.n	8001eb4 <Rcc_enuEnableClock+0x10c>
	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_enableHSE();
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e12:	e002      	b.n	8001e1a <Rcc_enuEnableClock+0x72>
			Loc_u8CounterTimeOut--;
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0c5b      	lsrs	r3, r3, #17
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d047      	beq.n	8001eb8 <Rcc_enuEnableClock+0x110>
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f2      	bne.n	8001e14 <Rcc_enuEnableClock+0x6c>
		}
		break;
 8001e2e:	e043      	b.n	8001eb8 <Rcc_enuEnableClock+0x110>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_enablePLL();
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e3c:	e002      	b.n	8001e44 <Rcc_enuEnableClock+0x9c>
			Loc_u8CounterTimeOut--;
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0e5b      	lsrs	r3, r3, #25
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d034      	beq.n	8001ebc <Rcc_enuEnableClock+0x114>
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f2      	bne.n	8001e3e <Rcc_enuEnableClock+0x96>
		}
		break;
 8001e58:	e030      	b.n	8001ebc <Rcc_enuEnableClock+0x114>


	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_enablePLLI2S();
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e64:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e66:	e002      	b.n	8001e6e <Rcc_enuEnableClock+0xc6>
			Loc_u8CounterTimeOut--;
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0edb      	lsrs	r3, r3, #27
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d021      	beq.n	8001ec0 <Rcc_enuEnableClock+0x118>
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f2      	bne.n	8001e68 <Rcc_enuEnableClock+0xc0>
		}
		break;
 8001e82:	e01d      	b.n	8001ec0 <Rcc_enuEnableClock+0x118>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_enablePLLSAI();
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e90:	e002      	b.n	8001e98 <Rcc_enuEnableClock+0xf0>
			Loc_u8CounterTimeOut--;
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <Rcc_enuEnableClock+0x138>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0f5b      	lsrs	r3, r3, #29
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d00e      	beq.n	8001ec4 <Rcc_enuEnableClock+0x11c>
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f2      	bne.n	8001e92 <Rcc_enuEnableClock+0xea>
		}
		break;
 8001eac:	e00a      	b.n	8001ec4 <Rcc_enuEnableClock+0x11c>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e008      	b.n	8001ec6 <Rcc_enuEnableClock+0x11e>
		break;
 8001eb4:	bf00      	nop
 8001eb6:	e006      	b.n	8001ec6 <Rcc_enuEnableClock+0x11e>
		break;
 8001eb8:	bf00      	nop
 8001eba:	e004      	b.n	8001ec6 <Rcc_enuEnableClock+0x11e>
		break;
 8001ebc:	bf00      	nop
 8001ebe:	e002      	b.n	8001ec6 <Rcc_enuEnableClock+0x11e>
		break;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <Rcc_enuEnableClock+0x11e>
		break;
 8001ec4:	bf00      	nop
	}

	if(Loc_u8CounterTimeOut == ZERO_VALUE)
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <Rcc_enuEnableClock+0x128>
		Loc_enuRccStatusError = RCC_STATUS_TIME_OUT_FLAG;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	73fb      	strb	r3, [r7, #15]

	return Loc_enuRccStatusError;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <Rcc_enuDisableClock>:

Rcc_StatusErrorType Rcc_enuDisableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]


	switch (Copy_enuClockSourceIndex){
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d830      	bhi.n	8001f5a <Rcc_enuDisableClock+0x76>
 8001ef8:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <Rcc_enuDisableClock+0x1c>)
 8001efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efe:	bf00      	nop
 8001f00:	08001f15 	.word	0x08001f15
 8001f04:	08001f23 	.word	0x08001f23
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	08001f3f 	.word	0x08001f3f
 8001f10:	08001f4d 	.word	0x08001f4d

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_disableHSI();
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]
		break;
 8001f20:	e01d      	b.n	8001f5e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_disableHSE();
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
		break;
 8001f2e:	e016      	b.n	8001f5e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_disablePLL();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]
		break;
 8001f3c:	e00f      	b.n	8001f5e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_disablePLLI2S();
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f48:	6013      	str	r3, [r2, #0]
		break;
 8001f4a:	e008      	b.n	8001f5e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_disablePLLSAI();
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <Rcc_enuDisableClock+0x88>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6013      	str	r3, [r2, #0]

		break;
 8001f58:	e001      	b.n	8001f5e <Rcc_enuDisableClock+0x7a>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	73fb      	strb	r3, [r7, #15]
	}


	return Loc_enuRccStatusError;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40023800 	.word	0x40023800

08001f70 <Rcc_enuConfigPLL>:


Rcc_StatusErrorType Rcc_enuConfigPLL(const Rcc_PllConfigType* Address_Pll){
 8001f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f74:	b08b      	sub	sp, #44	; 0x2c
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	61f8      	str	r0, [r7, #28]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(Address_Pll == NULL){
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <Rcc_enuConfigPLL+0x1e>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f8c:	e09e      	b.n	80020cc <Rcc_enuConfigPLL+0x15c>
	}
	else{
		RCC_setPLL_M_Factor(Address_Pll->rcc_PLL_M_From2To63);
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 011f 	bic.w	r1, r3, #31
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	799b      	ldrb	r3, [r3, #6]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_M = Address_Pll->rcc_PLL_M_From2To63;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	799b      	ldrb	r3, [r3, #6]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <Rcc_enuConfigPLL+0x170>)
 8001fac:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_N_Factor(Address_Pll->rcc_PLL_N_From50To432);
 8001fae:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 517f 	bic.w	r1, r3, #16320	; 0x3fc0
 8001fb6:	f021 0120 	bic.w	r1, r1, #32
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	019b      	lsls	r3, r3, #6
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a44      	ldr	r2, [pc, #272]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8001fca:	430b      	orrs	r3, r1
 8001fcc:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_N = Address_Pll->rcc_PLL_N_From50To432;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	889b      	ldrh	r3, [r3, #4]
 8001fd2:	4a44      	ldr	r2, [pc, #272]	; (80020e4 <Rcc_enuConfigPLL+0x174>)
 8001fd4:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_P_Factor(Address_Pll->rcc_select_pllp);
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fe8:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8001fea:	430b      	orrs	r3, r1
 8001fec:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_P = Address_Pll->rcc_select_pllp*TWO_VALUE+TWO_VALUE; // y = 2x+2
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4a3b      	ldr	r2, [pc, #236]	; (80020e8 <Rcc_enuConfigPLL+0x178>)
 8001ffc:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_Q_Factor(Address_Pll->rcc_select_pllq);
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	789b      	ldrb	r3, [r3, #2]
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002010:	4a32      	ldr	r2, [pc, #200]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8002012:	430b      	orrs	r3, r1
 8002014:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_Q = Address_Pll->rcc_select_pllq;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4a33      	ldr	r2, [pc, #204]	; (80020ec <Rcc_enuConfigPLL+0x17c>)
 800201e:	8013      	strh	r3, [r2, #0]

		RCC_setPLLClk(Address_Pll->rcc_select_pll_source);
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	059b      	lsls	r3, r3, #22
 800202e:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <Rcc_enuConfigPLL+0x16c>)
 8002030:	430b      	orrs	r3, r1
 8002032:	6053      	str	r3, [r2, #4]
		Global_u64StaticPLL_Freq = !(Address_Pll->rcc_select_pll_source)*HSI_FREQ+ (Address_Pll->rcc_select_pll_source)*HSE_FREQ;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <Rcc_enuConfigPLL+0xd0>
 800203c:	492c      	ldr	r1, [pc, #176]	; (80020f0 <Rcc_enuConfigPLL+0x180>)
 800203e:	e000      	b.n	8002042 <Rcc_enuConfigPLL+0xd2>
 8002040:	2100      	movs	r1, #0
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <Rcc_enuConfigPLL+0x184>)
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	440b      	add	r3, r1
 8002050:	17da      	asrs	r2, r3, #31
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <Rcc_enuConfigPLL+0x188>)
 8002058:	e9d7 1200 	ldrd	r1, r2, [r7]
 800205c:	e9c3 1200 	strd	r1, r2, [r3]
		Global_u64StaticPLL_Freq = (Global_u64StaticPLL_Freq)/((u64)Global_u16StaticPLL_P*(u64)Global_u16StaticPLL_M)*Global_u16StaticPLL_N;
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <Rcc_enuConfigPLL+0x188>)
 8002062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <Rcc_enuConfigPLL+0x178>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	2200      	movs	r2, #0
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	617a      	str	r2, [r7, #20]
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <Rcc_enuConfigPLL+0x170>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	2200      	movs	r2, #0
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	60fa      	str	r2, [r7, #12]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	fb02 f203 	mul.w	r2, r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	693e      	ldr	r6, [r7, #16]
 800208a:	fb06 f303 	mul.w	r3, r6, r3
 800208e:	4413      	add	r3, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68be      	ldr	r6, [r7, #8]
 8002094:	fba2 8906 	umull	r8, r9, r2, r6
 8002098:	444b      	add	r3, r9
 800209a:	4699      	mov	r9, r3
 800209c:	4642      	mov	r2, r8
 800209e:	464b      	mov	r3, r9
 80020a0:	f7fe fcc4 	bl	8000a2c <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <Rcc_enuConfigPLL+0x174>)
 80020aa:	8809      	ldrh	r1, [r1, #0]
 80020ac:	b289      	uxth	r1, r1
 80020ae:	2000      	movs	r0, #0
 80020b0:	468a      	mov	sl, r1
 80020b2:	4683      	mov	fp, r0
 80020b4:	fb0a f003 	mul.w	r0, sl, r3
 80020b8:	fb02 f10b 	mul.w	r1, r2, fp
 80020bc:	4401      	add	r1, r0
 80020be:	fba2 450a 	umull	r4, r5, r2, sl
 80020c2:	194b      	adds	r3, r1, r5
 80020c4:	461d      	mov	r5, r3
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <Rcc_enuConfigPLL+0x188>)
 80020c8:	e9c3 4500 	strd	r4, r5, [r3]
	}

	return Loc_enuRccStatusError;
 80020cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	372c      	adds	r7, #44	; 0x2c
 80020d4:	46bd      	mov	sp, r7
 80020d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	20000294 	.word	0x20000294
 80020e4:	20000296 	.word	0x20000296
 80020e8:	20000298 	.word	0x20000298
 80020ec:	2000029a 	.word	0x2000029a
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	200002a0 	.word	0x200002a0

080020fc <Rcc_enuSelectAPB2Prescaler>:
	RCC_selectMoc1ClkSource(Copy_enuMCO1ClkSource);

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuSelectAPB2Prescaler(Rcc_APB2SelectPrescalerType Copy_enuAPB2Prescaler){
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4601      	mov	r1, r0
 8002104:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8002106:	2101      	movs	r1, #1
 8002108:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB2Prescaler(Copy_enuAPB2Prescaler);
 800210a:	4910      	ldr	r1, [pc, #64]	; (800214c <Rcc_enuSelectAPB2Prescaler+0x50>)
 800210c:	6889      	ldr	r1, [r1, #8]
 800210e:	f421 4060 	bic.w	r0, r1, #57344	; 0xe000
 8002112:	79f9      	ldrb	r1, [r7, #7]
 8002114:	0349      	lsls	r1, r1, #13
 8002116:	b289      	uxth	r1, r1
 8002118:	4c0c      	ldr	r4, [pc, #48]	; (800214c <Rcc_enuSelectAPB2Prescaler+0x50>)
 800211a:	4301      	orrs	r1, r0
 800211c:	60a1      	str	r1, [r4, #8]
	Global_u64ABP2Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB2Prescaler];
 800211e:	490c      	ldr	r1, [pc, #48]	; (8002150 <Rcc_enuSelectAPB2Prescaler+0x54>)
 8002120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002124:	79fc      	ldrb	r4, [r7, #7]
 8002126:	4d0b      	ldr	r5, [pc, #44]	; (8002154 <Rcc_enuSelectAPB2Prescaler+0x58>)
 8002128:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800212c:	b2a4      	uxth	r4, r4
 800212e:	2500      	movs	r5, #0
 8002130:	4622      	mov	r2, r4
 8002132:	462b      	mov	r3, r5
 8002134:	f7fe fc7a 	bl	8000a2c <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <Rcc_enuSelectAPB2Prescaler+0x54>)
 800213e:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	20000150 	.word	0x20000150
 8002154:	20000114 	.word	0x20000114

08002158 <Rcc_enuSelectAPB1Prescaler>:
Rcc_StatusErrorType Rcc_enuSelectAPB1Prescaler(Rcc_APB1SelectPrescalerType Copy_enuAPB1Prescaler){
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	4601      	mov	r1, r0
 8002160:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8002162:	2101      	movs	r1, #1
 8002164:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB1Prescaler(Copy_enuAPB1Prescaler);
 8002166:	4911      	ldr	r1, [pc, #68]	; (80021ac <Rcc_enuSelectAPB1Prescaler+0x54>)
 8002168:	6889      	ldr	r1, [r1, #8]
 800216a:	f421 50e0 	bic.w	r0, r1, #7168	; 0x1c00
 800216e:	79f9      	ldrb	r1, [r7, #7]
 8002170:	0289      	lsls	r1, r1, #10
 8002172:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
 8002176:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <Rcc_enuSelectAPB1Prescaler+0x54>)
 8002178:	4301      	orrs	r1, r0
 800217a:	60a1      	str	r1, [r4, #8]
	Global_u64ABP1Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB1Prescaler];
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <Rcc_enuSelectAPB1Prescaler+0x58>)
 800217e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002182:	79fc      	ldrb	r4, [r7, #7]
 8002184:	4d0b      	ldr	r5, [pc, #44]	; (80021b4 <Rcc_enuSelectAPB1Prescaler+0x5c>)
 8002186:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800218a:	b2a4      	uxth	r4, r4
 800218c:	2500      	movs	r5, #0
 800218e:	4622      	mov	r2, r4
 8002190:	462b      	mov	r3, r5
 8002192:	f7fe fc4b 	bl	8000a2c <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4905      	ldr	r1, [pc, #20]	; (80021b0 <Rcc_enuSelectAPB1Prescaler+0x58>)
 800219c:	e9c1 2300 	strd	r2, r3, [r1]



	return Loc_enuRccStatusError;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bdb0      	pop	{r4, r5, r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	20000148 	.word	0x20000148
 80021b4:	20000114 	.word	0x20000114

080021b8 <Rcc_enuSelectAHBPrescaler>:
Rcc_StatusErrorType Rcc_enuSelectAHBPrescaler(Rcc_AHBSelectPrescalerType Copy_enuAHBPrescaler){
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4601      	mov	r1, r0
 80021c0:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80021c2:	2101      	movs	r1, #1
 80021c4:	73f9      	strb	r1, [r7, #15]
	RCC_selectAHBPrescaler(Copy_enuAHBPrescaler);
 80021c6:	490e      	ldr	r1, [pc, #56]	; (8002200 <Rcc_enuSelectAHBPrescaler+0x48>)
 80021c8:	6889      	ldr	r1, [r1, #8]
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <Rcc_enuSelectAHBPrescaler+0x48>)
 80021cc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80021d0:	6081      	str	r1, [r0, #8]

	Global_u64AHBFreq /=Global_u16AHBPrescalerValuesArr[Copy_enuAHBPrescaler];
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <Rcc_enuSelectAHBPrescaler+0x4c>)
 80021d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021d8:	79fc      	ldrb	r4, [r7, #7]
 80021da:	4d0b      	ldr	r5, [pc, #44]	; (8002208 <Rcc_enuSelectAHBPrescaler+0x50>)
 80021dc:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 80021e0:	b2a4      	uxth	r4, r4
 80021e2:	2500      	movs	r5, #0
 80021e4:	4622      	mov	r2, r4
 80021e6:	462b      	mov	r3, r5
 80021e8:	f7fe fc20 	bl	8000a2c <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4904      	ldr	r1, [pc, #16]	; (8002204 <Rcc_enuSelectAHBPrescaler+0x4c>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	20000140 	.word	0x20000140
 8002208:	200000f4 	.word	0x200000f4

0800220c <Rcc_enuSelectSystemClkSource>:

Rcc_StatusErrorType Rcc_enuSelectSystemClkSource(Rcc_SystemClkSoruceIndexType Copy_enuSystemClkSource){
 800220c:	b490      	push	{r4, r7}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4601      	mov	r1, r0
 8002214:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8002216:	2101      	movs	r1, #1
 8002218:	73f9      	strb	r1, [r7, #15]

	RCC_selectSystemClk(Copy_enuSystemClkSource);
 800221a:	491e      	ldr	r1, [pc, #120]	; (8002294 <Rcc_enuSelectSystemClkSource+0x88>)
 800221c:	6889      	ldr	r1, [r1, #8]
 800221e:	f021 0003 	bic.w	r0, r1, #3
 8002222:	79f9      	ldrb	r1, [r7, #7]
 8002224:	f001 0103 	and.w	r1, r1, #3
 8002228:	4c1a      	ldr	r4, [pc, #104]	; (8002294 <Rcc_enuSelectSystemClkSource+0x88>)
 800222a:	4301      	orrs	r1, r0
 800222c:	60a1      	str	r1, [r4, #8]

	if(Copy_enuSystemClkSource == RCC_SYSTEM_CLK_PLL_INDEX){
 800222e:	79f9      	ldrb	r1, [r7, #7]
 8002230:	2902      	cmp	r1, #2
 8002232:	d106      	bne.n	8002242 <Rcc_enuSelectSystemClkSource+0x36>
		Global_u64SystemFreq = Global_u64StaticPLL_Freq;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <Rcc_enuSelectSystemClkSource+0x8c>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	4918      	ldr	r1, [pc, #96]	; (800229c <Rcc_enuSelectSystemClkSource+0x90>)
 800223c:	e9c1 2300 	strd	r2, r3, [r1]
 8002240:	e022      	b.n	8002288 <Rcc_enuSelectSystemClkSource+0x7c>
	}

	else{
		Global_u64SystemFreq = !(Copy_enuSystemClkSource)*HSI_FREQ + Copy_enuSystemClkSource*HSE_FREQ;
 8002242:	79f9      	ldrb	r1, [r7, #7]
 8002244:	2900      	cmp	r1, #0
 8002246:	d101      	bne.n	800224c <Rcc_enuSelectSystemClkSource+0x40>
 8002248:	4815      	ldr	r0, [pc, #84]	; (80022a0 <Rcc_enuSelectSystemClkSource+0x94>)
 800224a:	e000      	b.n	800224e <Rcc_enuSelectSystemClkSource+0x42>
 800224c:	2000      	movs	r0, #0
 800224e:	79f9      	ldrb	r1, [r7, #7]
 8002250:	4c14      	ldr	r4, [pc, #80]	; (80022a4 <Rcc_enuSelectSystemClkSource+0x98>)
 8002252:	fb04 f101 	mul.w	r1, r4, r1
 8002256:	4401      	add	r1, r0
 8002258:	17c8      	asrs	r0, r1, #31
 800225a:	460a      	mov	r2, r1
 800225c:	4603      	mov	r3, r0
 800225e:	490f      	ldr	r1, [pc, #60]	; (800229c <Rcc_enuSelectSystemClkSource+0x90>)
 8002260:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64AHBFreq = Global_u64SystemFreq;
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <Rcc_enuSelectSystemClkSource+0x90>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	490f      	ldr	r1, [pc, #60]	; (80022a8 <Rcc_enuSelectSystemClkSource+0x9c>)
 800226c:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP1Freq = Global_u64SystemFreq;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <Rcc_enuSelectSystemClkSource+0x90>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <Rcc_enuSelectSystemClkSource+0xa0>)
 8002278:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP2Freq = Global_u64SystemFreq;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <Rcc_enuSelectSystemClkSource+0x90>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	490b      	ldr	r1, [pc, #44]	; (80022b0 <Rcc_enuSelectSystemClkSource+0xa4>)
 8002284:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return Loc_enuRccStatusError;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bc90      	pop	{r4, r7}
 8002292:	4770      	bx	lr
 8002294:	40023800 	.word	0x40023800
 8002298:	200002a0 	.word	0x200002a0
 800229c:	20000138 	.word	0x20000138
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	20000140 	.word	0x20000140
 80022ac:	20000148 	.word	0x20000148
 80022b0:	20000150 	.word	0x20000150

080022b4 <Rcc_enuEnablePeripheralClk>:
	}

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuEnablePeripheralClk(Rcc_BusIndexType Copy_enuBusIndex, u8 Copy_u8PeripheralIndex){
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	460a      	mov	r2, r1
 80022be:	71fb      	strb	r3, [r7, #7]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralIndex>THIRTYONE_VALUE  || Copy_enuBusIndex > FOUR_VALUE){
 80022c8:	79bb      	ldrb	r3, [r7, #6]
 80022ca:	2b1f      	cmp	r3, #31
 80022cc:	d802      	bhi.n	80022d4 <Rcc_enuEnablePeripheralClk+0x20>
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d902      	bls.n	80022da <Rcc_enuEnablePeripheralClk+0x26>
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 80022d4:	2302      	movs	r3, #2
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e015      	b.n	8002306 <Rcc_enuEnablePeripheralClk+0x52>
	}
	else{
		WRITE_BIT((*Global_PeripheralClkRegEnArr[Copy_enuBusIndex]),Copy_u8PeripheralIndex,ONE_VALUE);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <Rcc_enuEnablePeripheralClk+0x60>)
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	79ba      	ldrb	r2, [r7, #6]
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	43d2      	mvns	r2, r2
 80022ee:	401a      	ands	r2, r3
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4618      	mov	r0, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <Rcc_enuEnablePeripheralClk+0x60>)
 80022fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002302:	4302      	orrs	r2, r0
 8002304:	601a      	str	r2, [r3, #0]
	}

	return Loc_enuRccStatusError;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	200000e0 	.word	0x200000e0

08002318 <Rcc_enuConfigPLLI2S>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuConfigPLLI2S(const Rcc_PllI2SConfigType* Address_PllI2S){
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]

	if(Address_PllI2S == NULL){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <Rcc_enuConfigPLLI2S+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 800232a:	2303      	movs	r3, #3
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e032      	b.n	8002396 <Rcc_enuConfigPLLI2S+0x7e>
	}
	else{

		RCC_setPLL_I2S_N_Factor(Address_PllI2S->rcc_PLLI2S_N_From50To432);
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800233a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	8852      	ldrh	r2, [r2, #2]
 8002342:	0192      	lsls	r2, r2, #6
 8002344:	4611      	mov	r1, r2
 8002346:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800234a:	400a      	ands	r2, r1
 800234c:	4915      	ldr	r1, [pc, #84]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_R_Factor(Address_PllI2S->rcc_select_pll_I2S_R);
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 800235a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800235e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002362:	6093      	str	r3, [r2, #8]
		RCC_setPLL_I2S_Q_Factor(Address_PllI2S->rcc_select_pll_I2S_Q);
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 8002366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002378:	490a      	ldr	r1, [pc, #40]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_Clk(Address_PllI2S->rcc_select_pll_i2s_source_clk);
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	7912      	ldrb	r2, [r2, #4]
 800238c:	05d2      	lsls	r2, r2, #23
 800238e:	4611      	mov	r1, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <Rcc_enuConfigPLLI2S+0x8c>)
 8002392:	430b      	orrs	r3, r1
 8002394:	6093      	str	r3, [r2, #8]
	}

	return Loc_enuRccStatusError;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40023800 	.word	0x40023800

080023a8 <Rcc_enuConfigPLLSAI>:


Rcc_StatusErrorType Rcc_enuConfigPLLSAI(const Rcc_PllSAIConfigType* Address_PllSAI){
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]

	if(Address_PllSAI == NULL){
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <Rcc_enuConfigPLLSAI+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80023ba:	2303      	movs	r3, #3
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e06e      	b.n	800249e <Rcc_enuConfigPLLSAI+0xf6>
	}
	else{

		RCC_setPLL_SAI_N_Factor(Address_PllSAI->rcc_PLLSAI_N_From50To432);
 80023c0:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	8852      	ldrh	r2, [r2, #2]
 80023d2:	0192      	lsls	r2, r2, #6
 80023d4:	4611      	mov	r1, r2
 80023d6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80023da:	400a      	ands	r2, r1
 80023dc:	4933      	ldr	r1, [pc, #204]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_Q_Factor(Address_PllSAI->rcc_select_pll_SAI_Q);
 80023e4:	4b31      	ldr	r3, [pc, #196]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	061b      	lsls	r3, r3, #24
 80023f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80023f8:	492c      	ldr	r1, [pc, #176]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_R_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 8002400:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	4a29      	ldr	r2, [pc, #164]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002408:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800240c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		RCC_setPLL_SAI_QX_PLLI2SDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLI2SDIVQ_Qx_Last_FROM1to50);
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241a:	f023 021f 	bic.w	r2, r3, #31
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	88db      	ldrh	r3, [r3, #6]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	4921      	ldr	r1, [pc, #132]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_QY_PLLSAIDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLSAIDIVQ_Qy_Last_FROM1to50);
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002434:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002442:	491a      	ldr	r1, [pc, #104]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_RLcd_PLLSAIDIVR_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800245e:	4913      	ldr	r1, [pc, #76]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		RCC_setPLL_SAI1A_Clk(Address_PllSAI->rcc_select_SAI1A_source);
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7a5b      	ldrb	r3, [r3, #9]
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800247a:	490c      	ldr	r1, [pc, #48]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI1B_Clk(Address_PllSAI->rcc_select_SAI1B_source);
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7a9b      	ldrb	r3, [r3, #10]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002496:	4905      	ldr	r1, [pc, #20]	; (80024ac <Rcc_enuConfigPLLSAI+0x104>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c



	}

	return Loc_enuRccStatusError;
 800249e:	7bfb      	ldrb	r3, [r7, #15]


}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40023800 	.word	0x40023800

080024b0 <Rcc_enuInit>:


Rcc_StatusErrorType Rcc_enuInit(const Rcc_ConfigType* Address_Rcc){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]

	if(Address_Rcc == NULL){
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <Rcc_enuInit+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80024c2:	2303      	movs	r3, #3
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e09b      	b.n	8002600 <Rcc_enuInit+0x150>
	}
	else{

		/*  Enable Clocks */
		if(Address_Rcc->rcc_hse_on_or_off == RCC_ON){
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <Rcc_enuInit+0x30>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hse_on_or_off);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fc67 	bl	8001da8 <Rcc_enuEnableClock>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e006      	b.n	80024ee <Rcc_enuInit+0x3e>
		}

		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hse_on_or_off);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fcfd 	bl	8001ee4 <Rcc_enuDisableClock>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_hsi_on_or_off == RCC_ON){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <Rcc_enuInit+0x56>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hsi_on_or_off);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fc54 	bl	8001da8 <Rcc_enuEnableClock>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e006      	b.n	8002514 <Rcc_enuInit+0x64>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hsi_on_or_off);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fcea 	bl	8001ee4 <Rcc_enuDisableClock>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
		}


		if(Address_Rcc->rcc_pll_on_or_off == RCC_ON && Address_Rcc->address_pll_cfg  != NULL){
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	789b      	ldrb	r3, [r3, #2]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d112      	bne.n	8002542 <Rcc_enuInit+0x92>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <Rcc_enuInit+0x92>
			Loc_enuRccStatusError = Rcc_enuConfigPLL(Address_Rcc->address_pll_cfg);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fd21 	bl	8001f70 <Rcc_enuConfigPLL>
 800252e:	4603      	mov	r3, r0
 8002530:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pll_on_or_off);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	789b      	ldrb	r3, [r3, #2]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fc36 	bl	8001da8 <Rcc_enuEnableClock>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e006      	b.n	8002550 <Rcc_enuInit+0xa0>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pll_on_or_off);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	789b      	ldrb	r3, [r3, #2]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fccc 	bl	8001ee4 <Rcc_enuDisableClock>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllI2S_on_or_off == RCC_ON && Address_Rcc->adress_pll_i2s_cfg  != NULL){
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	78db      	ldrb	r3, [r3, #3]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d112      	bne.n	800257e <Rcc_enuInit+0xce>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <Rcc_enuInit+0xce>
			Loc_enuRccStatusError = 	Rcc_enuConfigPLLI2S(Address_Rcc->adress_pll_i2s_cfg);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fed7 	bl	8002318 <Rcc_enuConfigPLLI2S>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fc18 	bl	8001da8 <Rcc_enuEnableClock>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e006      	b.n	800258c <Rcc_enuInit+0xdc>
		}
		else{
			Loc_enuRccStatusError = 	Rcc_enuDisableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	78db      	ldrb	r3, [r3, #3]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fcae 	bl	8001ee4 <Rcc_enuDisableClock>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllSAI_on_or_off == RCC_ON && Address_Rcc->address_pll_sai_cfg  != NULL){
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d112      	bne.n	80025ba <Rcc_enuInit+0x10a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <Rcc_enuInit+0x10a>
			Loc_enuRccStatusError = Rcc_enuConfigPLLSAI(Address_Rcc->address_pll_sai_cfg);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff01 	bl	80023a8 <Rcc_enuConfigPLLSAI>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	791b      	ldrb	r3, [r3, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fbfa 	bl	8001da8 <Rcc_enuEnableClock>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e006      	b.n	80025c8 <Rcc_enuInit+0x118>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	791b      	ldrb	r3, [r3, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc90 	bl	8001ee4 <Rcc_enuDisableClock>
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]
		}

		Loc_enuRccStatusError = Rcc_enuSelectAPB2Prescaler(Address_Rcc->rcc_apb2_select_prescaler );
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7d1b      	ldrb	r3, [r3, #20]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fd95 	bl	80020fc <Rcc_enuSelectAPB2Prescaler>
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAPB1Prescaler( Address_Rcc->rcc_apb1_select_prescaler);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7d5b      	ldrb	r3, [r3, #21]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fdbc 	bl	8002158 <Rcc_enuSelectAPB1Prescaler>
 80025e0:	4603      	mov	r3, r0
 80025e2:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAHBPrescaler( Address_Rcc->rcc_ahb_select_prescaler);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7d9b      	ldrb	r3, [r3, #22]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fde5 	bl	80021b8 <Rcc_enuSelectAHBPrescaler>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectSystemClkSource(Address_Rcc->rcc_sysmte_clk_soruce);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7ddb      	ldrb	r3, [r3, #23]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fe08 	bl	800220c <Rcc_enuSelectSystemClkSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	73fb      	strb	r3, [r7, #15]


	}

	return Loc_enuRccStatusError;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <Scb_enuSetGroupPrioirty>:




/******************************* Software Interfaces Implementation *******************/
SCB_ErrorStatusType Scb_enuSetGroupPrioirty(Scb_SelectGroupPriorityAndSubPriorityType Copy_enuSelectGroupPriority){
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]

	SCB_ErrorStatusType Loc_enuScbErrorStatus = SCB_STATUS_OK;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]

	Scb_SetGroupPrioirty(Copy_enuSelectGroupPriority);
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002622:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262a:	4a06      	ldr	r2, [pc, #24]	; (8002644 <Scb_enuSetGroupPrioirty+0x38>)
 800262c:	6013      	str	r3, [r2, #0]

	/* it's used for NVIC Driver */
	Global_GroupPrioritySelection =Copy_enuSelectGroupPriority;
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <Scb_enuSetGroupPrioirty+0x3c>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	7013      	strb	r3, [r2, #0]
	return Loc_enuScbErrorStatus;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed0c 	.word	0xe000ed0c
 8002648:	200002a8 	.word	0x200002a8

0800264c <SysTick_Handler>:


}

/**************************** ISR Implementation ************************************/
void SysTick_Handler (void){
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

	if(Systick_OverflowInterruptHandler != NULL){
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <SysTick_Handler+0x38>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <SysTick_Handler+0x12>
		Systick_OverflowInterruptHandler();
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <SysTick_Handler+0x38>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4798      	blx	r3
	else{
		/* Error in setting callback */

	}

	if(Global_u8TimerTypeFlag == SYSTICK_INTERVAL_FLAG){
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <SysTick_Handler+0x3c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <SysTick_Handler+0x32>
		Systick_disableInterrupt();
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <SysTick_Handler+0x40>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <SysTick_Handler+0x40>)
 800266c:	f023 0302 	bic.w	r3, r3, #2
 8002670:	6013      	str	r3, [r2, #0]
		Systick_stopTimer();
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <SysTick_Handler+0x40>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SysTick_Handler+0x40>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6013      	str	r3, [r2, #0]
	}
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200002ac 	.word	0x200002ac
 8002688:	200002a9 	.word	0x200002a9
 800268c:	e000e010 	.word	0xe000e010

08002690 <Usart_enuSetBaudrate>:


static volatile USARTx_Type* uartArr[] = {USART1,USART2,USART3,USART4,USART5,USART6,USART7,USART8};

/********************************** Software Interfaces Declarations *******************/
static Usart_StatusErrorType Usart_enuSetBaudrate(const Usart_ConfigType* Address_Usart){
 8002690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002694:	b08c      	sub	sp, #48	; 0x30
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	f64 Loc_f64Brr ;
	u64 Loc_u64Fraction ;
	u64 Loc_u64IntPart ;
	u8 Loc_u8OverRun;
	if(Address_Usart == NULL){
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <Usart_enuSetBaudrate+0x1e>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026ac:	e158      	b.n	8002960 <Usart_enuSetBaudrate+0x2d0>
	}
	else if(Address_Usart->select_sync_mode == USART_SELECT_ASYNCHRONOUS_MODE){
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	789b      	ldrb	r3, [r3, #2]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8151 	bne.w	800295a <Usart_enuSetBaudrate+0x2ca>
		Loc_u8OverRun = Address_Usart->select_oversample & 0b10;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	795b      	ldrb	r3, [r3, #5]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	75fb      	strb	r3, [r7, #23]

		switch(Address_Usart->select_channel_number){
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b07      	cmp	r3, #7
 80026c8:	f200 8143 	bhi.w	8002952 <Usart_enuSetBaudrate+0x2c2>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <Usart_enuSetBaudrate+0x44>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026f5 	.word	0x080026f5
 80026d8:	08002825 	.word	0x08002825
 80026dc:	08002825 	.word	0x08002825
 80026e0:	08002825 	.word	0x08002825
 80026e4:	08002825 	.word	0x08002825
 80026e8:	080026f5 	.word	0x080026f5
 80026ec:	08002825 	.word	0x08002825
 80026f0:	08002825 	.word	0x08002825

		case USART_SELECT_CHANNEL_1:
		case USART_SELECT_CHANNEL_6:

			Loc_f64Brr = (f64)Global_u64ABP2Freq/(Address_Usart->baude_rate)/(8*(2-Loc_u8OverRun));
 80026f4:	4b9e      	ldr	r3, [pc, #632]	; (8002970 <Usart_enuSetBaudrate+0x2e0>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fd ff4d 	bl	800059c <__aeabi_ul2d>
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fd ff44 	bl	800059c <__aeabi_ul2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fe f89e 	bl	800085c <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	f1c3 0302 	rsb	r3, r3, #2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd feff 	bl	8000534 <__aeabi_i2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4620      	mov	r0, r4
 800273c:	4629      	mov	r1, r5
 800273e:	f7fe f88d 	bl	800085c <__aeabi_ddiv>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_u64IntPart = (u64)Loc_f64Brr;
 800274a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800274e:	f7fe f985 	bl	8000a5c <__aeabi_d2ulz>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_u64Fraction =(Loc_f64Brr-Loc_u64IntPart)*16+0.5;
 800275a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800275e:	f7fd ff1d 	bl	800059c <__aeabi_ul2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800276a:	f7fd fd95 	bl	8000298 <__aeabi_dsub>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b7e      	ldr	r3, [pc, #504]	; (8002974 <Usart_enuSetBaudrate+0x2e4>)
 800277c:	f7fd ff44 	bl	8000608 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <Usart_enuSetBaudrate+0x2e8>)
 800278e:	f7fd fd85 	bl	800029c <__adddf3>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f7fe f95f 	bl	8000a5c <__aeabi_d2ulz>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_u64Fraction ==16){
 80027a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027aa:	f1a2 0110 	sub.w	r1, r2, #16
 80027ae:	430b      	orrs	r3, r1
 80027b0:	d10d      	bne.n	80027ce <Usart_enuSetBaudrate+0x13e>
				Loc_u64Fraction = 0;
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_u64IntPart++;
 80027be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c2:	f112 0801 	adds.w	r8, r2, #1
 80027c6:	f143 0900 	adc.w	r9, r3, #0
 80027ca:	e9c7 8906 	strd	r8, r9, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b69      	ldr	r3, [pc, #420]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 80027d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b291      	uxth	r1, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	4610      	mov	r0, r2
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 80027f2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80027f6:	430b      	orrs	r3, r1
 80027f8:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_u64Fraction);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	4b5e      	ldr	r3, [pc, #376]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 010f 	bic.w	r1, r3, #15
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	4b58      	ldr	r3, [pc, #352]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 800281a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]

			break;
 8002822:	e09d      	b.n	8002960 <Usart_enuSetBaudrate+0x2d0>
		case USART_SELECT_CHANNEL_4:
		case USART_SELECT_CHANNEL_5:
		case USART_SELECT_CHANNEL_7:
		case USART_SELECT_CHANNEL_8:

			Loc_f64Brr = (f64)Global_u64ABP1Freq/(Address_Usart->baude_rate)/(8*(2-Loc_u8OverRun));
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <Usart_enuSetBaudrate+0x2f0>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f7fd feb5 	bl	800059c <__aeabi_ul2d>
 8002832:	4680      	mov	r8, r0
 8002834:	4689      	mov	r9, r1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fd feac 	bl	800059c <__aeabi_ul2d>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4640      	mov	r0, r8
 800284a:	4649      	mov	r1, r9
 800284c:	f7fe f806 	bl	800085c <__aeabi_ddiv>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4690      	mov	r8, r2
 8002856:	4699      	mov	r9, r3
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	f1c3 0302 	rsb	r3, r3, #2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe67 	bl	8000534 <__aeabi_i2d>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4640      	mov	r0, r8
 800286c:	4649      	mov	r1, r9
 800286e:	f7fd fff5 	bl	800085c <__aeabi_ddiv>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_u64IntPart = (u64)Loc_f64Brr;
 800287a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800287e:	f7fe f8ed 	bl	8000a5c <__aeabi_d2ulz>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_u64Fraction =(Loc_f64Brr-Loc_u64IntPart)*16+0.5;
 800288a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800288e:	f7fd fe85 	bl	800059c <__aeabi_ul2d>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800289a:	f7fd fcfd 	bl	8000298 <__aeabi_dsub>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b32      	ldr	r3, [pc, #200]	; (8002974 <Usart_enuSetBaudrate+0x2e4>)
 80028ac:	f7fd feac 	bl	8000608 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <Usart_enuSetBaudrate+0x2e8>)
 80028be:	f7fd fced 	bl	800029c <__adddf3>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fe f8c7 	bl	8000a5c <__aeabi_d2ulz>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_u64Fraction ==16){
 80028d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028da:	f1a2 0110 	sub.w	r1, r2, #16
 80028de:	430b      	orrs	r3, r1
 80028e0:	d10c      	bne.n	80028fc <Usart_enuSetBaudrate+0x26c>
				Loc_u64Fraction = 0;
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_u64IntPart++;
 80028ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f2:	1c54      	adds	r4, r2, #1
 80028f4:	f143 0500 	adc.w	r5, r3, #0
 80028f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b291      	uxth	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	7812      	ldrb	r2, [r2, #0]
 800291c:	4610      	mov	r0, r2
 800291e:	4a17      	ldr	r2, [pc, #92]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 8002920:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 010f 	bic.w	r1, r3, #15
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <Usart_enuSetBaudrate+0x2ec>)
 8002948:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]

			break;
 8002950:	e006      	b.n	8002960 <Usart_enuSetBaudrate+0x2d0>


		default :
			Loc_UsartStatusError = USART_STATUS_FAIL;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002958:	e002      	b.n	8002960 <Usart_enuSetBaudrate+0x2d0>

		}
	}
	else{
		/* Sync Mode */
		Loc_UsartStatusError = USART_STATUS_FAIL;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return Loc_UsartStatusError;
 8002960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8002964:	4618      	mov	r0, r3
 8002966:	3730      	adds	r7, #48	; 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800296e:	bf00      	nop
 8002970:	20000150 	.word	0x20000150
 8002974:	40300000 	.word	0x40300000
 8002978:	3fe00000 	.word	0x3fe00000
 800297c:	20000170 	.word	0x20000170
 8002980:	20000148 	.word	0x20000148

08002984 <Usart_enuEnableRccClock>:


static Usart_StatusErrorType Usart_enuEnableRccClock(const Usart_ConfigType* Address_Usart){
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]

		if(Address_Usart == NULL){
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <Usart_enuEnableRccClock+0x18>
			Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002996:	2302      	movs	r3, #2
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e03c      	b.n	8002a16 <Usart_enuEnableRccClock+0x92>
		}
		else {
			switch(Address_Usart->select_channel_number){
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	d836      	bhi.n	8002a12 <Usart_enuEnableRccClock+0x8e>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <Usart_enuEnableRccClock+0x28>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029cd 	.word	0x080029cd
 80029b0:	080029e1 	.word	0x080029e1
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	080029f1 	.word	0x080029f1
 80029bc:	080029f9 	.word	0x080029f9
 80029c0:	080029d7 	.word	0x080029d7
 80029c4:	08002a01 	.word	0x08002a01
 80029c8:	08002a09 	.word	0x08002a09
			case USART_SELECT_CHANNEL_1:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB2, FOUR_VALUE);
 80029cc:	2104      	movs	r1, #4
 80029ce:	2004      	movs	r0, #4
 80029d0:	f7ff fc70 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
				break;
 80029d4:	e01f      	b.n	8002a16 <Usart_enuEnableRccClock+0x92>
			case USART_SELECT_CHANNEL_6:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB2, FIVE_VALUE);
 80029d6:	2105      	movs	r1, #5
 80029d8:	2004      	movs	r0, #4
 80029da:	f7ff fc6b 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
				break;
 80029de:	e01a      	b.n	8002a16 <Usart_enuEnableRccClock+0x92>

			case USART_SELECT_CHANNEL_2:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, SEVENTEEN_VALUE);
 80029e0:	2111      	movs	r1, #17
 80029e2:	2003      	movs	r0, #3
 80029e4:	f7ff fc66 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_3:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, EIGHTEEN_VALUE);
 80029e8:	2112      	movs	r1, #18
 80029ea:	2003      	movs	r0, #3
 80029ec:	f7ff fc62 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_4:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, NINETEEN_VALUE);
 80029f0:	2113      	movs	r1, #19
 80029f2:	2003      	movs	r0, #3
 80029f4:	f7ff fc5e 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_5:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTY_VALUE);
 80029f8:	2114      	movs	r1, #20
 80029fa:	2003      	movs	r0, #3
 80029fc:	f7ff fc5a 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_7:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, THIRTY_VALUE);
 8002a00:	211e      	movs	r1, #30
 8002a02:	2003      	movs	r0, #3
 8002a04:	f7ff fc56 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_8:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, THIRTYONE_VALUE);
 8002a08:	211f      	movs	r1, #31
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f7ff fc52 	bl	80022b4 <Rcc_enuEnablePeripheralClk>
				break;
 8002a10:	e001      	b.n	8002a16 <Usart_enuEnableRccClock+0x92>

			default :
					Loc_UsartStatusError = USART_STATUS_FAIL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]

			}
		}

		return Loc_UsartStatusError;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]

}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <Usart_enuInit>:



/******************************* Software Interfaces Implementation *******************/

Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
	if(Address_Usart == NULL){
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <Usart_enuInit+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002a32:	2302      	movs	r3, #2
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e10a      	b.n	8002c4e <Usart_enuInit+0x22e>
	}
	else{
			/* Enable Usartx Rcc Clock */
			Loc_UsartStatusError = Usart_enuEnableRccClock(Address_Usart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ffa3 	bl	8002984 <Usart_enuEnableRccClock>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	73fb      	strb	r3, [r7, #15]

			/* Set Baudrate */
			Loc_UsartStatusError = Usart_enuSetBaudrate(Address_Usart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fe24 	bl	8002690 <Usart_enuSetBaudrate>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]

			/* Set Data Size */
			Usart_SetDataSize((Address_Usart->select_channel_number),(Address_Usart->select_character_size));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b81      	ldr	r3, [pc, #516]	; (8002c58 <Usart_enuInit+0x238>)
 8002a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	031b      	lsls	r3, r3, #12
 8002a64:	4619      	mov	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <Usart_enuInit+0x238>)
 8002a6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]

			/* Set Clock Phase if Sync */
			Usart_SetClockPhase((Address_Usart->select_channel_number),(Address_Usart->select_clock_phase));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <Usart_enuInit+0x238>)
 8002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	79db      	ldrb	r3, [r3, #7]
 8002a8c:	025b      	lsls	r3, r3, #9
 8002a8e:	4619      	mov	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <Usart_enuInit+0x238>)
 8002a98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	611a      	str	r2, [r3, #16]

			/* Set Clock Polarity if Sync */
			Usart_SetClockPolarity((Address_Usart->select_channel_number),(Address_Usart->select_clock_polarity));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <Usart_enuInit+0x238>)
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	799b      	ldrb	r3, [r3, #6]
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	4619      	mov	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <Usart_enuInit+0x238>)
 8002ac2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]

			/* enable or disable DMA */
			Usart_SetDmaMode((Address_Usart->select_channel_number),(Address_Usart->select_dma_tx_enable_rx_enable));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <Usart_enuInit+0x238>)
 8002ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7a1b      	ldrb	r3, [r3, #8]
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <Usart_enuInit+0x238>)
 8002aec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	615a      	str	r2, [r3, #20]

			/* enable or disable FULL-Duplex */
			Usart_SetDuplexMode((Address_Usart->select_channel_number),(Address_Usart->select_full_duplex_half_duplex));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <Usart_enuInit+0x238>)
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f023 0208 	bic.w	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7a5b      	ldrb	r3, [r3, #9]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <Usart_enuInit+0x238>)
 8002b16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	615a      	str	r2, [r3, #20]

			/* Select OverSample mode  */
			Usart_SelectOversampleMode((Address_Usart->select_channel_number),(Address_Usart->select_oversample));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <Usart_enuInit+0x238>)
 8002b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	795b      	ldrb	r3, [r3, #5]
 8002b34:	02db      	lsls	r3, r3, #11
 8002b36:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <Usart_enuInit+0x238>)
 8002b42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	615a      	str	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <Usart_enuInit+0x238>)
 8002b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	795b      	ldrb	r3, [r3, #5]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	03db      	lsls	r3, r3, #15
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <Usart_enuInit+0x238>)
 8002b70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]


			/* Select Parity bit mode  */
			Usart_SelectParityBitMode((Address_Usart->select_channel_number),(Address_Usart->select_parity_bits));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <Usart_enuInit+0x238>)
 8002b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f423 61c0 	bic.w	r1, r3, #1536	; 0x600
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	025b      	lsls	r3, r3, #9
 8002b90:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <Usart_enuInit+0x238>)
 8002b9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]


			/* Select Stop bits  */
			Usart_SelectStopBits((Address_Usart->select_channel_number),(Address_Usart->select_stop_bits));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <Usart_enuInit+0x238>)
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <Usart_enuInit+0x238>)
 8002bba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bbe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bc2:	611a      	str	r2, [r3, #16]

			/* Enable Clk if Sync  */
			Usart_SetClkInSyncMode((Address_Usart->select_channel_number),(Address_Usart->select_sync_mode));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <Usart_enuInit+0x238>)
 8002bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	789b      	ldrb	r3, [r3, #2]
 8002bda:	02db      	lsls	r3, r3, #11
 8002bdc:	4619      	mov	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <Usart_enuInit+0x238>)
 8002be6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	611a      	str	r2, [r3, #16]


			/* Enable Tx, Rx , UART */
			Usart_Enable(Address_Usart->select_channel_number);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <Usart_enuInit+0x238>)
 8002bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <Usart_enuInit+0x238>)
 8002c04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]
			Usart_EnableTx(Address_Usart->select_channel_number);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <Usart_enuInit+0x238>)
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <Usart_enuInit+0x238>)
 8002c24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c28:	f042 0208 	orr.w	r2, r2, #8
 8002c2c:	60da      	str	r2, [r3, #12]
			Usart_EnableRx(Address_Usart->select_channel_number);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <Usart_enuInit+0x238>)
 8002c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <Usart_enuInit+0x238>)
 8002c44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c48:	f042 0204 	orr.w	r2, r2, #4
 8002c4c:	60da      	str	r2, [r3, #12]


	}
	return Loc_UsartStatusError;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000170 	.word	0x20000170

08002c5c <Usart_enuTransmitCharBlocking>:
}




Usart_StatusErrorType Usart_enuTransmitCharBlocking(const Usart_ConfigType* Address_Usart, u16 Copy_u16Data){
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
	if(Address_Usart == NULL){
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <Usart_enuTransmitCharBlocking+0x1c>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002c72:	2302      	movs	r3, #2
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e014      	b.n	8002ca2 <Usart_enuTransmitCharBlocking+0x46>
	}
	else{

		while( ( Usart_IsTransmitDataRegisterEmpty( Address_Usart->select_channel_number)  == ZERO_VALUE) );
 8002c78:	bf00      	nop
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <Usart_enuTransmitCharBlocking+0x54>)
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	09db      	lsrs	r3, r3, #7
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d1f3      	bne.n	8002c7a <Usart_enuTransmitCharBlocking+0x1e>
		Usart_SetDataReg((Address_Usart->select_channel_number) , Copy_u16Data);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <Usart_enuTransmitCharBlocking+0x54>)
 8002c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	605a      	str	r2, [r3, #4]
	}
	return Loc_UsartStatusError;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]

}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	20000170 	.word	0x20000170

08002cb4 <Usart_enuTransmitStringBlocking>:
Usart_StatusErrorType Usart_enuTransmitStringBlocking(const Usart_ConfigType* Address_Usart, u8* Address_Data){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8Counter = ZERO_VALUE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73bb      	strb	r3, [r7, #14]
	if(Address_Usart == NULL || Address_Data == NULL){
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <Usart_enuTransmitStringBlocking+0x1e>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d110      	bne.n	8002cf4 <Usart_enuTransmitStringBlocking+0x40>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	73fb      	strb	r3, [r7, #15]
 8002cd6:	e01e      	b.n	8002d16 <Usart_enuTransmitStringBlocking+0x62>
	}
	else{
		while(Address_Data[Loc_u8Counter] ){
		Loc_UsartStatusError = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
 8002cd8:	7bbb      	ldrb	r3, [r7, #14]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	73ba      	strb	r2, [r7, #14]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffb6 	bl	8002c5c <Usart_enuTransmitCharBlocking>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
		while(Address_Data[Loc_u8Counter] ){
 8002cf4:	7bbb      	ldrb	r3, [r7, #14]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1eb      	bne.n	8002cd8 <Usart_enuTransmitStringBlocking+0x24>
		}

		Loc_UsartStatusError = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter]);
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffa5 	bl	8002c5c <Usart_enuTransmitCharBlocking>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_UsartStatusError;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]

}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <Usart_enuEnableRxInterrupt>:
/////////////////////////////// Interrupt Part ////////////////////////////////////////////

/*
 * Look At Page 1006
 */
Usart_StatusErrorType Usart_enuEnableRxInterrupt(const Usart_ConfigType* Address_Usart){
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]

	if(Address_Usart == NULL ){
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <Usart_enuEnableRxInterrupt+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002d32:	2302      	movs	r3, #2
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e00f      	b.n	8002d58 <Usart_enuEnableRxInterrupt+0x38>
	}
	else{


		Usart_EnableRxCompleteInterrupt(( Address_Usart->select_channel_number));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <Usart_enuEnableRxInterrupt+0x48>)
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <Usart_enuEnableRxInterrupt+0x48>)
 8002d4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	60da      	str	r2, [r3, #12]
	}
	return Loc_UsartStatusError;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000170 	.word	0x20000170

08002d6c <Usart_enuSetCallbackRxFunction>:

	}
	return Loc_UsartStatusError;
}

Usart_StatusErrorType Usart_enuSetCallbackRxFunction(const Usart_ConfigType* Address_Usart,void (*callback)(u16 Copy_u16Result)){
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]

	if(Address_Usart == NULL || NULL == callback ){
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <Usart_enuSetCallbackRxFunction+0x1a>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <Usart_enuSetCallbackRxFunction+0x20>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002d86:	2302      	movs	r3, #2
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e006      	b.n	8002d9a <Usart_enuSetCallbackRxFunction+0x2e>
	}
	else{
		Usart_RxInterruptHandler[( Address_Usart->select_channel_number)] =callback;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <Usart_enuSetCallbackRxFunction+0x3c>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	return Loc_UsartStatusError;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	200002b0 	.word	0x200002b0

08002dac <USART1_IRQHandler>:



/**************************** Private Software Interface Implementation **************/

void USART1_IRQHandler(void){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0

	u16 Loc_u16Result;

	if(Usart_GetRxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsRxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d118      	bne.n	8002df4 <USART1_IRQHandler+0x48>
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d110      	bne.n	8002df4 <USART1_IRQHandler+0x48>

		Loc_u16Result = Usart_GetDataReg(USART_SELECT_CHANNEL_1);
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	80fb      	strh	r3, [r7, #6]
		Usart_RxInterruptHandler[USART_SELECT_CHANNEL_1](Loc_u16Result);
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <USART1_IRQHandler+0x8c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	4610      	mov	r0, r2
 8002de2:	4798      	blx	r3

		Usart_ClearRxCompleteFlag(USART_SELECT_CHANNEL_1);
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0220 	bic.w	r2, r2, #32
 8002df2:	601a      	str	r2, [r3, #0]
	}

	if(Usart_GetTxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsTxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d112      	bne.n	8002e2a <USART1_IRQHandler+0x7e>
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10a      	bne.n	8002e2a <USART1_IRQHandler+0x7e>

		Usart_TxCompleteInterruptHandler[USART_SELECT_CHANNEL_1]();
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <USART1_IRQHandler+0x90>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4798      	blx	r3
		Usart_ClearTxCompleteFlag(USART_SELECT_CHANNEL_1);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <USART1_IRQHandler+0x88>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e28:	601a      	str	r2, [r3, #0]
	}

}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000170 	.word	0x20000170
 8002e38:	200002b0 	.word	0x200002b0
 8002e3c:	200002d0 	.word	0x200002d0

08002e40 <Convert_IntToString>:




/********************************** Software Interfaces Declarations *******************/
Std_StatusType Convert_IntToString (u32 Copy_u32Number, pu8 Address_str){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
		Std_StatusType Loc_enuStatus = STD_STATUS_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
	if(NULL == Address_str){
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <Convert_IntToString+0x1a>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e004      	b.n	8002e64 <Convert_IntToString+0x24>
	}

	else{

		sprintf((s8*)Address_str, "%lu", Copy_u32Number);
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4904      	ldr	r1, [pc, #16]	; (8002e70 <Convert_IntToString+0x30>)
 8002e5e:	6838      	ldr	r0, [r7, #0]
 8002e60:	f000 f8e4 	bl	800302c <siprintf>
	}

	return Loc_enuStatus;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	08003d6c 	.word	0x08003d6c

08002e74 <Convert_StringTou8>:

}



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
 8002e74:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e78:	b08b      	sub	sp, #44	; 0x2c
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6178      	str	r0, [r7, #20]
 8002e7e:	6139      	str	r1, [r7, #16]

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
 8002e80:	2100      	movs	r1, #0
 8002e82:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
			u8 Loc_u8Counter = 0;
 8002e86:	2100      	movs	r1, #0
 8002e88:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
			u64 Loc_u64Result = 0;
 8002e8c:	f04f 0000 	mov.w	r0, #0
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	e9c7 0106 	strd	r0, r1, [r7, #24]
			if(NULL == Address_str || NULL == Address_Number ){
 8002e98:	6939      	ldr	r1, [r7, #16]
 8002e9a:	2900      	cmp	r1, #0
 8002e9c:	d002      	beq.n	8002ea4 <Convert_StringTou8+0x30>
 8002e9e:	6979      	ldr	r1, [r7, #20]
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	d103      	bne.n	8002eac <Convert_StringTou8+0x38>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eaa:	e03f      	b.n	8002f2c <Convert_StringTou8+0xb8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
 8002eac:	2100      	movs	r1, #0
 8002eae:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
 8002eb2:	e031      	b.n	8002f18 <Convert_StringTou8+0xa4>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
 8002eb4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002eb8:	4640      	mov	r0, r8
 8002eba:	4649      	mov	r1, r9
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	f04f 0500 	mov.w	r5, #0
 8002ec4:	008d      	lsls	r5, r1, #2
 8002ec6:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 8002eca:	0084      	lsls	r4, r0, #2
 8002ecc:	4620      	mov	r0, r4
 8002ece:	4629      	mov	r1, r5
 8002ed0:	eb10 0208 	adds.w	r2, r0, r8
 8002ed4:	eb41 0309 	adc.w	r3, r1, r9
 8002ed8:	1891      	adds	r1, r2, r2
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	415b      	adcs	r3, r3
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002eec:	693d      	ldr	r5, [r7, #16]
 8002eee:	442c      	add	r4, r5
 8002ef0:	7824      	ldrb	r4, [r4, #0]
 8002ef2:	3c30      	subs	r4, #48	; 0x30
 8002ef4:	17e5      	asrs	r5, r4, #31
 8002ef6:	46a2      	mov	sl, r4
 8002ef8:	46ab      	mov	fp, r5
 8002efa:	eb10 040a 	adds.w	r4, r0, sl
 8002efe:	603c      	str	r4, [r7, #0]
 8002f00:	eb41 010b 	adc.w	r1, r1, fp
 8002f04:	6079      	str	r1, [r7, #4]
 8002f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f0a:	e9c7 0106 	strd	r0, r1, [r7, #24]
				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
 8002f0e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002f12:	3101      	adds	r1, #1
 8002f14:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
 8002f18:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002f1c:	6938      	ldr	r0, [r7, #16]
 8002f1e:	4401      	add	r1, r0
 8002f20:	7809      	ldrb	r1, [r1, #0]
 8002f22:	2900      	cmp	r1, #0
 8002f24:	d1c6      	bne.n	8002eb4 <Convert_StringTou8+0x40>
				}

				*Address_Number = Loc_u64Result;
 8002f26:	7e3a      	ldrb	r2, [r7, #24]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	701a      	strb	r2, [r3, #0]
			}

			return Loc_enuStatus;
 8002f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 8002f30:	4618      	mov	r0, r3
 8002f32:	372c      	adds	r7, #44	; 0x2c
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f3a:	4770      	bx	lr

08002f3c <CompareTwoStrings>:

	return Loc_enuStatus;
}


Std_True_or_FalseType CompareTwoStrings(u8* Address_Data1, u8* Address_Data2){
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	u8 Loc_u8FlagCheck = ONE_VALUE;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8Counter = ZERO_VALUE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73bb      	strb	r3, [r7, #14]
	Std_True_or_FalseType Loc_u8Result;
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	733b      	strb	r3, [r7, #12]
	if(Address_Data1 == NULL ||Address_Data2 == NULL){
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <CompareTwoStrings+0x22>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d111      	bne.n	8002f82 <CompareTwoStrings+0x46>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	733b      	strb	r3, [r7, #12]
 8002f62:	e031      	b.n	8002fc8 <CompareTwoStrings+0x8c>
	}
	else{

		while(Address_Data1[Loc_u8Counter] && Address_Data1[Loc_u8Counter] && Loc_u8FlagCheck == ONE_VALUE) {

			if(Address_Data1[Loc_u8Counter] != Address_Data2[Loc_u8Counter]){
 8002f64:	7bbb      	ldrb	r3, [r7, #14]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	440b      	add	r3, r1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <CompareTwoStrings+0x40>
				Loc_u8FlagCheck = ZERO_VALUE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	73fb      	strb	r3, [r7, #15]
			}
			Loc_u8Counter++;
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	73bb      	strb	r3, [r7, #14]
		while(Address_Data1[Loc_u8Counter] && Address_Data1[Loc_u8Counter] && Loc_u8FlagCheck == ONE_VALUE) {
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <CompareTwoStrings+0x64>
 8002f8e:	7bbb      	ldrb	r3, [r7, #14]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <CompareTwoStrings+0x64>
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d0e1      	beq.n	8002f64 <CompareTwoStrings+0x28>
		}

		if(Address_Data1[Loc_u8Counter] == '\0' && Address_Data2[Loc_u8Counter] == '\0' && Loc_u8FlagCheck == ONE_VALUE){
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <CompareTwoStrings+0x88>
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <CompareTwoStrings+0x88>
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <CompareTwoStrings+0x88>
			Loc_u8Result = STD_TRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	737b      	strb	r3, [r7, #13]
 8002fc2:	e001      	b.n	8002fc8 <CompareTwoStrings+0x8c>
		}
		else{
			Loc_u8Result= STD_FALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	737b      	strb	r3, [r7, #13]
		}


	}
	return Loc_u8Result;
 8002fc8:	7b7b      	ldrb	r3, [r7, #13]

}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fd8:	480d      	ldr	r0, [pc, #52]	; (8003010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fdc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fe2:	490d      	ldr	r1, [pc, #52]	; (8003018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <LoopForever+0xe>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ff8:	4c0a      	ldr	r4, [pc, #40]	; (8003024 <LoopForever+0x16>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003006:	f000 f837 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800300a:	f7fd fecb 	bl	8000da4 <main>

0800300e <LoopForever>:

LoopForever:
  b LoopForever
 800300e:	e7fe      	b.n	800300e <LoopForever>
  ldr   r0, =_estack
 8003010:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003018:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800301c:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 8003020:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003024:	20000438 	.word	0x20000438

08003028 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003028:	e7fe      	b.n	8003028 <ADC_IRQHandler>
	...

0800302c <siprintf>:
 800302c:	b40e      	push	{r1, r2, r3}
 800302e:	b500      	push	{lr}
 8003030:	b09c      	sub	sp, #112	; 0x70
 8003032:	ab1d      	add	r3, sp, #116	; 0x74
 8003034:	9002      	str	r0, [sp, #8]
 8003036:	9006      	str	r0, [sp, #24]
 8003038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800303c:	4809      	ldr	r0, [pc, #36]	; (8003064 <siprintf+0x38>)
 800303e:	9107      	str	r1, [sp, #28]
 8003040:	9104      	str	r1, [sp, #16]
 8003042:	4909      	ldr	r1, [pc, #36]	; (8003068 <siprintf+0x3c>)
 8003044:	f853 2b04 	ldr.w	r2, [r3], #4
 8003048:	9105      	str	r1, [sp, #20]
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	a902      	add	r1, sp, #8
 8003050:	f000 f98a 	bl	8003368 <_svfiprintf_r>
 8003054:	9b02      	ldr	r3, [sp, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	b01c      	add	sp, #112	; 0x70
 800305c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003060:	b003      	add	sp, #12
 8003062:	4770      	bx	lr
 8003064:	200001f4 	.word	0x200001f4
 8003068:	ffff0208 	.word	0xffff0208

0800306c <__errno>:
 800306c:	4b01      	ldr	r3, [pc, #4]	; (8003074 <__errno+0x8>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200001f4 	.word	0x200001f4

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4d0d      	ldr	r5, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2600      	movs	r6, #0
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4d0b      	ldr	r5, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 fc6a 	bl	8003964 <_init>
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2600      	movs	r6, #0
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003db8 	.word	0x08003db8
 80030b4:	08003db8 	.word	0x08003db8
 80030b8:	08003db8 	.word	0x08003db8
 80030bc:	08003dbc 	.word	0x08003dbc

080030c0 <__retarget_lock_acquire_recursive>:
 80030c0:	4770      	bx	lr

080030c2 <__retarget_lock_release_recursive>:
 80030c2:	4770      	bx	lr

080030c4 <_free_r>:
 80030c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030c6:	2900      	cmp	r1, #0
 80030c8:	d044      	beq.n	8003154 <_free_r+0x90>
 80030ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030ce:	9001      	str	r0, [sp, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f1a1 0404 	sub.w	r4, r1, #4
 80030d6:	bfb8      	it	lt
 80030d8:	18e4      	addlt	r4, r4, r3
 80030da:	f000 f8df 	bl	800329c <__malloc_lock>
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <_free_r+0x94>)
 80030e0:	9801      	ldr	r0, [sp, #4]
 80030e2:	6813      	ldr	r3, [r2, #0]
 80030e4:	b933      	cbnz	r3, 80030f4 <_free_r+0x30>
 80030e6:	6063      	str	r3, [r4, #4]
 80030e8:	6014      	str	r4, [r2, #0]
 80030ea:	b003      	add	sp, #12
 80030ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030f0:	f000 b8da 	b.w	80032a8 <__malloc_unlock>
 80030f4:	42a3      	cmp	r3, r4
 80030f6:	d908      	bls.n	800310a <_free_r+0x46>
 80030f8:	6825      	ldr	r5, [r4, #0]
 80030fa:	1961      	adds	r1, r4, r5
 80030fc:	428b      	cmp	r3, r1
 80030fe:	bf01      	itttt	eq
 8003100:	6819      	ldreq	r1, [r3, #0]
 8003102:	685b      	ldreq	r3, [r3, #4]
 8003104:	1949      	addeq	r1, r1, r5
 8003106:	6021      	streq	r1, [r4, #0]
 8003108:	e7ed      	b.n	80030e6 <_free_r+0x22>
 800310a:	461a      	mov	r2, r3
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	b10b      	cbz	r3, 8003114 <_free_r+0x50>
 8003110:	42a3      	cmp	r3, r4
 8003112:	d9fa      	bls.n	800310a <_free_r+0x46>
 8003114:	6811      	ldr	r1, [r2, #0]
 8003116:	1855      	adds	r5, r2, r1
 8003118:	42a5      	cmp	r5, r4
 800311a:	d10b      	bne.n	8003134 <_free_r+0x70>
 800311c:	6824      	ldr	r4, [r4, #0]
 800311e:	4421      	add	r1, r4
 8003120:	1854      	adds	r4, r2, r1
 8003122:	42a3      	cmp	r3, r4
 8003124:	6011      	str	r1, [r2, #0]
 8003126:	d1e0      	bne.n	80030ea <_free_r+0x26>
 8003128:	681c      	ldr	r4, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	6053      	str	r3, [r2, #4]
 800312e:	440c      	add	r4, r1
 8003130:	6014      	str	r4, [r2, #0]
 8003132:	e7da      	b.n	80030ea <_free_r+0x26>
 8003134:	d902      	bls.n	800313c <_free_r+0x78>
 8003136:	230c      	movs	r3, #12
 8003138:	6003      	str	r3, [r0, #0]
 800313a:	e7d6      	b.n	80030ea <_free_r+0x26>
 800313c:	6825      	ldr	r5, [r4, #0]
 800313e:	1961      	adds	r1, r4, r5
 8003140:	428b      	cmp	r3, r1
 8003142:	bf04      	itt	eq
 8003144:	6819      	ldreq	r1, [r3, #0]
 8003146:	685b      	ldreq	r3, [r3, #4]
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	bf04      	itt	eq
 800314c:	1949      	addeq	r1, r1, r5
 800314e:	6021      	streq	r1, [r4, #0]
 8003150:	6054      	str	r4, [r2, #4]
 8003152:	e7ca      	b.n	80030ea <_free_r+0x26>
 8003154:	b003      	add	sp, #12
 8003156:	bd30      	pop	{r4, r5, pc}
 8003158:	20000430 	.word	0x20000430

0800315c <sbrk_aligned>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	4e0e      	ldr	r6, [pc, #56]	; (8003198 <sbrk_aligned+0x3c>)
 8003160:	460c      	mov	r4, r1
 8003162:	6831      	ldr	r1, [r6, #0]
 8003164:	4605      	mov	r5, r0
 8003166:	b911      	cbnz	r1, 800316e <sbrk_aligned+0x12>
 8003168:	f000 fba6 	bl	80038b8 <_sbrk_r>
 800316c:	6030      	str	r0, [r6, #0]
 800316e:	4621      	mov	r1, r4
 8003170:	4628      	mov	r0, r5
 8003172:	f000 fba1 	bl	80038b8 <_sbrk_r>
 8003176:	1c43      	adds	r3, r0, #1
 8003178:	d00a      	beq.n	8003190 <sbrk_aligned+0x34>
 800317a:	1cc4      	adds	r4, r0, #3
 800317c:	f024 0403 	bic.w	r4, r4, #3
 8003180:	42a0      	cmp	r0, r4
 8003182:	d007      	beq.n	8003194 <sbrk_aligned+0x38>
 8003184:	1a21      	subs	r1, r4, r0
 8003186:	4628      	mov	r0, r5
 8003188:	f000 fb96 	bl	80038b8 <_sbrk_r>
 800318c:	3001      	adds	r0, #1
 800318e:	d101      	bne.n	8003194 <sbrk_aligned+0x38>
 8003190:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003194:	4620      	mov	r0, r4
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	20000434 	.word	0x20000434

0800319c <_malloc_r>:
 800319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a0:	1ccd      	adds	r5, r1, #3
 80031a2:	f025 0503 	bic.w	r5, r5, #3
 80031a6:	3508      	adds	r5, #8
 80031a8:	2d0c      	cmp	r5, #12
 80031aa:	bf38      	it	cc
 80031ac:	250c      	movcc	r5, #12
 80031ae:	2d00      	cmp	r5, #0
 80031b0:	4607      	mov	r7, r0
 80031b2:	db01      	blt.n	80031b8 <_malloc_r+0x1c>
 80031b4:	42a9      	cmp	r1, r5
 80031b6:	d905      	bls.n	80031c4 <_malloc_r+0x28>
 80031b8:	230c      	movs	r3, #12
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	2600      	movs	r6, #0
 80031be:	4630      	mov	r0, r6
 80031c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003298 <_malloc_r+0xfc>
 80031c8:	f000 f868 	bl	800329c <__malloc_lock>
 80031cc:	f8d8 3000 	ldr.w	r3, [r8]
 80031d0:	461c      	mov	r4, r3
 80031d2:	bb5c      	cbnz	r4, 800322c <_malloc_r+0x90>
 80031d4:	4629      	mov	r1, r5
 80031d6:	4638      	mov	r0, r7
 80031d8:	f7ff ffc0 	bl	800315c <sbrk_aligned>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	4604      	mov	r4, r0
 80031e0:	d155      	bne.n	800328e <_malloc_r+0xf2>
 80031e2:	f8d8 4000 	ldr.w	r4, [r8]
 80031e6:	4626      	mov	r6, r4
 80031e8:	2e00      	cmp	r6, #0
 80031ea:	d145      	bne.n	8003278 <_malloc_r+0xdc>
 80031ec:	2c00      	cmp	r4, #0
 80031ee:	d048      	beq.n	8003282 <_malloc_r+0xe6>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	4631      	mov	r1, r6
 80031f4:	4638      	mov	r0, r7
 80031f6:	eb04 0903 	add.w	r9, r4, r3
 80031fa:	f000 fb5d 	bl	80038b8 <_sbrk_r>
 80031fe:	4581      	cmp	r9, r0
 8003200:	d13f      	bne.n	8003282 <_malloc_r+0xe6>
 8003202:	6821      	ldr	r1, [r4, #0]
 8003204:	1a6d      	subs	r5, r5, r1
 8003206:	4629      	mov	r1, r5
 8003208:	4638      	mov	r0, r7
 800320a:	f7ff ffa7 	bl	800315c <sbrk_aligned>
 800320e:	3001      	adds	r0, #1
 8003210:	d037      	beq.n	8003282 <_malloc_r+0xe6>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	442b      	add	r3, r5
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	f8d8 3000 	ldr.w	r3, [r8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d038      	beq.n	8003292 <_malloc_r+0xf6>
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	42a2      	cmp	r2, r4
 8003224:	d12b      	bne.n	800327e <_malloc_r+0xe2>
 8003226:	2200      	movs	r2, #0
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	e00f      	b.n	800324c <_malloc_r+0xb0>
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	1b52      	subs	r2, r2, r5
 8003230:	d41f      	bmi.n	8003272 <_malloc_r+0xd6>
 8003232:	2a0b      	cmp	r2, #11
 8003234:	d917      	bls.n	8003266 <_malloc_r+0xca>
 8003236:	1961      	adds	r1, r4, r5
 8003238:	42a3      	cmp	r3, r4
 800323a:	6025      	str	r5, [r4, #0]
 800323c:	bf18      	it	ne
 800323e:	6059      	strne	r1, [r3, #4]
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	bf08      	it	eq
 8003244:	f8c8 1000 	streq.w	r1, [r8]
 8003248:	5162      	str	r2, [r4, r5]
 800324a:	604b      	str	r3, [r1, #4]
 800324c:	4638      	mov	r0, r7
 800324e:	f104 060b 	add.w	r6, r4, #11
 8003252:	f000 f829 	bl	80032a8 <__malloc_unlock>
 8003256:	f026 0607 	bic.w	r6, r6, #7
 800325a:	1d23      	adds	r3, r4, #4
 800325c:	1af2      	subs	r2, r6, r3
 800325e:	d0ae      	beq.n	80031be <_malloc_r+0x22>
 8003260:	1b9b      	subs	r3, r3, r6
 8003262:	50a3      	str	r3, [r4, r2]
 8003264:	e7ab      	b.n	80031be <_malloc_r+0x22>
 8003266:	42a3      	cmp	r3, r4
 8003268:	6862      	ldr	r2, [r4, #4]
 800326a:	d1dd      	bne.n	8003228 <_malloc_r+0x8c>
 800326c:	f8c8 2000 	str.w	r2, [r8]
 8003270:	e7ec      	b.n	800324c <_malloc_r+0xb0>
 8003272:	4623      	mov	r3, r4
 8003274:	6864      	ldr	r4, [r4, #4]
 8003276:	e7ac      	b.n	80031d2 <_malloc_r+0x36>
 8003278:	4634      	mov	r4, r6
 800327a:	6876      	ldr	r6, [r6, #4]
 800327c:	e7b4      	b.n	80031e8 <_malloc_r+0x4c>
 800327e:	4613      	mov	r3, r2
 8003280:	e7cc      	b.n	800321c <_malloc_r+0x80>
 8003282:	230c      	movs	r3, #12
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4638      	mov	r0, r7
 8003288:	f000 f80e 	bl	80032a8 <__malloc_unlock>
 800328c:	e797      	b.n	80031be <_malloc_r+0x22>
 800328e:	6025      	str	r5, [r4, #0]
 8003290:	e7dc      	b.n	800324c <_malloc_r+0xb0>
 8003292:	605b      	str	r3, [r3, #4]
 8003294:	deff      	udf	#255	; 0xff
 8003296:	bf00      	nop
 8003298:	20000430 	.word	0x20000430

0800329c <__malloc_lock>:
 800329c:	4801      	ldr	r0, [pc, #4]	; (80032a4 <__malloc_lock+0x8>)
 800329e:	f7ff bf0f 	b.w	80030c0 <__retarget_lock_acquire_recursive>
 80032a2:	bf00      	nop
 80032a4:	2000042c 	.word	0x2000042c

080032a8 <__malloc_unlock>:
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <__malloc_unlock+0x8>)
 80032aa:	f7ff bf0a 	b.w	80030c2 <__retarget_lock_release_recursive>
 80032ae:	bf00      	nop
 80032b0:	2000042c 	.word	0x2000042c

080032b4 <__ssputs_r>:
 80032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	688e      	ldr	r6, [r1, #8]
 80032ba:	461f      	mov	r7, r3
 80032bc:	42be      	cmp	r6, r7
 80032be:	680b      	ldr	r3, [r1, #0]
 80032c0:	4682      	mov	sl, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	4690      	mov	r8, r2
 80032c6:	d82c      	bhi.n	8003322 <__ssputs_r+0x6e>
 80032c8:	898a      	ldrh	r2, [r1, #12]
 80032ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032ce:	d026      	beq.n	800331e <__ssputs_r+0x6a>
 80032d0:	6965      	ldr	r5, [r4, #20]
 80032d2:	6909      	ldr	r1, [r1, #16]
 80032d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d8:	eba3 0901 	sub.w	r9, r3, r1
 80032dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e0:	1c7b      	adds	r3, r7, #1
 80032e2:	444b      	add	r3, r9
 80032e4:	106d      	asrs	r5, r5, #1
 80032e6:	429d      	cmp	r5, r3
 80032e8:	bf38      	it	cc
 80032ea:	461d      	movcc	r5, r3
 80032ec:	0553      	lsls	r3, r2, #21
 80032ee:	d527      	bpl.n	8003340 <__ssputs_r+0x8c>
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7ff ff53 	bl	800319c <_malloc_r>
 80032f6:	4606      	mov	r6, r0
 80032f8:	b360      	cbz	r0, 8003354 <__ssputs_r+0xa0>
 80032fa:	6921      	ldr	r1, [r4, #16]
 80032fc:	464a      	mov	r2, r9
 80032fe:	f000 faeb 	bl	80038d8 <memcpy>
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	6126      	str	r6, [r4, #16]
 8003310:	6165      	str	r5, [r4, #20]
 8003312:	444e      	add	r6, r9
 8003314:	eba5 0509 	sub.w	r5, r5, r9
 8003318:	6026      	str	r6, [r4, #0]
 800331a:	60a5      	str	r5, [r4, #8]
 800331c:	463e      	mov	r6, r7
 800331e:	42be      	cmp	r6, r7
 8003320:	d900      	bls.n	8003324 <__ssputs_r+0x70>
 8003322:	463e      	mov	r6, r7
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	4632      	mov	r2, r6
 8003328:	4641      	mov	r1, r8
 800332a:	f000 faab 	bl	8003884 <memmove>
 800332e:	68a3      	ldr	r3, [r4, #8]
 8003330:	1b9b      	subs	r3, r3, r6
 8003332:	60a3      	str	r3, [r4, #8]
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	4433      	add	r3, r6
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	2000      	movs	r0, #0
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	462a      	mov	r2, r5
 8003342:	f000 fad7 	bl	80038f4 <_realloc_r>
 8003346:	4606      	mov	r6, r0
 8003348:	2800      	cmp	r0, #0
 800334a:	d1e0      	bne.n	800330e <__ssputs_r+0x5a>
 800334c:	6921      	ldr	r1, [r4, #16]
 800334e:	4650      	mov	r0, sl
 8003350:	f7ff feb8 	bl	80030c4 <_free_r>
 8003354:	230c      	movs	r3, #12
 8003356:	f8ca 3000 	str.w	r3, [sl]
 800335a:	89a3      	ldrh	r3, [r4, #12]
 800335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003360:	81a3      	strh	r3, [r4, #12]
 8003362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003366:	e7e9      	b.n	800333c <__ssputs_r+0x88>

08003368 <_svfiprintf_r>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	4698      	mov	r8, r3
 800336e:	898b      	ldrh	r3, [r1, #12]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	b09d      	sub	sp, #116	; 0x74
 8003374:	4607      	mov	r7, r0
 8003376:	460d      	mov	r5, r1
 8003378:	4614      	mov	r4, r2
 800337a:	d50e      	bpl.n	800339a <_svfiprintf_r+0x32>
 800337c:	690b      	ldr	r3, [r1, #16]
 800337e:	b963      	cbnz	r3, 800339a <_svfiprintf_r+0x32>
 8003380:	2140      	movs	r1, #64	; 0x40
 8003382:	f7ff ff0b 	bl	800319c <_malloc_r>
 8003386:	6028      	str	r0, [r5, #0]
 8003388:	6128      	str	r0, [r5, #16]
 800338a:	b920      	cbnz	r0, 8003396 <_svfiprintf_r+0x2e>
 800338c:	230c      	movs	r3, #12
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003394:	e0d0      	b.n	8003538 <_svfiprintf_r+0x1d0>
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	616b      	str	r3, [r5, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	2320      	movs	r3, #32
 80033a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a8:	2330      	movs	r3, #48	; 0x30
 80033aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003550 <_svfiprintf_r+0x1e8>
 80033ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033b2:	f04f 0901 	mov.w	r9, #1
 80033b6:	4623      	mov	r3, r4
 80033b8:	469a      	mov	sl, r3
 80033ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033be:	b10a      	cbz	r2, 80033c4 <_svfiprintf_r+0x5c>
 80033c0:	2a25      	cmp	r2, #37	; 0x25
 80033c2:	d1f9      	bne.n	80033b8 <_svfiprintf_r+0x50>
 80033c4:	ebba 0b04 	subs.w	fp, sl, r4
 80033c8:	d00b      	beq.n	80033e2 <_svfiprintf_r+0x7a>
 80033ca:	465b      	mov	r3, fp
 80033cc:	4622      	mov	r2, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	4638      	mov	r0, r7
 80033d2:	f7ff ff6f 	bl	80032b4 <__ssputs_r>
 80033d6:	3001      	adds	r0, #1
 80033d8:	f000 80a9 	beq.w	800352e <_svfiprintf_r+0x1c6>
 80033dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033de:	445a      	add	r2, fp
 80033e0:	9209      	str	r2, [sp, #36]	; 0x24
 80033e2:	f89a 3000 	ldrb.w	r3, [sl]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a1 	beq.w	800352e <_svfiprintf_r+0x1c6>
 80033ec:	2300      	movs	r3, #0
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f6:	f10a 0a01 	add.w	sl, sl, #1
 80033fa:	9304      	str	r3, [sp, #16]
 80033fc:	9307      	str	r3, [sp, #28]
 80033fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003402:	931a      	str	r3, [sp, #104]	; 0x68
 8003404:	4654      	mov	r4, sl
 8003406:	2205      	movs	r2, #5
 8003408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340c:	4850      	ldr	r0, [pc, #320]	; (8003550 <_svfiprintf_r+0x1e8>)
 800340e:	f7fc feef 	bl	80001f0 <memchr>
 8003412:	9a04      	ldr	r2, [sp, #16]
 8003414:	b9d8      	cbnz	r0, 800344e <_svfiprintf_r+0xe6>
 8003416:	06d0      	lsls	r0, r2, #27
 8003418:	bf44      	itt	mi
 800341a:	2320      	movmi	r3, #32
 800341c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003420:	0711      	lsls	r1, r2, #28
 8003422:	bf44      	itt	mi
 8003424:	232b      	movmi	r3, #43	; 0x2b
 8003426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800342a:	f89a 3000 	ldrb.w	r3, [sl]
 800342e:	2b2a      	cmp	r3, #42	; 0x2a
 8003430:	d015      	beq.n	800345e <_svfiprintf_r+0xf6>
 8003432:	9a07      	ldr	r2, [sp, #28]
 8003434:	4654      	mov	r4, sl
 8003436:	2000      	movs	r0, #0
 8003438:	f04f 0c0a 	mov.w	ip, #10
 800343c:	4621      	mov	r1, r4
 800343e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003442:	3b30      	subs	r3, #48	; 0x30
 8003444:	2b09      	cmp	r3, #9
 8003446:	d94d      	bls.n	80034e4 <_svfiprintf_r+0x17c>
 8003448:	b1b0      	cbz	r0, 8003478 <_svfiprintf_r+0x110>
 800344a:	9207      	str	r2, [sp, #28]
 800344c:	e014      	b.n	8003478 <_svfiprintf_r+0x110>
 800344e:	eba0 0308 	sub.w	r3, r0, r8
 8003452:	fa09 f303 	lsl.w	r3, r9, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	9304      	str	r3, [sp, #16]
 800345a:	46a2      	mov	sl, r4
 800345c:	e7d2      	b.n	8003404 <_svfiprintf_r+0x9c>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	1d19      	adds	r1, r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	9103      	str	r1, [sp, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfbb      	ittet	lt
 800346a:	425b      	neglt	r3, r3
 800346c:	f042 0202 	orrlt.w	r2, r2, #2
 8003470:	9307      	strge	r3, [sp, #28]
 8003472:	9307      	strlt	r3, [sp, #28]
 8003474:	bfb8      	it	lt
 8003476:	9204      	strlt	r2, [sp, #16]
 8003478:	7823      	ldrb	r3, [r4, #0]
 800347a:	2b2e      	cmp	r3, #46	; 0x2e
 800347c:	d10c      	bne.n	8003498 <_svfiprintf_r+0x130>
 800347e:	7863      	ldrb	r3, [r4, #1]
 8003480:	2b2a      	cmp	r3, #42	; 0x2a
 8003482:	d134      	bne.n	80034ee <_svfiprintf_r+0x186>
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	9203      	str	r2, [sp, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb8      	it	lt
 8003490:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003494:	3402      	adds	r4, #2
 8003496:	9305      	str	r3, [sp, #20]
 8003498:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003560 <_svfiprintf_r+0x1f8>
 800349c:	7821      	ldrb	r1, [r4, #0]
 800349e:	2203      	movs	r2, #3
 80034a0:	4650      	mov	r0, sl
 80034a2:	f7fc fea5 	bl	80001f0 <memchr>
 80034a6:	b138      	cbz	r0, 80034b8 <_svfiprintf_r+0x150>
 80034a8:	9b04      	ldr	r3, [sp, #16]
 80034aa:	eba0 000a 	sub.w	r0, r0, sl
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	4082      	lsls	r2, r0
 80034b2:	4313      	orrs	r3, r2
 80034b4:	3401      	adds	r4, #1
 80034b6:	9304      	str	r3, [sp, #16]
 80034b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034bc:	4825      	ldr	r0, [pc, #148]	; (8003554 <_svfiprintf_r+0x1ec>)
 80034be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c2:	2206      	movs	r2, #6
 80034c4:	f7fc fe94 	bl	80001f0 <memchr>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d038      	beq.n	800353e <_svfiprintf_r+0x1d6>
 80034cc:	4b22      	ldr	r3, [pc, #136]	; (8003558 <_svfiprintf_r+0x1f0>)
 80034ce:	bb1b      	cbnz	r3, 8003518 <_svfiprintf_r+0x1b0>
 80034d0:	9b03      	ldr	r3, [sp, #12]
 80034d2:	3307      	adds	r3, #7
 80034d4:	f023 0307 	bic.w	r3, r3, #7
 80034d8:	3308      	adds	r3, #8
 80034da:	9303      	str	r3, [sp, #12]
 80034dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034de:	4433      	add	r3, r6
 80034e0:	9309      	str	r3, [sp, #36]	; 0x24
 80034e2:	e768      	b.n	80033b6 <_svfiprintf_r+0x4e>
 80034e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e8:	460c      	mov	r4, r1
 80034ea:	2001      	movs	r0, #1
 80034ec:	e7a6      	b.n	800343c <_svfiprintf_r+0xd4>
 80034ee:	2300      	movs	r3, #0
 80034f0:	3401      	adds	r4, #1
 80034f2:	9305      	str	r3, [sp, #20]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f04f 0c0a 	mov.w	ip, #10
 80034fa:	4620      	mov	r0, r4
 80034fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003500:	3a30      	subs	r2, #48	; 0x30
 8003502:	2a09      	cmp	r2, #9
 8003504:	d903      	bls.n	800350e <_svfiprintf_r+0x1a6>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0c6      	beq.n	8003498 <_svfiprintf_r+0x130>
 800350a:	9105      	str	r1, [sp, #20]
 800350c:	e7c4      	b.n	8003498 <_svfiprintf_r+0x130>
 800350e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003512:	4604      	mov	r4, r0
 8003514:	2301      	movs	r3, #1
 8003516:	e7f0      	b.n	80034fa <_svfiprintf_r+0x192>
 8003518:	ab03      	add	r3, sp, #12
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	462a      	mov	r2, r5
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <_svfiprintf_r+0x1f4>)
 8003520:	a904      	add	r1, sp, #16
 8003522:	4638      	mov	r0, r7
 8003524:	f3af 8000 	nop.w
 8003528:	1c42      	adds	r2, r0, #1
 800352a:	4606      	mov	r6, r0
 800352c:	d1d6      	bne.n	80034dc <_svfiprintf_r+0x174>
 800352e:	89ab      	ldrh	r3, [r5, #12]
 8003530:	065b      	lsls	r3, r3, #25
 8003532:	f53f af2d 	bmi.w	8003390 <_svfiprintf_r+0x28>
 8003536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003538:	b01d      	add	sp, #116	; 0x74
 800353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353e:	ab03      	add	r3, sp, #12
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	462a      	mov	r2, r5
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <_svfiprintf_r+0x1f4>)
 8003546:	a904      	add	r1, sp, #16
 8003548:	4638      	mov	r0, r7
 800354a:	f000 f879 	bl	8003640 <_printf_i>
 800354e:	e7eb      	b.n	8003528 <_svfiprintf_r+0x1c0>
 8003550:	08003d7b 	.word	0x08003d7b
 8003554:	08003d85 	.word	0x08003d85
 8003558:	00000000 	.word	0x00000000
 800355c:	080032b5 	.word	0x080032b5
 8003560:	08003d81 	.word	0x08003d81

08003564 <_printf_common>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4616      	mov	r6, r2
 800356a:	4699      	mov	r9, r3
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003574:	4293      	cmp	r3, r2
 8003576:	bfb8      	it	lt
 8003578:	4613      	movlt	r3, r2
 800357a:	6033      	str	r3, [r6, #0]
 800357c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003580:	4607      	mov	r7, r0
 8003582:	460c      	mov	r4, r1
 8003584:	b10a      	cbz	r2, 800358a <_printf_common+0x26>
 8003586:	3301      	adds	r3, #1
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	0699      	lsls	r1, r3, #26
 800358e:	bf42      	ittt	mi
 8003590:	6833      	ldrmi	r3, [r6, #0]
 8003592:	3302      	addmi	r3, #2
 8003594:	6033      	strmi	r3, [r6, #0]
 8003596:	6825      	ldr	r5, [r4, #0]
 8003598:	f015 0506 	ands.w	r5, r5, #6
 800359c:	d106      	bne.n	80035ac <_printf_common+0x48>
 800359e:	f104 0a19 	add.w	sl, r4, #25
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	6832      	ldr	r2, [r6, #0]
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dc26      	bgt.n	80035fa <_printf_common+0x96>
 80035ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b0:	1e13      	subs	r3, r2, #0
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	bf18      	it	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	0692      	lsls	r2, r2, #26
 80035ba:	d42b      	bmi.n	8003614 <_printf_common+0xb0>
 80035bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c0:	4649      	mov	r1, r9
 80035c2:	4638      	mov	r0, r7
 80035c4:	47c0      	blx	r8
 80035c6:	3001      	adds	r0, #1
 80035c8:	d01e      	beq.n	8003608 <_printf_common+0xa4>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	6922      	ldr	r2, [r4, #16]
 80035ce:	f003 0306 	and.w	r3, r3, #6
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf02      	ittt	eq
 80035d6:	68e5      	ldreq	r5, [r4, #12]
 80035d8:	6833      	ldreq	r3, [r6, #0]
 80035da:	1aed      	subeq	r5, r5, r3
 80035dc:	68a3      	ldr	r3, [r4, #8]
 80035de:	bf0c      	ite	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	2500      	movne	r5, #0
 80035e6:	4293      	cmp	r3, r2
 80035e8:	bfc4      	itt	gt
 80035ea:	1a9b      	subgt	r3, r3, r2
 80035ec:	18ed      	addgt	r5, r5, r3
 80035ee:	2600      	movs	r6, #0
 80035f0:	341a      	adds	r4, #26
 80035f2:	42b5      	cmp	r5, r6
 80035f4:	d11a      	bne.n	800362c <_printf_common+0xc8>
 80035f6:	2000      	movs	r0, #0
 80035f8:	e008      	b.n	800360c <_printf_common+0xa8>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4652      	mov	r2, sl
 80035fe:	4649      	mov	r1, r9
 8003600:	4638      	mov	r0, r7
 8003602:	47c0      	blx	r8
 8003604:	3001      	adds	r0, #1
 8003606:	d103      	bne.n	8003610 <_printf_common+0xac>
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003610:	3501      	adds	r5, #1
 8003612:	e7c6      	b.n	80035a2 <_printf_common+0x3e>
 8003614:	18e1      	adds	r1, r4, r3
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	2030      	movs	r0, #48	; 0x30
 800361a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361e:	4422      	add	r2, r4
 8003620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003628:	3302      	adds	r3, #2
 800362a:	e7c7      	b.n	80035bc <_printf_common+0x58>
 800362c:	2301      	movs	r3, #1
 800362e:	4622      	mov	r2, r4
 8003630:	4649      	mov	r1, r9
 8003632:	4638      	mov	r0, r7
 8003634:	47c0      	blx	r8
 8003636:	3001      	adds	r0, #1
 8003638:	d0e6      	beq.n	8003608 <_printf_common+0xa4>
 800363a:	3601      	adds	r6, #1
 800363c:	e7d9      	b.n	80035f2 <_printf_common+0x8e>
	...

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003648:	2f78      	cmp	r7, #120	; 0x78
 800364a:	4691      	mov	r9, r2
 800364c:	4680      	mov	r8, r0
 800364e:	460c      	mov	r4, r1
 8003650:	469a      	mov	sl, r3
 8003652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	; 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d4 	beq.w	800380a <_printf_i+0x1ca>
 8003662:	2f58      	cmp	r7, #88	; 0x58
 8003664:	f000 80c0 	beq.w	80037e8 <_printf_i+0x1a8>
 8003668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	; (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037f1 	.word	0x080037f1
 80036b0:	08003719 	.word	0x08003719
 80036b4:	080037ab 	.word	0x080037ab
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	08003813 	.word	0x08003813
 80036c4:	08003669 	.word	0x08003669
 80036c8:	08003719 	.word	0x08003719
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037b3 	.word	0x080037b3
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	602a      	str	r2, [r5, #0]
 80036e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e09f      	b.n	800382c <_printf_i+0x1ec>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	0607      	lsls	r7, r0, #24
 80036f2:	f103 0104 	add.w	r1, r3, #4
 80036f6:	6029      	str	r1, [r5, #0]
 80036f8:	d501      	bpl.n	80036fe <_printf_i+0xbe>
 80036fa:	681e      	ldr	r6, [r3, #0]
 80036fc:	e003      	b.n	8003706 <_printf_i+0xc6>
 80036fe:	0646      	lsls	r6, r0, #25
 8003700:	d5fb      	bpl.n	80036fa <_printf_i+0xba>
 8003702:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003706:	2e00      	cmp	r6, #0
 8003708:	da03      	bge.n	8003712 <_printf_i+0xd2>
 800370a:	232d      	movs	r3, #45	; 0x2d
 800370c:	4276      	negs	r6, r6
 800370e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003712:	485a      	ldr	r0, [pc, #360]	; (800387c <_printf_i+0x23c>)
 8003714:	230a      	movs	r3, #10
 8003716:	e012      	b.n	800373e <_printf_i+0xfe>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	1d19      	adds	r1, r3, #4
 800371e:	6029      	str	r1, [r5, #0]
 8003720:	0605      	lsls	r5, r0, #24
 8003722:	d501      	bpl.n	8003728 <_printf_i+0xe8>
 8003724:	681e      	ldr	r6, [r3, #0]
 8003726:	e002      	b.n	800372e <_printf_i+0xee>
 8003728:	0641      	lsls	r1, r0, #25
 800372a:	d5fb      	bpl.n	8003724 <_printf_i+0xe4>
 800372c:	881e      	ldrh	r6, [r3, #0]
 800372e:	4853      	ldr	r0, [pc, #332]	; (800387c <_printf_i+0x23c>)
 8003730:	2f6f      	cmp	r7, #111	; 0x6f
 8003732:	bf0c      	ite	eq
 8003734:	2308      	moveq	r3, #8
 8003736:	230a      	movne	r3, #10
 8003738:	2100      	movs	r1, #0
 800373a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800373e:	6865      	ldr	r5, [r4, #4]
 8003740:	60a5      	str	r5, [r4, #8]
 8003742:	2d00      	cmp	r5, #0
 8003744:	bfa2      	ittt	ge
 8003746:	6821      	ldrge	r1, [r4, #0]
 8003748:	f021 0104 	bicge.w	r1, r1, #4
 800374c:	6021      	strge	r1, [r4, #0]
 800374e:	b90e      	cbnz	r6, 8003754 <_printf_i+0x114>
 8003750:	2d00      	cmp	r5, #0
 8003752:	d04b      	beq.n	80037ec <_printf_i+0x1ac>
 8003754:	4615      	mov	r5, r2
 8003756:	fbb6 f1f3 	udiv	r1, r6, r3
 800375a:	fb03 6711 	mls	r7, r3, r1, r6
 800375e:	5dc7      	ldrb	r7, [r0, r7]
 8003760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003764:	4637      	mov	r7, r6
 8003766:	42bb      	cmp	r3, r7
 8003768:	460e      	mov	r6, r1
 800376a:	d9f4      	bls.n	8003756 <_printf_i+0x116>
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10b      	bne.n	8003788 <_printf_i+0x148>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	07de      	lsls	r6, r3, #31
 8003774:	d508      	bpl.n	8003788 <_printf_i+0x148>
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	6861      	ldr	r1, [r4, #4]
 800377a:	4299      	cmp	r1, r3
 800377c:	bfde      	ittt	le
 800377e:	2330      	movle	r3, #48	; 0x30
 8003780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003784:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003788:	1b52      	subs	r2, r2, r5
 800378a:	6122      	str	r2, [r4, #16]
 800378c:	f8cd a000 	str.w	sl, [sp]
 8003790:	464b      	mov	r3, r9
 8003792:	aa03      	add	r2, sp, #12
 8003794:	4621      	mov	r1, r4
 8003796:	4640      	mov	r0, r8
 8003798:	f7ff fee4 	bl	8003564 <_printf_common>
 800379c:	3001      	adds	r0, #1
 800379e:	d14a      	bne.n	8003836 <_printf_i+0x1f6>
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a4:	b004      	add	sp, #16
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	4833      	ldr	r0, [pc, #204]	; (8003880 <_printf_i+0x240>)
 80037b4:	2778      	movs	r7, #120	; 0x78
 80037b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	6829      	ldr	r1, [r5, #0]
 80037be:	061f      	lsls	r7, r3, #24
 80037c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80037c4:	d402      	bmi.n	80037cc <_printf_i+0x18c>
 80037c6:	065f      	lsls	r7, r3, #25
 80037c8:	bf48      	it	mi
 80037ca:	b2b6      	uxthmi	r6, r6
 80037cc:	07df      	lsls	r7, r3, #31
 80037ce:	bf48      	it	mi
 80037d0:	f043 0320 	orrmi.w	r3, r3, #32
 80037d4:	6029      	str	r1, [r5, #0]
 80037d6:	bf48      	it	mi
 80037d8:	6023      	strmi	r3, [r4, #0]
 80037da:	b91e      	cbnz	r6, 80037e4 <_printf_i+0x1a4>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f023 0320 	bic.w	r3, r3, #32
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	2310      	movs	r3, #16
 80037e6:	e7a7      	b.n	8003738 <_printf_i+0xf8>
 80037e8:	4824      	ldr	r0, [pc, #144]	; (800387c <_printf_i+0x23c>)
 80037ea:	e7e4      	b.n	80037b6 <_printf_i+0x176>
 80037ec:	4615      	mov	r5, r2
 80037ee:	e7bd      	b.n	800376c <_printf_i+0x12c>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	6826      	ldr	r6, [r4, #0]
 80037f4:	6961      	ldr	r1, [r4, #20]
 80037f6:	1d18      	adds	r0, r3, #4
 80037f8:	6028      	str	r0, [r5, #0]
 80037fa:	0635      	lsls	r5, r6, #24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	d501      	bpl.n	8003804 <_printf_i+0x1c4>
 8003800:	6019      	str	r1, [r3, #0]
 8003802:	e002      	b.n	800380a <_printf_i+0x1ca>
 8003804:	0670      	lsls	r0, r6, #25
 8003806:	d5fb      	bpl.n	8003800 <_printf_i+0x1c0>
 8003808:	8019      	strh	r1, [r3, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	4615      	mov	r5, r2
 8003810:	e7bc      	b.n	800378c <_printf_i+0x14c>
 8003812:	682b      	ldr	r3, [r5, #0]
 8003814:	1d1a      	adds	r2, r3, #4
 8003816:	602a      	str	r2, [r5, #0]
 8003818:	681d      	ldr	r5, [r3, #0]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	2100      	movs	r1, #0
 800381e:	4628      	mov	r0, r5
 8003820:	f7fc fce6 	bl	80001f0 <memchr>
 8003824:	b108      	cbz	r0, 800382a <_printf_i+0x1ea>
 8003826:	1b40      	subs	r0, r0, r5
 8003828:	6060      	str	r0, [r4, #4]
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	6123      	str	r3, [r4, #16]
 800382e:	2300      	movs	r3, #0
 8003830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003834:	e7aa      	b.n	800378c <_printf_i+0x14c>
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	462a      	mov	r2, r5
 800383a:	4649      	mov	r1, r9
 800383c:	4640      	mov	r0, r8
 800383e:	47d0      	blx	sl
 8003840:	3001      	adds	r0, #1
 8003842:	d0ad      	beq.n	80037a0 <_printf_i+0x160>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	079b      	lsls	r3, r3, #30
 8003848:	d413      	bmi.n	8003872 <_printf_i+0x232>
 800384a:	68e0      	ldr	r0, [r4, #12]
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	4298      	cmp	r0, r3
 8003850:	bfb8      	it	lt
 8003852:	4618      	movlt	r0, r3
 8003854:	e7a6      	b.n	80037a4 <_printf_i+0x164>
 8003856:	2301      	movs	r3, #1
 8003858:	4632      	mov	r2, r6
 800385a:	4649      	mov	r1, r9
 800385c:	4640      	mov	r0, r8
 800385e:	47d0      	blx	sl
 8003860:	3001      	adds	r0, #1
 8003862:	d09d      	beq.n	80037a0 <_printf_i+0x160>
 8003864:	3501      	adds	r5, #1
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	9903      	ldr	r1, [sp, #12]
 800386a:	1a5b      	subs	r3, r3, r1
 800386c:	42ab      	cmp	r3, r5
 800386e:	dcf2      	bgt.n	8003856 <_printf_i+0x216>
 8003870:	e7eb      	b.n	800384a <_printf_i+0x20a>
 8003872:	2500      	movs	r5, #0
 8003874:	f104 0619 	add.w	r6, r4, #25
 8003878:	e7f5      	b.n	8003866 <_printf_i+0x226>
 800387a:	bf00      	nop
 800387c:	08003d8c 	.word	0x08003d8c
 8003880:	08003d9d 	.word	0x08003d9d

08003884 <memmove>:
 8003884:	4288      	cmp	r0, r1
 8003886:	b510      	push	{r4, lr}
 8003888:	eb01 0402 	add.w	r4, r1, r2
 800388c:	d902      	bls.n	8003894 <memmove+0x10>
 800388e:	4284      	cmp	r4, r0
 8003890:	4623      	mov	r3, r4
 8003892:	d807      	bhi.n	80038a4 <memmove+0x20>
 8003894:	1e43      	subs	r3, r0, #1
 8003896:	42a1      	cmp	r1, r4
 8003898:	d008      	beq.n	80038ac <memmove+0x28>
 800389a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800389e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038a2:	e7f8      	b.n	8003896 <memmove+0x12>
 80038a4:	4402      	add	r2, r0
 80038a6:	4601      	mov	r1, r0
 80038a8:	428a      	cmp	r2, r1
 80038aa:	d100      	bne.n	80038ae <memmove+0x2a>
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038b6:	e7f7      	b.n	80038a8 <memmove+0x24>

080038b8 <_sbrk_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d06      	ldr	r5, [pc, #24]	; (80038d4 <_sbrk_r+0x1c>)
 80038bc:	2300      	movs	r3, #0
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	f7fd fdbe 	bl	8001444 <_sbrk>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_sbrk_r+0x1a>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_sbrk_r+0x1a>
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	20000428 	.word	0x20000428

080038d8 <memcpy>:
 80038d8:	440a      	add	r2, r1
 80038da:	4291      	cmp	r1, r2
 80038dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80038e0:	d100      	bne.n	80038e4 <memcpy+0xc>
 80038e2:	4770      	bx	lr
 80038e4:	b510      	push	{r4, lr}
 80038e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ee:	4291      	cmp	r1, r2
 80038f0:	d1f9      	bne.n	80038e6 <memcpy+0xe>
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <_realloc_r>:
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	4680      	mov	r8, r0
 80038fa:	4614      	mov	r4, r2
 80038fc:	460e      	mov	r6, r1
 80038fe:	b921      	cbnz	r1, 800390a <_realloc_r+0x16>
 8003900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003904:	4611      	mov	r1, r2
 8003906:	f7ff bc49 	b.w	800319c <_malloc_r>
 800390a:	b92a      	cbnz	r2, 8003918 <_realloc_r+0x24>
 800390c:	f7ff fbda 	bl	80030c4 <_free_r>
 8003910:	4625      	mov	r5, r4
 8003912:	4628      	mov	r0, r5
 8003914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003918:	f000 f81b 	bl	8003952 <_malloc_usable_size_r>
 800391c:	4284      	cmp	r4, r0
 800391e:	4607      	mov	r7, r0
 8003920:	d802      	bhi.n	8003928 <_realloc_r+0x34>
 8003922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003926:	d812      	bhi.n	800394e <_realloc_r+0x5a>
 8003928:	4621      	mov	r1, r4
 800392a:	4640      	mov	r0, r8
 800392c:	f7ff fc36 	bl	800319c <_malloc_r>
 8003930:	4605      	mov	r5, r0
 8003932:	2800      	cmp	r0, #0
 8003934:	d0ed      	beq.n	8003912 <_realloc_r+0x1e>
 8003936:	42bc      	cmp	r4, r7
 8003938:	4622      	mov	r2, r4
 800393a:	4631      	mov	r1, r6
 800393c:	bf28      	it	cs
 800393e:	463a      	movcs	r2, r7
 8003940:	f7ff ffca 	bl	80038d8 <memcpy>
 8003944:	4631      	mov	r1, r6
 8003946:	4640      	mov	r0, r8
 8003948:	f7ff fbbc 	bl	80030c4 <_free_r>
 800394c:	e7e1      	b.n	8003912 <_realloc_r+0x1e>
 800394e:	4635      	mov	r5, r6
 8003950:	e7df      	b.n	8003912 <_realloc_r+0x1e>

08003952 <_malloc_usable_size_r>:
 8003952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003956:	1f18      	subs	r0, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfbc      	itt	lt
 800395c:	580b      	ldrlt	r3, [r1, r0]
 800395e:	18c0      	addlt	r0, r0, r3
 8003960:	4770      	bx	lr
	...

08003964 <_init>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

08003970 <_fini>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr
