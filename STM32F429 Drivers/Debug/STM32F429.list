
STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001660  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800180c  0800180c  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800180c  0800180c  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  0800180c  0800180c  0001180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001814  08001814  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001814  08001814  00011814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001818  08001818  00011818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800181c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020198  2**0
                  CONTENTS
 10 .bss          00000090  20000198  20000198  00020198  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  00020198  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006041  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000f37  00000000  00000000  0002624c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000598  00000000  00000000  00027188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000401  00000000  00000000  00027720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002171  00000000  00000000  00027b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002849  00000000  00000000  00029c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0001657d  00000000  00000000  0002c4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000016d4  00000000  00000000  00042a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0004412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000198 	.word	0x20000198
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080017f4 	.word	0x080017f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000019c 	.word	0x2000019c
 80001e8:	080017f4 	.word	0x080017f4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <Can_Isr>:

extern Rcc_ConfigType rcc;
extern Can_ConfigType can1;


void Can_Isr (Can_MessageType* Receive_Message,u8 _ArrMessageData[EIGHT_VALUE],u8 Address_FilterIndex){
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71fb      	strb	r3, [r7, #7]


}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <main>:



int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	/********************************** It must *************************************/

	/* RCC PART */
	Rcc_enuInit(&rcc);
 8000508:	480f      	ldr	r0, [pc, #60]	; (8000548 <main+0x44>)
 800050a:	f000 ffeb 	bl	80014e4 <Rcc_enuInit>
	Gpio_enuEnableClockAllGPIOs();
 800050e:	f000 fc01 	bl	8000d14 <Gpio_enuEnableClockAllGPIOs>



	/* Interrupt Part */
	Scb_enuSetGroupPrioirty(SCB_SELECT_GROUP_PRIORITY_ZERO_AND_SUB_PRIORITY_16);
 8000512:	2007      	movs	r0, #7
 8000514:	f001 f894 	bl	8001640 <Scb_enuSetGroupPrioirty>



	Gpio_enuInit();
 8000518:	f000 faf2 	bl	8000b00 <Gpio_enuInit>
//


	/* CAN PART */

		Gpio_enuSetAF(GPIO_PINA11, GPIO_SELECT_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 800051c:	2109      	movs	r1, #9
 800051e:	200b      	movs	r0, #11
 8000520:	f000 fb9a 	bl	8000c58 <Gpio_enuSetAF>
		Gpio_enuSetAF(GPIO_PINA12, GPIO_SELECT_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 8000524:	2109      	movs	r1, #9
 8000526:	200c      	movs	r0, #12
 8000528:	f000 fb96 	bl	8000c58 <Gpio_enuSetAF>

		Can_enuSetCallbackRxFunctionFifox(CAN_RX_FIFO_MAIL_BOX_INDEX_0, Can_Isr);
 800052c:	4907      	ldr	r1, [pc, #28]	; (800054c <main+0x48>)
 800052e:	2000      	movs	r0, #0
 8000530:	f000 f8dc 	bl	80006ec <Can_enuSetCallbackRxFunctionFifox>
		Can_enuInit(&can1);
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x4c>)
 8000536:	f000 f80d 	bl	8000554 <Can_enuInit>
		Can_enuEnableRxInterruptFifox(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 f8b2 	bl	80006a4 <Can_enuEnableRxInterruptFifox>
		Nvic_enuEnableInterrupt(NVIC_CAN1_RX0);
 8000540:	2014      	movs	r0, #20
 8000542:	f000 fc23 	bl	8000d8c <Nvic_enuEnableInterrupt>

///////////////////////////////////////////////////////////////////////////////////////


	for(;;){
 8000546:	e7fe      	b.n	8000546 <main+0x42>
 8000548:	20000160 	.word	0x20000160
 800054c:	080004e9 	.word	0x080004e9
 8000550:	20000000 	.word	0x20000000

08000554 <Can_enuInit>:




/******************************* Software Interfaces Implementation *******************/
Can_StatusErrorType Can_enuInit(const Can_ConfigType* Address_Can){
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]
	if(NULL == Address_Can){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d102      	bne.n	800056c <Can_enuInit+0x18>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8000566:	2309      	movs	r3, #9
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e093      	b.n	8000694 <Can_enuInit+0x140>
	}
	else{
		/* Enable CAN1 Rcc Clock */
		Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTYFIVE_VALUE);
 800056c:	2119      	movs	r1, #25
 800056e:	2003      	movs	r0, #3
 8000570:	f000 feba 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
//		/* Enable CAN2 Rcc Clock */
//		Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTYSIX_VALUE);


		/* exit from sleep mode and enable init mode */
		Can_GoToInitMode();
 8000574:	4b4a      	ldr	r3, [pc, #296]	; (80006a0 <Can_enuInit+0x14c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a49      	ldr	r2, [pc, #292]	; (80006a0 <Can_enuInit+0x14c>)
 800057a:	f023 0302 	bic.w	r3, r3, #2
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b47      	ldr	r3, [pc, #284]	; (80006a0 <Can_enuInit+0x14c>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f9      	bne.n	8000580 <Can_enuInit+0x2c>
 800058c:	4b44      	ldr	r3, [pc, #272]	; (80006a0 <Can_enuInit+0x14c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a43      	ldr	r2, [pc, #268]	; (80006a0 <Can_enuInit+0x14c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <Can_enuInit+0x14c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d1f9      	bne.n	8000598 <Can_enuInit+0x44>

		/* Choose Tx Fifo Priority */
		Can_SelectTxFifoPriority(Address_Can->can_select_tx_fifo_priority);
 80005a4:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <Can_enuInit+0x14c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f023 0304 	bic.w	r3, r3, #4
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	0092      	lsls	r2, r2, #2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a3a      	ldr	r2, [pc, #232]	; (80006a0 <Can_enuInit+0x14c>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]


		/* Choose Rx Lock Mode */
		Can_SelectRxFifoLockMode(Address_Can->can_select_rx_lock_mode);
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <Can_enuInit+0x14c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f023 0308 	bic.w	r3, r3, #8
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7852      	ldrb	r2, [r2, #1]
 80005c6:	00d2      	lsls	r2, r2, #3
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <Can_enuInit+0x14c>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]

		/* enable/disable Retransmission Mode */
		Can_SelectRetransmissionAutomatic(Address_Can->can_select_retransmission_automatic);
 80005d0:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <Can_enuInit+0x14c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f023 0310 	bic.w	r3, r3, #16
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7892      	ldrb	r2, [r2, #2]
 80005dc:	0112      	lsls	r2, r2, #4
 80005de:	4611      	mov	r1, r2
 80005e0:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <Can_enuInit+0x14c>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6013      	str	r3, [r2, #0]

		/* enable/disable WakeUp During Sleep Mode */
		Can_SelectWakeupAutomatic(Address_Can->can_select_wakeup_automatic);
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <Can_enuInit+0x14c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f023 0320 	bic.w	r3, r3, #32
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	78d2      	ldrb	r2, [r2, #3]
 80005f2:	0152      	lsls	r2, r2, #5
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <Can_enuInit+0x14c>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	6013      	str	r3, [r2, #0]

		/* enable/disable Bus Off Left Automatically Mode */
		Can_SelectBackFromBusOffStateAutomatic(Address_Can->can_select_back_from_bus_off_state_automatic);
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <Can_enuInit+0x14c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	0192      	lsls	r2, r2, #6
 800060a:	4611      	mov	r1, r2
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <Can_enuInit+0x14c>)
 800060e:	430b      	orrs	r3, r1
 8000610:	6013      	str	r3, [r2, #0]

		/* enable/disable Time Trigger Communciation Mode */
		Can_SelectTimeTriggerCommunicationMode(Address_Can->can_select_time_trigger_communcation_mode);
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <Can_enuInit+0x14c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7952      	ldrb	r2, [r2, #5]
 800061e:	01d2      	lsls	r2, r2, #7
 8000620:	4611      	mov	r1, r2
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <Can_enuInit+0x14c>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6013      	str	r3, [r2, #0]


		/* enable/disable CAN during Debugging Mode */
		Can_SelectDuringDebugModeCanWorking(Address_Can->can_select_during_debug_mode_can_working);
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <Can_enuInit+0x14c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4611      	mov	r1, r2
 8000638:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <Can_enuInit+0x14c>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]

		/* Select Node Mode */
		Can_SelectNodeMode(Address_Can->can_select_node_mode);
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <Can_enuInit+0x14c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	79d2      	ldrb	r2, [r2, #7]
 800064a:	0792      	lsls	r2, r2, #30
 800064c:	4611      	mov	r1, r2
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <Can_enuInit+0x14c>)
 8000650:	430b      	orrs	r3, r1
 8000652:	61d3      	str	r3, [r2, #28]


		/* Set Bit Time Calculation,, http://www.bittiming.can-wiki.info/ */
		Can_SetBitTimeCalulation(Address_Can->can_bit_time_calculation);
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <Can_enuInit+0x14c>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000664:	490e      	ldr	r1, [pc, #56]	; (80006a0 <Can_enuInit+0x14c>)
 8000666:	4313      	orrs	r3, r2
 8000668:	61cb      	str	r3, [r1, #28]

		/* Exit From Init Mode */
		Can_GoOutFromInitMode();
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <Can_enuInit+0x14c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <Can_enuInit+0x14c>)
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <Can_enuInit+0x14c>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f9      	bne.n	8000676 <Can_enuInit+0x122>

		while( READ_BIT(CAN_1->CAN_MSR,ZERO_VALUE) ==ONE_VALUE );
 8000682:	bf00      	nop
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <Can_enuInit+0x14c>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b01      	cmp	r3, #1
 800068e:	d0f9      	beq.n	8000684 <Can_enuInit+0x130>

//		/* It's Used for Filters Configuration */
//		GlobalStatic_u8NumberOfCan1Fitlers = Address_Can->can_number_of_can1_filters_1_to_28;

		/* Filter Init */
		(void)enuFiltersInit();
 8000690:	f000 f848 	bl	8000724 <enuFiltersInit>

	}

	return Loc_enuCanStatusError;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40006400 	.word	0x40006400

080006a4 <Can_enuEnableRxInterruptFifox>:
	return Loc_enuCanStatusError;
}



Can_StatusErrorType Can_enuEnableRxInterruptFifox(Can_RxFifoMailBoxIndexType Copy_enuFifoIndex){
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	Can_StatusErrorType Loc_enuCanStatusError= CAN_STATUS_OK;;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]

	/* Enable Interrupt */
	Can_EnableRxInterruptFifoMailBox_x(Copy_enuFifoIndex);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <Can_enuEnableRxInterruptFifox+0x44>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	bf0c      	ite	eq
 80006bc:	2201      	moveq	r2, #1
 80006be:	2200      	movne	r2, #0
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	4611      	mov	r1, r2
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	440a      	add	r2, r1
 80006ca:	2101      	movs	r1, #1
 80006cc:	fa01 f202 	lsl.w	r2, r1, r2
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <Can_enuEnableRxInterruptFifox+0x44>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	6153      	str	r3, [r2, #20]

	return Loc_enuCanStatusError;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40006400 	.word	0x40006400

080006ec <Can_enuSetCallbackRxFunctionFifox>:
	Can_DisableRxInterruptFifoMailBox_x(Copy_enuFifoIndex);

	return Loc_enuCanStatusError;
}

Can_StatusErrorType Can_enuSetCallbackRxFunctionFifox(Can_RxFifoMailBoxIndexType Copy_enuFifoIndex,void (*callback)(Can_MessageType* Address_Message,u8 _ArrMessageData[EIGHT_VALUE],u8 Address_FilterIndex)){
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]

		Can_StatusErrorType Loc_enuCanStatusError= CAN_STATUS_OK;;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]

		if( NULL == callback ){
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <Can_enuSetCallbackRxFunctionFifox+0x1c>
			Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8000702:	2309      	movs	r3, #9
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e004      	b.n	8000712 <Can_enuSetCallbackRxFunctionFifox+0x26>
			}
			else{
				Can_RxInterruptHandler[Copy_enuFifoIndex] =callback;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4905      	ldr	r1, [pc, #20]	; (8000720 <Can_enuSetCallbackRxFunctionFifox+0x34>)
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		return Loc_enuCanStatusError;
 8000712:	7bfb      	ldrb	r3, [r7, #15]

}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	200001b4 	.word	0x200001b4

08000724 <enuFiltersInit>:



/**************************** Private Software Interface Implementation **************/

static Can_StatusErrorType enuFiltersInit(void){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]

	/* Start Filter Init Mode	 */
	Can_GoToFilterInitMode();
 800072e:	4b8a      	ldr	r3, [pc, #552]	; (8000958 <enuFiltersInit+0x234>)
 8000730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000734:	4a88      	ldr	r2, [pc, #544]	; (8000958 <enuFiltersInit+0x234>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* Set Number Of Can1 Filters */
	Can_SetNumberOfCan1Filters(NUMBER_OF_CAN1_FILTERS);
 800073e:	4b86      	ldr	r3, [pc, #536]	; (8000958 <enuFiltersInit+0x234>)
 8000740:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000744:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000748:	4a83      	ldr	r2, [pc, #524]	; (8000958 <enuFiltersInit+0x234>)
 800074a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800074e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	 * 2- scale
	 * 3- reg1 value
	 * 4- reg2 value
	 * 5- Which Fifo Index
	 */
	Filter_concat(FILTER27_CONFG, FILTER26_CONFG, FILTER25_CONFG, FILTER24_CONFG, FILTER23_CONFG, FILTER22_CONFG,
 8000752:	4b81      	ldr	r3, [pc, #516]	; (8000958 <enuFiltersInit+0x234>)
 8000754:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000758:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800075c:	4b7e      	ldr	r3, [pc, #504]	; (8000958 <enuFiltersInit+0x234>)
 800075e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8000766:	4b7c      	ldr	r3, [pc, #496]	; (8000958 <enuFiltersInit+0x234>)
 8000768:	2200      	movs	r2, #0
 800076a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800076e:	4b7a      	ldr	r3, [pc, #488]	; (8000958 <enuFiltersInit+0x234>)
 8000770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000774:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8000778:	4b77      	ldr	r3, [pc, #476]	; (8000958 <enuFiltersInit+0x234>)
 800077a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800077e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000782:	4b75      	ldr	r3, [pc, #468]	; (8000958 <enuFiltersInit+0x234>)
 8000784:	2200      	movs	r2, #0
 8000786:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 800078a:	4b73      	ldr	r3, [pc, #460]	; (8000958 <enuFiltersInit+0x234>)
 800078c:	2200      	movs	r2, #0
 800078e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8000792:	4b71      	ldr	r3, [pc, #452]	; (8000958 <enuFiltersInit+0x234>)
 8000794:	2200      	movs	r2, #0
 8000796:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800079a:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <enuFiltersInit+0x234>)
 800079c:	2200      	movs	r2, #0
 800079e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80007a2:	4b6d      	ldr	r3, [pc, #436]	; (8000958 <enuFiltersInit+0x234>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 80007aa:	4b6b      	ldr	r3, [pc, #428]	; (8000958 <enuFiltersInit+0x234>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 80007b2:	4b69      	ldr	r3, [pc, #420]	; (8000958 <enuFiltersInit+0x234>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80007ba:	4b67      	ldr	r3, [pc, #412]	; (8000958 <enuFiltersInit+0x234>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 80007c2:	4b65      	ldr	r3, [pc, #404]	; (8000958 <enuFiltersInit+0x234>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 80007ca:	4b63      	ldr	r3, [pc, #396]	; (8000958 <enuFiltersInit+0x234>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 80007d2:	4b61      	ldr	r3, [pc, #388]	; (8000958 <enuFiltersInit+0x234>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 80007da:	4b5f      	ldr	r3, [pc, #380]	; (8000958 <enuFiltersInit+0x234>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 80007e2:	4b5d      	ldr	r3, [pc, #372]	; (8000958 <enuFiltersInit+0x234>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 80007ea:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <enuFiltersInit+0x234>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 80007f2:	4b59      	ldr	r3, [pc, #356]	; (8000958 <enuFiltersInit+0x234>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 80007fa:	4b57      	ldr	r3, [pc, #348]	; (8000958 <enuFiltersInit+0x234>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8000802:	4b55      	ldr	r3, [pc, #340]	; (8000958 <enuFiltersInit+0x234>)
 8000804:	2200      	movs	r2, #0
 8000806:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800080a:	4b53      	ldr	r3, [pc, #332]	; (8000958 <enuFiltersInit+0x234>)
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8000812:	4b51      	ldr	r3, [pc, #324]	; (8000958 <enuFiltersInit+0x234>)
 8000814:	2200      	movs	r2, #0
 8000816:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 800081a:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <enuFiltersInit+0x234>)
 800081c:	2200      	movs	r2, #0
 800081e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8000822:	4b4d      	ldr	r3, [pc, #308]	; (8000958 <enuFiltersInit+0x234>)
 8000824:	2200      	movs	r2, #0
 8000826:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800082a:	4b4b      	ldr	r3, [pc, #300]	; (8000958 <enuFiltersInit+0x234>)
 800082c:	2200      	movs	r2, #0
 800082e:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8000832:	4b49      	ldr	r3, [pc, #292]	; (8000958 <enuFiltersInit+0x234>)
 8000834:	2200      	movs	r2, #0
 8000836:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 800083a:	4b47      	ldr	r3, [pc, #284]	; (8000958 <enuFiltersInit+0x234>)
 800083c:	2200      	movs	r2, #0
 800083e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8000842:	4b45      	ldr	r3, [pc, #276]	; (8000958 <enuFiltersInit+0x234>)
 8000844:	2200      	movs	r2, #0
 8000846:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <enuFiltersInit+0x234>)
 800084c:	2200      	movs	r2, #0
 800084e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <enuFiltersInit+0x234>)
 8000854:	2200      	movs	r2, #0
 8000856:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 800085a:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <enuFiltersInit+0x234>)
 800085c:	2200      	movs	r2, #0
 800085e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <enuFiltersInit+0x234>)
 8000864:	2200      	movs	r2, #0
 8000866:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <enuFiltersInit+0x234>)
 800086c:	2200      	movs	r2, #0
 800086e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8000872:	4b39      	ldr	r3, [pc, #228]	; (8000958 <enuFiltersInit+0x234>)
 8000874:	2200      	movs	r2, #0
 8000876:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <enuFiltersInit+0x234>)
 800087c:	2200      	movs	r2, #0
 800087e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <enuFiltersInit+0x234>)
 8000884:	2200      	movs	r2, #0
 8000886:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <enuFiltersInit+0x234>)
 800088c:	2200      	movs	r2, #0
 800088e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <enuFiltersInit+0x234>)
 8000894:	2200      	movs	r2, #0
 8000896:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <enuFiltersInit+0x234>)
 800089c:	2200      	movs	r2, #0
 800089e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <enuFiltersInit+0x234>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <enuFiltersInit+0x234>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <enuFiltersInit+0x234>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <enuFiltersInit+0x234>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <enuFiltersInit+0x234>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <enuFiltersInit+0x234>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <enuFiltersInit+0x234>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <enuFiltersInit+0x234>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <enuFiltersInit+0x234>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <enuFiltersInit+0x234>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <enuFiltersInit+0x234>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <enuFiltersInit+0x234>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <enuFiltersInit+0x234>)
 8000904:	2200      	movs	r2, #0
 8000906:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <enuFiltersInit+0x234>)
 800090c:	2200      	movs	r2, #0
 800090e:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <enuFiltersInit+0x234>)
 8000914:	2200      	movs	r2, #0
 8000916:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <enuFiltersInit+0x234>)
 800091c:	2200      	movs	r2, #0
 800091e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <enuFiltersInit+0x234>)
 8000924:	2200      	movs	r2, #0
 8000926:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <enuFiltersInit+0x234>)
 800092c:	2200      	movs	r2, #0
 800092e:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <enuFiltersInit+0x234>)
 8000934:	2201      	movs	r2, #1
 8000936:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			FILTER3_CONFG, FILTER2_CONFG, FILTER1_CONFG, FILTER0_CONFG
						);


	/* Go to Normal Mode */
	Can_GoOutFromFilterInitMode();
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <enuFiltersInit+0x234>)
 800093c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <enuFiltersInit+0x234>)
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200


	return Loc_enuCanStatusError;
 800094a:	79fb      	ldrb	r3, [r7, #7]
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40006400 	.word	0x40006400

0800095c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler(void){
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
	Can_MessageType Loc_ReceivedMessage;
	u8 Loc_ReceivedDataArr[EIGHT_VALUE];
	u8 Loc_u8FilterIndex;

	/* Get DLC of Message */
	Loc_ReceivedMessage.can_DLC_FROM_0_TO_8 = Can_GetDLCinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 8000964:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	b2db      	uxtb	r3, r3
 8000970:	723b      	strb	r3, [r7, #8]


	/* Get EXID of Message */
	Loc_ReceivedMessage.can_extended_id_remaining_18_bit = Can_GetExtendedIDinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 8000974:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800097e:	60fb      	str	r3, [r7, #12]


	/* Get IDE of Message */
	Loc_ReceivedMessage.can_select_ide_mode = Can_GetIDEinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 8000982:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	743b      	strb	r3, [r7, #16]

	/* Get RTR of Message */
	Loc_ReceivedMessage.can_select_rtr_mode = Can_GetRTRinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 8000994:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	747b      	strb	r3, [r7, #17]

	/* Get Standard ID of Message */
	Loc_ReceivedMessage.can_standard_id_11_bit = Can_GetStandardIDinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 80009a6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80009aa:	0d5b      	lsrs	r3, r3, #21
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	817b      	strh	r3, [r7, #10]


	/* Get The Data */
	Can_GetDataMessaginFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0,Loc_ReceivedDataArr);
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 80009b8:	463b      	mov	r3, r7
 80009ba:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 80009c2:	463b      	mov	r3, r7
 80009c4:	3304      	adds	r3, #4
 80009c6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80009ca:	601a      	str	r2, [r3, #0]

	/* Get Filter Index*/
	Loc_u8FilterIndex = Can_GetFilterIndexFifox(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 80009ce:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	75fb      	strb	r3, [r7, #23]

	Can_RxInterruptHandler[CAN_RX_FIFO_MAIL_BOX_INDEX_0](&Loc_ReceivedMessage,Loc_ReceivedDataArr,Loc_u8FilterIndex);
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <CAN1_RX0_IRQHandler+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	7dfa      	ldrb	r2, [r7, #23]
 80009dc:	4639      	mov	r1, r7
 80009de:	f107 0008 	add.w	r0, r7, #8
 80009e2:	4798      	blx	r3

	/* Relase/Clear The flag The Message */
	Can_RelaseFIFOxMailBox(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <CAN1_RX0_IRQHandler+0x9c>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	60d3      	str	r3, [r2, #12]

}
 80009f0:	bf00      	nop
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40006400 	.word	0x40006400
 80009fc:	200001b4 	.word	0x200001b4

08000a00 <FLASH_IRQHandler>:


/**************************** Private Software Interface Implementation **************/


void FLASH_IRQHandler(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

	/* Error Part FIrst */

	if(Flash_IsOperationErrorHappended() == ONE_VALUE){
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d155      	bne.n	8000abe <FLASH_IRQHandler+0xbe>

		/* Which Error */
		if(Flash_IsProgramAlignmentErrorHappended() == ONE_VALUE ){
 8000a12:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10c      	bne.n	8000a3a <FLASH_IRQHandler+0x3a>

			if( Flash_ErrorInterruptHandler[FLASH_PROGRAM_ALIGNEMNT_ERROR_INDEx] != NULL){
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <FLASH_IRQHandler+0x2e>
			Flash_ErrorInterruptHandler[FLASH_PROGRAM_ALIGNEMNT_ERROR_INDEx]();
 8000a28:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4798      	blx	r3
			}

			/* Clear Flag */
			Flash_ClearProgramAlignmentErrorFlag();
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a34:	f043 0320 	orr.w	r3, r3, #32
 8000a38:	60d3      	str	r3, [r2, #12]

		}

		if(Flash_IsProgramParallelismErrorHappended() == ONE_VALUE){
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	099b      	lsrs	r3, r3, #6
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10c      	bne.n	8000a62 <FLASH_IRQHandler+0x62>

			if( Flash_ErrorInterruptHandler[FLASH_PROGRAM_PARALLELISM_ERROR_INDEx] != NULL){
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <FLASH_IRQHandler+0x56>

				Flash_ErrorInterruptHandler[FLASH_PROGRAM_PARALLELISM_ERROR_INDEx]();
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4798      	blx	r3
			}
			/* Clear Flag */
			Flash_ClearProgramParallelismErrorFlag();
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	60d3      	str	r3, [r2, #12]

		}

		if(Flash_IsProgramSequenceErrorHappended() == ONE_VALUE){
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	09db      	lsrs	r3, r3, #7
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d10c      	bne.n	8000a8a <FLASH_IRQHandler+0x8a>

			if( Flash_ErrorInterruptHandler[FLASH_PROGRAM_SEQUANCE_ERROR_INDEx] != NULL){
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <FLASH_IRQHandler+0x7e>

			Flash_ErrorInterruptHandler[FLASH_PROGRAM_SEQUANCE_ERROR_INDEx]();
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4798      	blx	r3
			}
			/* Clear Flag */
			Flash_ClearProgramSequenceErrorFlag();
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	60d3      	str	r3, [r2, #12]

		}

		if(Flash_IsWriteProtoectionErrorHappended() == ONE_VALUE){
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10c      	bne.n	8000ab2 <FLASH_IRQHandler+0xb2>

			if( Flash_ErrorInterruptHandler[FLASH_WRITE_PROTECTION_ERROR_INDEX] != NULL){
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <FLASH_IRQHandler+0xa6>

			Flash_ErrorInterruptHandler[FLASH_WRITE_PROTECTION_ERROR_INDEX]();
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <FLASH_IRQHandler+0xf8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4798      	blx	r3

			}
			/* Clear Flag */
			Flash_ClearWriteProtoectionErrorFlag();
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	60d3      	str	r3, [r2, #12]

		}

		Flash_ClearOperationErrorFlag();
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	60d3      	str	r3, [r2, #12]
	}



	/* End Of Operation Part */
	if(Flash_IsEndOfOperationrHappended() == ONE_VALUE){
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d112      	bne.n	8000af0 <FLASH_IRQHandler+0xf0>

			if(Flash_EndOfOperationInterruptHandler != NULL){
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <FLASH_IRQHandler+0xfc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <FLASH_IRQHandler+0xd8>
				Flash_EndOfOperationInterruptHandler();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <FLASH_IRQHandler+0xfc>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4798      	blx	r3

			}

				/* Clear Flag */
				Flash_ClearProgramAlignmentErrorFlag();
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000ade:	f043 0320 	orr.w	r3, r3, #32
 8000ae2:	60d3      	str	r3, [r2, #12]


			Flash_ClearEndOfOperationrFlag();
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a02      	ldr	r2, [pc, #8]	; (8000af4 <FLASH_IRQHandler+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	60d3      	str	r3, [r2, #12]

	}


}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023c00 	.word	0x40023c00
 8000af8:	200001bc 	.word	0x200001bc
 8000afc:	200001cc 	.word	0x200001cc

08000b00 <Gpio_enuInit>:

/********************************** Macros Function Declarations *********************/


/******************************* Software Interfaces Implementation *******************/
Gpio_StatusErrorType Gpio_enuInit(void){
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000b06:	2301      	movs	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]

	Gpio_concat(
 8000b0a:	4b4a      	ldr	r3, [pc, #296]	; (8000c34 <Gpio_enuInit+0x134>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <Gpio_enuInit+0x138>)
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <Gpio_enuInit+0x140>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <Gpio_enuInit+0x144>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <Gpio_enuInit+0x148>)
 8000b2c:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel1_PINA1,
	    GPIO_u8PinChannel0_PINA0 // End with the lowest channel
	);


	Gpio_concat(
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <Gpio_enuInit+0x134>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <Gpio_enuInit+0x14c>)
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	4b40      	ldr	r3, [pc, #256]	; (8000c40 <Gpio_enuInit+0x140>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	4b3f      	ldr	r3, [pc, #252]	; (8000c44 <Gpio_enuInit+0x144>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b4e:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel17_PINB1,  // Corresponds to pin B1
	    GPIO_u8PinChannel16_PINB0   // Corresponds to pin B0, which is indicated as 16
	);


	Gpio_concat(
 8000b50:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <Gpio_enuInit+0x134>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <Gpio_enuInit+0x150>)
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <Gpio_enuInit+0x140>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <Gpio_enuInit+0x144>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b70:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel35_PINC3,  // Corresponds to pin C3
	    GPIO_u8PinChannel34_PINC2,  // Corresponds to pin C2
	    GPIO_u8PinChannel33_PINC1,  // Corresponds to pin C1
	    GPIO_u8PinChannel32_PINC0   // Corresponds to pin C0, which is indicated as 32
	);
	Gpio_concat(
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <Gpio_enuInit+0x134>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	4a37      	ldr	r2, [pc, #220]	; (8000c54 <Gpio_enuInit+0x154>)
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <Gpio_enuInit+0x140>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <Gpio_enuInit+0x144>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b92:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel49_PIND1,  // Corresponds to pin D1
	    GPIO_u8PinChannel48_PIND0   // Corresponds to pin D0, which is indicated as 48
	);


	Gpio_concat(
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <Gpio_enuInit+0x134>)
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <Gpio_enuInit+0x140>)
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <Gpio_enuInit+0x144>)
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000bb6:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel67_PINE3,  // Corresponds to pin E3
	    GPIO_u8PinChannel66_PINE2,  // Corresponds to pin E2
	    GPIO_u8PinChannel65_PINE1,  // Corresponds to pin E1
	    GPIO_u8PinChannel64_PINE0   // Corresponds to pin E0, starting from 64
	);
	Gpio_concat(
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <Gpio_enuInit+0x134>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <Gpio_enuInit+0x140>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <Gpio_enuInit+0x144>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000bda:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel83_PINF3,  // Corresponds to pin F3
	    GPIO_u8PinChannel82_PINF2,  // Corresponds to pin F2
	    GPIO_u8PinChannel81_PINF1,  // Corresponds to pin F1
	    GPIO_u8PinChannel80_PINF0   // Corresponds to pin F0, starting from 80
	);
	Gpio_concat(
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <Gpio_enuInit+0x134>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <Gpio_enuInit+0x140>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <Gpio_enuInit+0x144>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000bfe:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel96_PING0    // Corresponds to pin G0, starting from 96
	);



	Gpio_concat(
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <Gpio_enuInit+0x134>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <Gpio_enuInit+0x13c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <Gpio_enuInit+0x140>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <Gpio_enuInit+0x144>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000c22:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel113_PINH1,  // Corresponds to pin H1
	    GPIO_u8PinChannel112_PINH0   // Corresponds to pin H0, starting from 112
	);


	return Loc_enuGpioStatusError;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000000c 	.word	0x2000000c
 8000c38:	aaa95555 	.word	0xaaa95555
 8000c3c:	2000002c 	.word	0x2000002c
 8000c40:	2000004c 	.word	0x2000004c
 8000c44:	2000006c 	.word	0x2000006c
 8000c48:	01555555 	.word	0x01555555
 8000c4c:	5555a555 	.word	0x5555a555
 8000c50:	55595555 	.word	0x55595555
 8000c54:	5555555a 	.word	0x5555555a

08000c58 <Gpio_enuSetAF>:
		}

			return Loc_enuGpioStatusError;
}

Gpio_StatusErrorType Gpio_enuSetAF(u8 Copy_u8ChannelId,Gpio_SelectAFType Copy_enuAF){
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	737b      	strb	r3, [r7, #13]
		u8 Loc_u8TempPinNumber =Loc_u8PinNumber %EIGHT_VALUE;   // from 0 to 7
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	733b      	strb	r3, [r7, #12]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d902      	bls.n	8000c8e <Gpio_enuSetAF+0x36>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e037      	b.n	8000cfe <Gpio_enuSetAF+0xa6>
		}


			else{

				if(Loc_u8PinNumber<EIGHT_VALUE){
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d81a      	bhi.n	8000cca <Gpio_enuSetAF+0x72>
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <Gpio_enuSetAF+0xb4>)
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	7bba      	ldrb	r2, [r7, #14]
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	43d2      	mvns	r2, r2
 8000caa:	401a      	ands	r2, r3
												((Copy_enuAF & 0xF ) <<(Loc_u8PinNumber*FOUR_VALUE));
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	f003 010f 	and.w	r1, r3, #15
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	4618      	mov	r0, r3
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8000cbc:	7b7b      	ldrb	r3, [r7, #13]
 8000cbe:	4913      	ldr	r1, [pc, #76]	; (8000d0c <Gpio_enuSetAF+0xb4>)
 8000cc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cc4:	4302      	orrs	r2, r0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	e019      	b.n	8000cfe <Gpio_enuSetAF+0xa6>

				}
				else{
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 8000cca:	7b7b      	ldrb	r3, [r7, #13]
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <Gpio_enuSetAF+0xb8>)
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	7b3a      	ldrb	r2, [r7, #12]
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	210f      	movs	r1, #15
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	43d2      	mvns	r2, r2
 8000ce0:	401a      	ands	r2, r3
																	((Copy_enuAF & 0xF ) <<(Loc_u8TempPinNumber*FOUR_VALUE));
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
 8000ce4:	f003 010f 	and.w	r1, r3, #15
 8000ce8:	7b3b      	ldrb	r3, [r7, #12]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4618      	mov	r0, r3
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	4906      	ldr	r1, [pc, #24]	; (8000d10 <Gpio_enuSetAF+0xb8>)
 8000cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	601a      	str	r2, [r3, #0]
				}
		}

			return Loc_enuGpioStatusError;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	200000ac 	.word	0x200000ac

08000d14 <Gpio_enuEnableClockAllGPIOs>:

		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuEnableClockAllGPIOs(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
	volatile Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71bb      	strb	r3, [r7, #6]

	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTA);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 fadf 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTB);
 8000d2e:	2101      	movs	r1, #1
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 fad9 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d36:	4603      	mov	r3, r0
 8000d38:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTC);
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 fad3 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d42:	4603      	mov	r3, r0
 8000d44:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTD);
 8000d46:	2103      	movs	r1, #3
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 facd 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTE);
 8000d52:	2104      	movs	r1, #4
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 fac7 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTF);
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 fac1 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d66:	4603      	mov	r3, r0
 8000d68:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTH);
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 fabb 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTG);
 8000d76:	2106      	movs	r1, #6
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 fab5 	bl	80012e8 <Rcc_enuEnablePeripheralClk>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71bb      	strb	r3, [r7, #6]



	return Loc_enuGpioStatusError;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Nvic_enuEnableInterrupt>:



/******************************* Software Interfaces Implementation *******************/

Nvic_ErrorStatusType Nvic_enuEnableInterrupt(Nvic_IndexPeripheralType Copy_NvicIndex){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	Nvic_ErrorStatusType Loc_NvicErrorStatus = NVIC_STATUS_OK;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8RegNumber = Copy_NvicIndex/THIRTYTWO_VALUE;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	095b      	lsrs	r3, r3, #5
 8000d9e:	73bb      	strb	r3, [r7, #14]
	u8 Loc_u8BitNumber = Copy_NvicIndex%THIRTYTWO_VALUE;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	737b      	strb	r3, [r7, #13]

	SET_BIT(*GlobalStatic_NvicIsrEnableArr[Loc_u8RegNumber], Loc_u8BitNumber);
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <Nvic_enuEnableInterrupt+0x4c>)
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	7b7b      	ldrb	r3, [r7, #13]
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	4906      	ldr	r1, [pc, #24]	; (8000dd8 <Nvic_enuEnableInterrupt+0x4c>)
 8000dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dc4:	4302      	orrs	r2, r0
 8000dc6:	601a      	str	r2, [r3, #0]


	return Loc_NvicErrorStatus;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000cc 	.word	0x200000cc

08000ddc <Rcc_enuEnableClock>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuEnableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8CounterTimeOut = 240;
 8000dea:	23f0      	movs	r3, #240	; 0xf0
 8000dec:	73bb      	strb	r3, [r7, #14]
	switch (Copy_enuClockSourceIndex){
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d876      	bhi.n	8000ee2 <Rcc_enuEnableClock+0x106>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <Rcc_enuEnableClock+0x20>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e11 	.word	0x08000e11
 8000e00:	08000e3b 	.word	0x08000e3b
 8000e04:	08000e65 	.word	0x08000e65
 8000e08:	08000e8f 	.word	0x08000e8f
 8000e0c:	08000eb9 	.word	0x08000eb9

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_enableHSI();
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e1c:	e002      	b.n	8000e24 <Rcc_enuEnableClock+0x48>
			Loc_u8CounterTimeOut--;
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d05a      	beq.n	8000ee8 <Rcc_enuEnableClock+0x10c>
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f2      	bne.n	8000e1e <Rcc_enuEnableClock+0x42>
		}

		break;
 8000e38:	e056      	b.n	8000ee8 <Rcc_enuEnableClock+0x10c>
	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_enableHSE();
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a35      	ldr	r2, [pc, #212]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e46:	e002      	b.n	8000e4e <Rcc_enuEnableClock+0x72>
			Loc_u8CounterTimeOut--;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0c5b      	lsrs	r3, r3, #17
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d047      	beq.n	8000eec <Rcc_enuEnableClock+0x110>
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f2      	bne.n	8000e48 <Rcc_enuEnableClock+0x6c>
		}
		break;
 8000e62:	e043      	b.n	8000eec <Rcc_enuEnableClock+0x110>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_enablePLL();
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e6e:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e70:	e002      	b.n	8000e78 <Rcc_enuEnableClock+0x9c>
			Loc_u8CounterTimeOut--;
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e78:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0e5b      	lsrs	r3, r3, #25
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d034      	beq.n	8000ef0 <Rcc_enuEnableClock+0x114>
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f2      	bne.n	8000e72 <Rcc_enuEnableClock+0x96>
		}
		break;
 8000e8c:	e030      	b.n	8000ef0 <Rcc_enuEnableClock+0x114>


	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_enablePLLI2S();
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000e94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e98:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000e9a:	e002      	b.n	8000ea2 <Rcc_enuEnableClock+0xc6>
			Loc_u8CounterTimeOut--;
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	0edb      	lsrs	r3, r3, #27
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d021      	beq.n	8000ef4 <Rcc_enuEnableClock+0x118>
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f2      	bne.n	8000e9c <Rcc_enuEnableClock+0xc0>
		}
		break;
 8000eb6:	e01d      	b.n	8000ef4 <Rcc_enuEnableClock+0x118>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_enablePLLSAI();
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000ec4:	e002      	b.n	8000ecc <Rcc_enuEnableClock+0xf0>
			Loc_u8CounterTimeOut--;
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <Rcc_enuEnableClock+0x138>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0f5b      	lsrs	r3, r3, #29
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d00e      	beq.n	8000ef8 <Rcc_enuEnableClock+0x11c>
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f2      	bne.n	8000ec6 <Rcc_enuEnableClock+0xea>
		}
		break;
 8000ee0:	e00a      	b.n	8000ef8 <Rcc_enuEnableClock+0x11c>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e008      	b.n	8000efa <Rcc_enuEnableClock+0x11e>
		break;
 8000ee8:	bf00      	nop
 8000eea:	e006      	b.n	8000efa <Rcc_enuEnableClock+0x11e>
		break;
 8000eec:	bf00      	nop
 8000eee:	e004      	b.n	8000efa <Rcc_enuEnableClock+0x11e>
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e002      	b.n	8000efa <Rcc_enuEnableClock+0x11e>
		break;
 8000ef4:	bf00      	nop
 8000ef6:	e000      	b.n	8000efa <Rcc_enuEnableClock+0x11e>
		break;
 8000ef8:	bf00      	nop
	}

	if(Loc_u8CounterTimeOut == ZERO_VALUE)
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <Rcc_enuEnableClock+0x128>
		Loc_enuRccStatusError = RCC_STATUS_TIME_OUT_FLAG;
 8000f00:	2304      	movs	r3, #4
 8000f02:	73fb      	strb	r3, [r7, #15]

	return Loc_enuRccStatusError;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <Rcc_enuDisableClock>:

Rcc_StatusErrorType Rcc_enuDisableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]


	switch (Copy_enuClockSourceIndex){
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d830      	bhi.n	8000f8e <Rcc_enuDisableClock+0x76>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <Rcc_enuDisableClock+0x1c>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f49 	.word	0x08000f49
 8000f38:	08000f57 	.word	0x08000f57
 8000f3c:	08000f65 	.word	0x08000f65
 8000f40:	08000f73 	.word	0x08000f73
 8000f44:	08000f81 	.word	0x08000f81

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_disableHSI();
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f4e:	f023 0301 	bic.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
		break;
 8000f54:	e01d      	b.n	8000f92 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_disableHSE();
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
		break;
 8000f62:	e016      	b.n	8000f92 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_disablePLL();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f6e:	6013      	str	r3, [r2, #0]
		break;
 8000f70:	e00f      	b.n	8000f92 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_disablePLLI2S();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f7c:	6013      	str	r3, [r2, #0]
		break;
 8000f7e:	e008      	b.n	8000f92 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_disablePLLSAI();
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <Rcc_enuDisableClock+0x88>)
 8000f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6013      	str	r3, [r2, #0]

		break;
 8000f8c:	e001      	b.n	8000f92 <Rcc_enuDisableClock+0x7a>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	73fb      	strb	r3, [r7, #15]
	}


	return Loc_enuRccStatusError;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <Rcc_enuConfigPLL>:


Rcc_StatusErrorType Rcc_enuConfigPLL(const Rcc_PllConfigType* Address_Pll){
 8000fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa8:	b08b      	sub	sp, #44	; 0x2c
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	61f8      	str	r0, [r7, #28]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(Address_Pll == NULL){
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <Rcc_enuConfigPLL+0x1e>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fc0:	e09e      	b.n	8001100 <Rcc_enuConfigPLL+0x15c>
	}
	else{
		RCC_setPLL_M_Factor(Address_Pll->rcc_PLL_M_From2To63);
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f023 011f 	bic.w	r1, r3, #31
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	799b      	ldrb	r3, [r3, #6]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	4a4f      	ldr	r2, [pc, #316]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_M = Address_Pll->rcc_PLL_M_From2To63;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	799b      	ldrb	r3, [r3, #6]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <Rcc_enuConfigPLL+0x170>)
 8000fe0:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_N_Factor(Address_Pll->rcc_PLL_N_From50To432);
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 517f 	bic.w	r1, r3, #16320	; 0x3fc0
 8000fea:	f021 0120 	bic.w	r1, r1, #32
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	4a44      	ldr	r2, [pc, #272]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_N = Address_Pll->rcc_PLL_N_From50To432;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	889b      	ldrh	r3, [r3, #4]
 8001006:	4a44      	ldr	r2, [pc, #272]	; (8001118 <Rcc_enuConfigPLL+0x174>)
 8001008:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_P_Factor(Address_Pll->rcc_select_pllp);
 800100a:	4b41      	ldr	r3, [pc, #260]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800101c:	4a3c      	ldr	r2, [pc, #240]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 800101e:	430b      	orrs	r3, r1
 8001020:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_P = Address_Pll->rcc_select_pllp*TWO_VALUE+TWO_VALUE; // y = 2x+2
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	3301      	adds	r3, #1
 8001028:	b29b      	uxth	r3, r3
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	b29b      	uxth	r3, r3
 800102e:	4a3b      	ldr	r2, [pc, #236]	; (800111c <Rcc_enuConfigPLL+0x178>)
 8001030:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_Q_Factor(Address_Pll->rcc_select_pllq);
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	061b      	lsls	r3, r3, #24
 8001040:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001044:	4a32      	ldr	r2, [pc, #200]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8001046:	430b      	orrs	r3, r1
 8001048:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_Q = Address_Pll->rcc_select_pllq;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	b29b      	uxth	r3, r3
 8001050:	4a33      	ldr	r2, [pc, #204]	; (8001120 <Rcc_enuConfigPLL+0x17c>)
 8001052:	8013      	strh	r3, [r2, #0]

		RCC_setPLLClk(Address_Pll->rcc_select_pll_source);
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	059b      	lsls	r3, r3, #22
 8001062:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <Rcc_enuConfigPLL+0x16c>)
 8001064:	430b      	orrs	r3, r1
 8001066:	6053      	str	r3, [r2, #4]
		Global_u64StaticPLL_Freq = !(Address_Pll->rcc_select_pll_source)*HSI_FREQ+ (Address_Pll->rcc_select_pll_source)*HSE_FREQ;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <Rcc_enuConfigPLL+0xd0>
 8001070:	492c      	ldr	r1, [pc, #176]	; (8001124 <Rcc_enuConfigPLL+0x180>)
 8001072:	e000      	b.n	8001076 <Rcc_enuConfigPLL+0xd2>
 8001074:	2100      	movs	r1, #0
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <Rcc_enuConfigPLL+0x184>)
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	440b      	add	r3, r1
 8001084:	17da      	asrs	r2, r3, #31
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <Rcc_enuConfigPLL+0x188>)
 800108c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001090:	e9c3 1200 	strd	r1, r2, [r3]
		Global_u64StaticPLL_Freq = (Global_u64StaticPLL_Freq)/((u64)Global_u16StaticPLL_P*(u64)Global_u16StaticPLL_M)*Global_u16StaticPLL_N;
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <Rcc_enuConfigPLL+0x188>)
 8001096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <Rcc_enuConfigPLL+0x178>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	617a      	str	r2, [r7, #20]
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <Rcc_enuConfigPLL+0x170>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	60fa      	str	r2, [r7, #12]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	fb02 f203 	mul.w	r2, r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	693e      	ldr	r6, [r7, #16]
 80010be:	fb06 f303 	mul.w	r3, r6, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68be      	ldr	r6, [r7, #8]
 80010c8:	fba2 8906 	umull	r8, r9, r2, r6
 80010cc:	444b      	add	r3, r9
 80010ce:	4699      	mov	r9, r3
 80010d0:	4642      	mov	r2, r8
 80010d2:	464b      	mov	r3, r9
 80010d4:	f7ff f88a 	bl	80001ec <__aeabi_uldivmod>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <Rcc_enuConfigPLL+0x174>)
 80010de:	8809      	ldrh	r1, [r1, #0]
 80010e0:	b289      	uxth	r1, r1
 80010e2:	2000      	movs	r0, #0
 80010e4:	468a      	mov	sl, r1
 80010e6:	4683      	mov	fp, r0
 80010e8:	fb0a f003 	mul.w	r0, sl, r3
 80010ec:	fb02 f10b 	mul.w	r1, r2, fp
 80010f0:	4401      	add	r1, r0
 80010f2:	fba2 450a 	umull	r4, r5, r2, sl
 80010f6:	194b      	adds	r3, r1, r5
 80010f8:	461d      	mov	r5, r3
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <Rcc_enuConfigPLL+0x188>)
 80010fc:	e9c3 4500 	strd	r4, r5, [r3]
	}

	return Loc_enuRccStatusError;
 8001100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001104:	4618      	mov	r0, r3
 8001106:	372c      	adds	r7, #44	; 0x2c
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	200001d0 	.word	0x200001d0
 8001118:	200001d2 	.word	0x200001d2
 800111c:	200001d4 	.word	0x200001d4
 8001120:	200001d6 	.word	0x200001d6
 8001124:	00f42400 	.word	0x00f42400
 8001128:	007a1200 	.word	0x007a1200
 800112c:	200001d8 	.word	0x200001d8

08001130 <Rcc_enuSelectAPB2Prescaler>:
	RCC_selectMoc1ClkSource(Copy_enuMCO1ClkSource);

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuSelectAPB2Prescaler(Rcc_APB2SelectPrescalerType Copy_enuAPB2Prescaler){
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4601      	mov	r1, r0
 8001138:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800113a:	2101      	movs	r1, #1
 800113c:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB2Prescaler(Copy_enuAPB2Prescaler);
 800113e:	4910      	ldr	r1, [pc, #64]	; (8001180 <Rcc_enuSelectAPB2Prescaler+0x50>)
 8001140:	6889      	ldr	r1, [r1, #8]
 8001142:	f421 4060 	bic.w	r0, r1, #57344	; 0xe000
 8001146:	79f9      	ldrb	r1, [r7, #7]
 8001148:	0349      	lsls	r1, r1, #13
 800114a:	b289      	uxth	r1, r1
 800114c:	4c0c      	ldr	r4, [pc, #48]	; (8001180 <Rcc_enuSelectAPB2Prescaler+0x50>)
 800114e:	4301      	orrs	r1, r0
 8001150:	60a1      	str	r1, [r4, #8]
	Global_u64ABP2Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB2Prescaler];
 8001152:	490c      	ldr	r1, [pc, #48]	; (8001184 <Rcc_enuSelectAPB2Prescaler+0x54>)
 8001154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001158:	79fc      	ldrb	r4, [r7, #7]
 800115a:	4d0b      	ldr	r5, [pc, #44]	; (8001188 <Rcc_enuSelectAPB2Prescaler+0x58>)
 800115c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8001160:	b2a4      	uxth	r4, r4
 8001162:	2500      	movs	r5, #0
 8001164:	4622      	mov	r2, r4
 8001166:	462b      	mov	r3, r5
 8001168:	f7ff f840 	bl	80001ec <__aeabi_uldivmod>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4904      	ldr	r1, [pc, #16]	; (8001184 <Rcc_enuSelectAPB2Prescaler+0x54>)
 8001172:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	20000158 	.word	0x20000158
 8001188:	20000120 	.word	0x20000120

0800118c <Rcc_enuSelectAPB1Prescaler>:
Rcc_StatusErrorType Rcc_enuSelectAPB1Prescaler(Rcc_APB1SelectPrescalerType Copy_enuAPB1Prescaler){
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4601      	mov	r1, r0
 8001194:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001196:	2101      	movs	r1, #1
 8001198:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB1Prescaler(Copy_enuAPB1Prescaler);
 800119a:	4911      	ldr	r1, [pc, #68]	; (80011e0 <Rcc_enuSelectAPB1Prescaler+0x54>)
 800119c:	6889      	ldr	r1, [r1, #8]
 800119e:	f421 50e0 	bic.w	r0, r1, #7168	; 0x1c00
 80011a2:	79f9      	ldrb	r1, [r7, #7]
 80011a4:	0289      	lsls	r1, r1, #10
 80011a6:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
 80011aa:	4c0d      	ldr	r4, [pc, #52]	; (80011e0 <Rcc_enuSelectAPB1Prescaler+0x54>)
 80011ac:	4301      	orrs	r1, r0
 80011ae:	60a1      	str	r1, [r4, #8]
	Global_u64ABP1Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB1Prescaler];
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <Rcc_enuSelectAPB1Prescaler+0x58>)
 80011b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b6:	79fc      	ldrb	r4, [r7, #7]
 80011b8:	4d0b      	ldr	r5, [pc, #44]	; (80011e8 <Rcc_enuSelectAPB1Prescaler+0x5c>)
 80011ba:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 80011be:	b2a4      	uxth	r4, r4
 80011c0:	2500      	movs	r5, #0
 80011c2:	4622      	mov	r2, r4
 80011c4:	462b      	mov	r3, r5
 80011c6:	f7ff f811 	bl	80001ec <__aeabi_uldivmod>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4905      	ldr	r1, [pc, #20]	; (80011e4 <Rcc_enuSelectAPB1Prescaler+0x58>)
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]



	return Loc_enuRccStatusError;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	20000150 	.word	0x20000150
 80011e8:	20000120 	.word	0x20000120

080011ec <Rcc_enuSelectAHBPrescaler>:
Rcc_StatusErrorType Rcc_enuSelectAHBPrescaler(Rcc_AHBSelectPrescalerType Copy_enuAHBPrescaler){
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4601      	mov	r1, r0
 80011f4:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80011f6:	2101      	movs	r1, #1
 80011f8:	73f9      	strb	r1, [r7, #15]
	RCC_selectAHBPrescaler(Copy_enuAHBPrescaler);
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <Rcc_enuSelectAHBPrescaler+0x48>)
 80011fc:	6889      	ldr	r1, [r1, #8]
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <Rcc_enuSelectAHBPrescaler+0x48>)
 8001200:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001204:	6081      	str	r1, [r0, #8]

	Global_u64AHBFreq /=Global_u16AHBPrescalerValuesArr[Copy_enuAHBPrescaler];
 8001206:	490c      	ldr	r1, [pc, #48]	; (8001238 <Rcc_enuSelectAHBPrescaler+0x4c>)
 8001208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800120c:	79fc      	ldrb	r4, [r7, #7]
 800120e:	4d0b      	ldr	r5, [pc, #44]	; (800123c <Rcc_enuSelectAHBPrescaler+0x50>)
 8001210:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8001214:	b2a4      	uxth	r4, r4
 8001216:	2500      	movs	r5, #0
 8001218:	4622      	mov	r2, r4
 800121a:	462b      	mov	r3, r5
 800121c:	f7fe ffe6 	bl	80001ec <__aeabi_uldivmod>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4904      	ldr	r1, [pc, #16]	; (8001238 <Rcc_enuSelectAHBPrescaler+0x4c>)
 8001226:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	20000148 	.word	0x20000148
 800123c:	20000100 	.word	0x20000100

08001240 <Rcc_enuSelectSystemClkSource>:

Rcc_StatusErrorType Rcc_enuSelectSystemClkSource(Rcc_SystemClkSoruceIndexType Copy_enuSystemClkSource){
 8001240:	b490      	push	{r4, r7}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4601      	mov	r1, r0
 8001248:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800124a:	2101      	movs	r1, #1
 800124c:	73f9      	strb	r1, [r7, #15]

	RCC_selectSystemClk(Copy_enuSystemClkSource);
 800124e:	491e      	ldr	r1, [pc, #120]	; (80012c8 <Rcc_enuSelectSystemClkSource+0x88>)
 8001250:	6889      	ldr	r1, [r1, #8]
 8001252:	f021 0003 	bic.w	r0, r1, #3
 8001256:	79f9      	ldrb	r1, [r7, #7]
 8001258:	f001 0103 	and.w	r1, r1, #3
 800125c:	4c1a      	ldr	r4, [pc, #104]	; (80012c8 <Rcc_enuSelectSystemClkSource+0x88>)
 800125e:	4301      	orrs	r1, r0
 8001260:	60a1      	str	r1, [r4, #8]

	if(Copy_enuSystemClkSource == RCC_SYSTEM_CLK_PLL_INDEX){
 8001262:	79f9      	ldrb	r1, [r7, #7]
 8001264:	2902      	cmp	r1, #2
 8001266:	d106      	bne.n	8001276 <Rcc_enuSelectSystemClkSource+0x36>
		Global_u64SystemFreq = Global_u64StaticPLL_Freq;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <Rcc_enuSelectSystemClkSource+0x8c>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	4918      	ldr	r1, [pc, #96]	; (80012d0 <Rcc_enuSelectSystemClkSource+0x90>)
 8001270:	e9c1 2300 	strd	r2, r3, [r1]
 8001274:	e022      	b.n	80012bc <Rcc_enuSelectSystemClkSource+0x7c>
	}

	else{
		Global_u64SystemFreq = !(Copy_enuSystemClkSource)*HSI_FREQ + Copy_enuSystemClkSource*HSE_FREQ;
 8001276:	79f9      	ldrb	r1, [r7, #7]
 8001278:	2900      	cmp	r1, #0
 800127a:	d101      	bne.n	8001280 <Rcc_enuSelectSystemClkSource+0x40>
 800127c:	4815      	ldr	r0, [pc, #84]	; (80012d4 <Rcc_enuSelectSystemClkSource+0x94>)
 800127e:	e000      	b.n	8001282 <Rcc_enuSelectSystemClkSource+0x42>
 8001280:	2000      	movs	r0, #0
 8001282:	79f9      	ldrb	r1, [r7, #7]
 8001284:	4c14      	ldr	r4, [pc, #80]	; (80012d8 <Rcc_enuSelectSystemClkSource+0x98>)
 8001286:	fb04 f101 	mul.w	r1, r4, r1
 800128a:	4401      	add	r1, r0
 800128c:	17c8      	asrs	r0, r1, #31
 800128e:	460a      	mov	r2, r1
 8001290:	4603      	mov	r3, r0
 8001292:	490f      	ldr	r1, [pc, #60]	; (80012d0 <Rcc_enuSelectSystemClkSource+0x90>)
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64AHBFreq = Global_u64SystemFreq;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <Rcc_enuSelectSystemClkSource+0x90>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	490f      	ldr	r1, [pc, #60]	; (80012dc <Rcc_enuSelectSystemClkSource+0x9c>)
 80012a0:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP1Freq = Global_u64SystemFreq;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <Rcc_enuSelectSystemClkSource+0x90>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <Rcc_enuSelectSystemClkSource+0xa0>)
 80012ac:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP2Freq = Global_u64SystemFreq;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <Rcc_enuSelectSystemClkSource+0x90>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	490b      	ldr	r1, [pc, #44]	; (80012e4 <Rcc_enuSelectSystemClkSource+0xa4>)
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return Loc_enuRccStatusError;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc90      	pop	{r4, r7}
 80012c6:	4770      	bx	lr
 80012c8:	40023800 	.word	0x40023800
 80012cc:	200001d8 	.word	0x200001d8
 80012d0:	20000140 	.word	0x20000140
 80012d4:	00f42400 	.word	0x00f42400
 80012d8:	007a1200 	.word	0x007a1200
 80012dc:	20000148 	.word	0x20000148
 80012e0:	20000150 	.word	0x20000150
 80012e4:	20000158 	.word	0x20000158

080012e8 <Rcc_enuEnablePeripheralClk>:
	}

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuEnablePeripheralClk(Rcc_BusIndexType Copy_enuBusIndex, u8 Copy_u8PeripheralIndex){
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralIndex>THIRTYONE_VALUE  || Copy_enuBusIndex > FOUR_VALUE){
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b1f      	cmp	r3, #31
 8001300:	d802      	bhi.n	8001308 <Rcc_enuEnablePeripheralClk+0x20>
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d902      	bls.n	800130e <Rcc_enuEnablePeripheralClk+0x26>
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001308:	2302      	movs	r3, #2
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e015      	b.n	800133a <Rcc_enuEnablePeripheralClk+0x52>
	}
	else{
		WRITE_BIT((*Global_PeripheralClkRegEnArr[Copy_enuBusIndex]),Copy_u8PeripheralIndex,ONE_VALUE);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <Rcc_enuEnablePeripheralClk+0x60>)
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	79ba      	ldrb	r2, [r7, #6]
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	43d2      	mvns	r2, r2
 8001322:	401a      	ands	r2, r3
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	4618      	mov	r0, r3
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4905      	ldr	r1, [pc, #20]	; (8001348 <Rcc_enuEnablePeripheralClk+0x60>)
 8001332:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001336:	4302      	orrs	r2, r0
 8001338:	601a      	str	r2, [r3, #0]
	}

	return Loc_enuRccStatusError;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	200000ec 	.word	0x200000ec

0800134c <Rcc_enuConfigPLLI2S>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuConfigPLLI2S(const Rcc_PllI2SConfigType* Address_PllI2S){
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]

	if(Address_PllI2S == NULL){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <Rcc_enuConfigPLLI2S+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 800135e:	2303      	movs	r3, #3
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e032      	b.n	80013ca <Rcc_enuConfigPLLI2S+0x7e>
	}
	else{

		RCC_setPLL_I2S_N_Factor(Address_PllI2S->rcc_PLLI2S_N_From50To432);
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 8001366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800136a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800136e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	8852      	ldrh	r2, [r2, #2]
 8001376:	0192      	lsls	r2, r2, #6
 8001378:	4611      	mov	r1, r2
 800137a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800137e:	400a      	ands	r2, r1
 8001380:	4915      	ldr	r1, [pc, #84]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 8001382:	4313      	orrs	r3, r2
 8001384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_R_Factor(Address_PllI2S->rcc_select_pll_I2S_R);
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 800138e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001396:	6093      	str	r3, [r2, #8]
		RCC_setPLL_I2S_Q_Factor(Address_PllI2S->rcc_select_pll_I2S_Q);
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 800139a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800139e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	061b      	lsls	r3, r3, #24
 80013a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80013ac:	490a      	ldr	r1, [pc, #40]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_Clk(Address_PllI2S->rcc_select_pll_i2s_source_clk);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	7912      	ldrb	r2, [r2, #4]
 80013c0:	05d2      	lsls	r2, r2, #23
 80013c2:	4611      	mov	r1, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <Rcc_enuConfigPLLI2S+0x8c>)
 80013c6:	430b      	orrs	r3, r1
 80013c8:	6093      	str	r3, [r2, #8]
	}

	return Loc_enuRccStatusError;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800

080013dc <Rcc_enuConfigPLLSAI>:


Rcc_StatusErrorType Rcc_enuConfigPLLSAI(const Rcc_PllSAIConfigType* Address_PllSAI){
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]

	if(Address_PllSAI == NULL){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <Rcc_enuConfigPLLSAI+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80013ee:	2303      	movs	r3, #3
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	e06e      	b.n	80014d2 <Rcc_enuConfigPLLSAI+0xf6>
	}
	else{

		RCC_setPLL_SAI_N_Factor(Address_PllSAI->rcc_PLLSAI_N_From50To432);
 80013f4:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	8852      	ldrh	r2, [r2, #2]
 8001406:	0192      	lsls	r2, r2, #6
 8001408:	4611      	mov	r1, r2
 800140a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800140e:	400a      	ands	r2, r1
 8001410:	4933      	ldr	r1, [pc, #204]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 8001412:	4313      	orrs	r3, r2
 8001414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_Q_Factor(Address_PllSAI->rcc_select_pll_SAI_Q);
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	061b      	lsls	r3, r3, #24
 8001428:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800142c:	492c      	ldr	r1, [pc, #176]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 800142e:	4313      	orrs	r3, r2
 8001430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_R_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 800143c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		RCC_setPLL_SAI_QX_PLLI2SDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLI2SDIVQ_Qx_Last_FROM1to50);
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 800144a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800144e:	f023 021f 	bic.w	r2, r3, #31
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	88db      	ldrh	r3, [r3, #6]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	4921      	ldr	r1, [pc, #132]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 800145c:	4313      	orrs	r3, r2
 800145e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_QY_PLLSAIDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLSAIDIVQ_Qy_Last_FROM1to50);
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 8001464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001468:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001476:	491a      	ldr	r1, [pc, #104]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 8001478:	4313      	orrs	r3, r2
 800147a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_RLcd_PLLSAIDIVR_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001492:	4913      	ldr	r1, [pc, #76]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 8001494:	4313      	orrs	r3, r2
 8001496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		RCC_setPLL_SAI1A_Clk(Address_PllSAI->rcc_select_SAI1A_source);
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a5b      	ldrb	r3, [r3, #9]
 80014a8:	019b      	lsls	r3, r3, #6
 80014aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI1B_Clk(Address_PllSAI->rcc_select_SAI1B_source);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 80014b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7a9b      	ldrb	r3, [r3, #10]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <Rcc_enuConfigPLLSAI+0x104>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c



	}

	return Loc_enuRccStatusError;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]


}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40023800 	.word	0x40023800

080014e4 <Rcc_enuInit>:


Rcc_StatusErrorType Rcc_enuInit(const Rcc_ConfigType* Address_Rcc){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]

	if(Address_Rcc == NULL){
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <Rcc_enuInit+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80014f6:	2303      	movs	r3, #3
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e09b      	b.n	8001634 <Rcc_enuInit+0x150>
	}
	else{

		/*  Enable Clocks */
		if(Address_Rcc->rcc_hse_on_or_off == RCC_ON){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <Rcc_enuInit+0x30>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hse_on_or_off);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc67 	bl	8000ddc <Rcc_enuEnableClock>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e006      	b.n	8001522 <Rcc_enuInit+0x3e>
		}

		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hse_on_or_off);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fcfd 	bl	8000f18 <Rcc_enuDisableClock>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_hsi_on_or_off == RCC_ON){
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <Rcc_enuInit+0x56>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hsi_on_or_off);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc54 	bl	8000ddc <Rcc_enuEnableClock>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e006      	b.n	8001548 <Rcc_enuInit+0x64>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hsi_on_or_off);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fcea 	bl	8000f18 <Rcc_enuDisableClock>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]
		}


		if(Address_Rcc->rcc_pll_on_or_off == RCC_ON && Address_Rcc->address_pll_cfg  != NULL){
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d112      	bne.n	8001576 <Rcc_enuInit+0x92>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <Rcc_enuInit+0x92>
			Loc_enuRccStatusError = Rcc_enuConfigPLL(Address_Rcc->address_pll_cfg);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd21 	bl	8000fa4 <Rcc_enuConfigPLL>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pll_on_or_off);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fc36 	bl	8000ddc <Rcc_enuEnableClock>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e006      	b.n	8001584 <Rcc_enuInit+0xa0>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pll_on_or_off);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fccc 	bl	8000f18 <Rcc_enuDisableClock>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllI2S_on_or_off == RCC_ON && Address_Rcc->adress_pll_i2s_cfg  != NULL){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	78db      	ldrb	r3, [r3, #3]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d112      	bne.n	80015b2 <Rcc_enuInit+0xce>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <Rcc_enuInit+0xce>
			Loc_enuRccStatusError = 	Rcc_enuConfigPLLI2S(Address_Rcc->adress_pll_i2s_cfg);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fed7 	bl	800134c <Rcc_enuConfigPLLI2S>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	78db      	ldrb	r3, [r3, #3]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc18 	bl	8000ddc <Rcc_enuEnableClock>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e006      	b.n	80015c0 <Rcc_enuInit+0xdc>
		}
		else{
			Loc_enuRccStatusError = 	Rcc_enuDisableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fcae 	bl	8000f18 <Rcc_enuDisableClock>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllSAI_on_or_off == RCC_ON && Address_Rcc->address_pll_sai_cfg  != NULL){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	791b      	ldrb	r3, [r3, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d112      	bne.n	80015ee <Rcc_enuInit+0x10a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00e      	beq.n	80015ee <Rcc_enuInit+0x10a>
			Loc_enuRccStatusError = Rcc_enuConfigPLLSAI(Address_Rcc->address_pll_sai_cfg);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff01 	bl	80013dc <Rcc_enuConfigPLLSAI>
 80015da:	4603      	mov	r3, r0
 80015dc:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fbfa 	bl	8000ddc <Rcc_enuEnableClock>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e006      	b.n	80015fc <Rcc_enuInit+0x118>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc90 	bl	8000f18 <Rcc_enuDisableClock>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]
		}

		Loc_enuRccStatusError = Rcc_enuSelectAPB2Prescaler(Address_Rcc->rcc_apb2_select_prescaler );
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7d1b      	ldrb	r3, [r3, #20]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd95 	bl	8001130 <Rcc_enuSelectAPB2Prescaler>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAPB1Prescaler( Address_Rcc->rcc_apb1_select_prescaler);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7d5b      	ldrb	r3, [r3, #21]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fdbc 	bl	800118c <Rcc_enuSelectAPB1Prescaler>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAHBPrescaler( Address_Rcc->rcc_ahb_select_prescaler);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7d9b      	ldrb	r3, [r3, #22]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fde5 	bl	80011ec <Rcc_enuSelectAHBPrescaler>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectSystemClkSource(Address_Rcc->rcc_sysmte_clk_soruce);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7ddb      	ldrb	r3, [r3, #23]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe08 	bl	8001240 <Rcc_enuSelectSystemClkSource>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]


	}

	return Loc_enuRccStatusError;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <Scb_enuSetGroupPrioirty>:




/******************************* Software Interfaces Implementation *******************/
SCB_ErrorStatusType Scb_enuSetGroupPrioirty(Scb_SelectGroupPriorityAndSubPriorityType Copy_enuSelectGroupPriority){
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]

	SCB_ErrorStatusType Loc_enuScbErrorStatus = SCB_STATUS_OK;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]

	Scb_SetGroupPrioirty(Copy_enuSelectGroupPriority);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001656:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <Scb_enuSetGroupPrioirty+0x38>)
 8001660:	6013      	str	r3, [r2, #0]

	/* it's used for NVIC Driver */
	Global_GroupPrioritySelection =Copy_enuSelectGroupPriority;
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <Scb_enuSetGroupPrioirty+0x3c>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	7013      	strb	r3, [r2, #0]
	return Loc_enuScbErrorStatus;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed0c 	.word	0xe000ed0c
 800167c:	200001e0 	.word	0x200001e0

08001680 <SysTick_Handler>:


}

/**************************** ISR Implementation ************************************/
void SysTick_Handler (void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	if(Systick_OverflowInterruptHandler != NULL){
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <SysTick_Handler+0x38>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <SysTick_Handler+0x12>
		Systick_OverflowInterruptHandler();
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <SysTick_Handler+0x38>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4798      	blx	r3
	else{
		/* Error in setting callback */

	}

	if(Global_u8TimerTypeFlag == SYSTICK_INTERVAL_FLAG){
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <SysTick_Handler+0x3c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10b      	bne.n	80016b2 <SysTick_Handler+0x32>
		Systick_disableInterrupt();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <SysTick_Handler+0x40>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <SysTick_Handler+0x40>)
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	6013      	str	r3, [r2, #0]
		Systick_stopTimer();
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SysTick_Handler+0x40>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SysTick_Handler+0x40>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6013      	str	r3, [r2, #0]
	}
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001e4 	.word	0x200001e4
 80016bc:	200001e1 	.word	0x200001e1
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <USART1_IRQHandler>:



/**************************** Private Software Interface Implementation **************/

void USART1_IRQHandler(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

	u16 Loc_u16Result;

	if(Usart_GetRxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsRxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <USART1_IRQHandler+0x88>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d118      	bne.n	800170c <USART1_IRQHandler+0x48>
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <USART1_IRQHandler+0x88>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d110      	bne.n	800170c <USART1_IRQHandler+0x48>

		Loc_u16Result = Usart_GetDataReg(USART_SELECT_CHANNEL_1);
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <USART1_IRQHandler+0x88>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	80fb      	strh	r3, [r7, #6]
		Usart_RxInterruptHandler[USART_SELECT_CHANNEL_1](Loc_u16Result);
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <USART1_IRQHandler+0x8c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	4610      	mov	r0, r2
 80016fa:	4798      	blx	r3

		Usart_ClearRxCompleteFlag(USART_SELECT_CHANNEL_1);
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <USART1_IRQHandler+0x88>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <USART1_IRQHandler+0x88>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0220 	bic.w	r2, r2, #32
 800170a:	601a      	str	r2, [r3, #0]
	}

	if(Usart_GetTxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsTxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <USART1_IRQHandler+0x88>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	099b      	lsrs	r3, r3, #6
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d112      	bne.n	8001742 <USART1_IRQHandler+0x7e>
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <USART1_IRQHandler+0x88>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d10a      	bne.n	8001742 <USART1_IRQHandler+0x7e>

		Usart_TxCompleteInterruptHandler[USART_SELECT_CHANNEL_1]();
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <USART1_IRQHandler+0x90>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4798      	blx	r3
		Usart_ClearTxCompleteFlag(USART_SELECT_CHANNEL_1);
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <USART1_IRQHandler+0x88>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <USART1_IRQHandler+0x88>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001740:	601a      	str	r2, [r3, #0]
	}

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000178 	.word	0x20000178
 8001750:	200001e8 	.word	0x200001e8
 8001754:	20000208 	.word	0x20000208

08001758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800175c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001786:	f000 f811 	bl	80017ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7fe febb 	bl	8000504 <main>

0800178e <LoopForever>:

LoopForever:
  b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   r0, =_estack
 8001790:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800179c:	0800181c 	.word	0x0800181c
  ldr r2, =_sbss
 80017a0:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 80017a4:	20000228 	.word	0x20000228

080017a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC_IRQHandler>
	...

080017ac <__libc_init_array>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	4d0d      	ldr	r5, [pc, #52]	; (80017e4 <__libc_init_array+0x38>)
 80017b0:	4c0d      	ldr	r4, [pc, #52]	; (80017e8 <__libc_init_array+0x3c>)
 80017b2:	1b64      	subs	r4, r4, r5
 80017b4:	10a4      	asrs	r4, r4, #2
 80017b6:	2600      	movs	r6, #0
 80017b8:	42a6      	cmp	r6, r4
 80017ba:	d109      	bne.n	80017d0 <__libc_init_array+0x24>
 80017bc:	4d0b      	ldr	r5, [pc, #44]	; (80017ec <__libc_init_array+0x40>)
 80017be:	4c0c      	ldr	r4, [pc, #48]	; (80017f0 <__libc_init_array+0x44>)
 80017c0:	f000 f818 	bl	80017f4 <_init>
 80017c4:	1b64      	subs	r4, r4, r5
 80017c6:	10a4      	asrs	r4, r4, #2
 80017c8:	2600      	movs	r6, #0
 80017ca:	42a6      	cmp	r6, r4
 80017cc:	d105      	bne.n	80017da <__libc_init_array+0x2e>
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
 80017d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d4:	4798      	blx	r3
 80017d6:	3601      	adds	r6, #1
 80017d8:	e7ee      	b.n	80017b8 <__libc_init_array+0xc>
 80017da:	f855 3b04 	ldr.w	r3, [r5], #4
 80017de:	4798      	blx	r3
 80017e0:	3601      	adds	r6, #1
 80017e2:	e7f2      	b.n	80017ca <__libc_init_array+0x1e>
 80017e4:	08001814 	.word	0x08001814
 80017e8:	08001814 	.word	0x08001814
 80017ec:	08001814 	.word	0x08001814
 80017f0:	08001818 	.word	0x08001818

080017f4 <_init>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	bf00      	nop
 80017f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fa:	bc08      	pop	{r3}
 80017fc:	469e      	mov	lr, r3
 80017fe:	4770      	bx	lr

08001800 <_fini>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	bf00      	nop
 8001804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001806:	bc08      	pop	{r3}
 8001808:	469e      	mov	lr, r3
 800180a:	4770      	bx	lr
