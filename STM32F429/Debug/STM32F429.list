
STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002564  08002564  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800256c  0800256c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002570  08002570  00012570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08002574  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000050  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000468e  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000b2c  00000000  00000000  000248d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003b0  00000000  00000000  00025408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002c1  00000000  00000000  000257b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001f59  00000000  00000000  00025a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000021d1  00000000  00000000  000279d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00016d6a  00000000  00000000  00029ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010b4  00000000  00000000  00040910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000419c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001d8 	.word	0x200001d8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002544 	.word	0x08002544

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001dc 	.word	0x200001dc
 80001e8:	08002544 	.word	0x08002544

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_uldivmod>:
 8000988:	b953      	cbnz	r3, 80009a0 <__aeabi_uldivmod+0x18>
 800098a:	b94a      	cbnz	r2, 80009a0 <__aeabi_uldivmod+0x18>
 800098c:	2900      	cmp	r1, #0
 800098e:	bf08      	it	eq
 8000990:	2800      	cmpeq	r0, #0
 8000992:	bf1c      	itt	ne
 8000994:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000998:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800099c:	f000 b98e 	b.w	8000cbc <__aeabi_idiv0>
 80009a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a8:	f000 f824 	bl	80009f4 <__udivmoddi4>
 80009ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b4:	b004      	add	sp, #16
 80009b6:	4770      	bx	lr

080009b8 <__aeabi_d2ulz>:
 80009b8:	b5d0      	push	{r4, r6, r7, lr}
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__aeabi_d2ulz+0x34>)
 80009bc:	2200      	movs	r2, #0
 80009be:	4606      	mov	r6, r0
 80009c0:	460f      	mov	r7, r1
 80009c2:	f7ff fdcf 	bl	8000564 <__aeabi_dmul>
 80009c6:	f000 f97b 	bl	8000cc0 <__aeabi_d2uiz>
 80009ca:	4604      	mov	r4, r0
 80009cc:	f7ff fd50 	bl	8000470 <__aeabi_ui2d>
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <__aeabi_d2ulz+0x38>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f7ff fdc6 	bl	8000564 <__aeabi_dmul>
 80009d8:	4602      	mov	r2, r0
 80009da:	460b      	mov	r3, r1
 80009dc:	4630      	mov	r0, r6
 80009de:	4639      	mov	r1, r7
 80009e0:	f7ff fc08 	bl	80001f4 <__aeabi_dsub>
 80009e4:	f000 f96c 	bl	8000cc0 <__aeabi_d2uiz>
 80009e8:	4621      	mov	r1, r4
 80009ea:	bdd0      	pop	{r4, r6, r7, pc}
 80009ec:	3df00000 	.word	0x3df00000
 80009f0:	41f00000 	.word	0x41f00000

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a48:	f080 811c 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8119 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a76:	f080 8107 	bcs.w	8000c88 <__udivmoddi4+0x294>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8104 	bls.w	8000c88 <__udivmoddi4+0x294>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ed 	beq.w	8000c7e <__udivmoddi4+0x28a>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f8 	bhi.w	8000cb2 <__udivmoddi4+0x2be>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8090 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2b8>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b68:	4323      	orrs	r3, r4
 8000b6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fb09 5518 	mls	r5, r9, r8, r5
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bac:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46ae      	mov	lr, r5
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x29c>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x298>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bea:	eb64 040e 	sbc.w	r4, r4, lr
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	f1c3 0120 	rsb	r1, r3, #32
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c10:	fa25 f101 	lsr.w	r1, r5, r1
 8000c14:	409d      	lsls	r5, r3
 8000c16:	432a      	orrs	r2, r5
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1510 	mls	r5, r7, r0, r1
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c32:	428d      	cmp	r5, r1
 8000c34:	fa04 f403 	lsl.w	r4, r4, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x258>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c44:	428d      	cmp	r5, r1
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4461      	add	r1, ip
 8000c4c:	1b49      	subs	r1, r1, r5
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c54:	fb07 1115 	mls	r1, r7, r5, r1
 8000c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c60:	4291      	cmp	r1, r2
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x282>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c6e:	4291      	cmp	r1, r2
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a52      	subs	r2, r2, r1
 8000c78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e708      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c84:	4639      	mov	r1, r7
 8000c86:	e6e6      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	e6fb      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8c:	4548      	cmp	r0, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x282>
 8000ca0:	462b      	mov	r3, r5
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x258>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000cac:	3d02      	subs	r5, #2
 8000cae:	4462      	add	r2, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e70a      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x14e>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_d2uiz>:
 8000cc0:	004a      	lsls	r2, r1, #1
 8000cc2:	d211      	bcs.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000cc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cc8:	d211      	bcs.n	8000cee <__aeabi_d2uiz+0x2e>
 8000cca:	d50d      	bpl.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000ccc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cd4:	d40e      	bmi.n	8000cf4 <__aeabi_d2uiz+0x34>
 8000cd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ce2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cf2:	d102      	bne.n	8000cfa <__aeabi_d2uiz+0x3a>
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf8:	4770      	bx	lr
 8000cfa:	f04f 0000 	mov.w	r0, #0
 8000cfe:	4770      	bx	lr

08000d00 <main>:
		.select_sync_mode = USART_SELECT_ASYNCHRONOUS_MODE
};


int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
	/********************************** It must *************************************/

	/* RCC PART */
 	Rcc_enuInit(&rcc);
 8000d06:	4821      	ldr	r0, [pc, #132]	; (8000d8c <main+0x8c>)
 8000d08:	f000 ff4c 	bl	8001ba4 <Rcc_enuInit>
	Gpio_enuEnableClockAllGPIOs();
 8000d0c:	f000 fb62 	bl	80013d4 <Gpio_enuEnableClockAllGPIOs>
	Rcc_enuInitMCO2(RCC_MCO2_PIN_SELECT_HSE_CLK,RCC_MCO2_PIN_SELECT_PRESCALER_NO_DIV);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 fd44 	bl	80017a0 <Rcc_enuInitMCO2>

	/* Systic Part */
	Systick_enuInit();
 8000d18:	f000 fff2 	bl	8001d00 <Systick_enuInit>


	Gpio_enuInit();
 8000d1c:	f000 f9fa 	bl	8001114 <Gpio_enuInit>

	/* CAN PART */
	Gpio_enuSetAF(GPIO_PINA11, GPIO_SELECT_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 8000d20:	2109      	movs	r1, #9
 8000d22:	200b      	movs	r0, #11
 8000d24:	f000 faf8 	bl	8001318 <Gpio_enuSetAF>
	Gpio_enuSetAF(GPIO_PINA12, GPIO_SELECT_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 8000d28:	2109      	movs	r1, #9
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f000 faf4 	bl	8001318 <Gpio_enuSetAF>
	Can_enuInit(&can1);
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <main+0x90>)
 8000d32:	f000 f833 	bl	8000d9c <Can_enuInit>


	/* UART part */

	Gpio_enuSetAF(GPIO_PINB6, GPIO_SELECT_AF7_USART1_USART2_USART3); // for Usart Tx1
 8000d36:	2107      	movs	r1, #7
 8000d38:	2016      	movs	r0, #22
 8000d3a:	f000 faed 	bl	8001318 <Gpio_enuSetAF>
	Gpio_enuSetAF(GPIO_PINB7, GPIO_SELECT_AF7_USART1_USART2_USART3); // for Usart Rx1
 8000d3e:	2107      	movs	r1, #7
 8000d40:	2017      	movs	r0, #23
 8000d42:	f000 fae9 	bl	8001318 <Gpio_enuSetAF>
	Usart_enuInit(&Usart1);
 8000d46:	4813      	ldr	r0, [pc, #76]	; (8000d94 <main+0x94>)
 8000d48:	f001 fa06 	bl	8002158 <Usart_enuInit>
//		Gpio_enuSetPinChannelAtomic(GPIO_PING13);
//		Systick_enuSetBusyWaitTicks(1000000);
//	}
//

	u8 UsartDataArr[]="Ammar";
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <main+0x98>)
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d56:	6018      	str	r0, [r3, #0]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	8019      	strh	r1, [r3, #0]
//			Gpio_enuClearPinChannelAtomic(GPIO_PING13);
//			Systick_enuSetBusyWaitTicks(1000000);
//		}


		Usart_enuReceiveStringBlocking(&Usart1, Loc_u8Recevied);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <main+0x94>)
 8000d62:	f001 fb17 	bl	8002394 <Usart_enuReceiveStringBlocking>
		CompareTwoStrings(UsartDataArr, Loc_u8Recevied, &Loc_Check);
 8000d66:	1cfa      	adds	r2, r7, #3
 8000d68:	1d39      	adds	r1, r7, #4
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fb52 	bl	8002418 <CompareTwoStrings>

		if(Loc_Check == STD_TRUE){
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d103      	bne.n	8000d82 <main+0x82>
			Gpio_enuFlipChannel(GPIO_PING13);
 8000d7a:	206d      	movs	r0, #109	; 0x6d
 8000d7c:	f000 fa76 	bl	800126c <Gpio_enuFlipChannel>
 8000d80:	e7ec      	b.n	8000d5c <main+0x5c>
		}
		else{
			Gpio_enuClearPinChannelAtomic(GPIO_PING13);
 8000d82:	206d      	movs	r0, #109	; 0x6d
 8000d84:	f000 faa0 	bl	80012c8 <Gpio_enuClearPinChannelAtomic>
	for(;;){
 8000d88:	e7e8      	b.n	8000d5c <main+0x5c>
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000018 	.word	0x20000018
 8000d94:	20000028 	.word	0x20000028
 8000d98:	0800255c 	.word	0x0800255c

08000d9c <Can_enuInit>:




/******************************* Software Interfaces Implementation *******************/
Can_StatusErrorType Can_enuInit(const Can_ConfigType* Address_Can){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
	if(NULL == Address_Can){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <Can_enuInit+0x18>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8000dae:	2309      	movs	r3, #9
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e08c      	b.n	8000ece <Can_enuInit+0x132>
	}
	else{
		/* Enable CAN1 Rcc Clock */
		Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTYFIVE_VALUE);
 8000db4:	2119      	movs	r1, #25
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 fdf6 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
//		/* Enable CAN2 Rcc Clock */
//		Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTYSIX_VALUE);


		/* exit from sleep mode and enable init mode */
		Can_GoToInitMode();
 8000dbc:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dc2:	f023 0302 	bic.w	r3, r3, #2
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f9      	bne.n	8000dc8 <Can_enuInit+0x2c>
 8000dd4:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a3f      	ldr	r2, [pc, #252]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <Can_enuInit+0x13c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d1f9      	bne.n	8000de0 <Can_enuInit+0x44>

		/* Choose Tx Fifo Priority */
		Can_SelectTxFifoPriority(Address_Can->can_select_tx_fifo_priority);
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 0304 	bic.w	r3, r3, #4
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a36      	ldr	r2, [pc, #216]	; (8000ed8 <Can_enuInit+0x13c>)
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6013      	str	r3, [r2, #0]


		/* Choose Rx Lock Mode */
		Can_SelectRxFifoLockMode(Address_Can->can_select_rx_lock_mode);
 8000e02:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 0308 	bic.w	r3, r3, #8
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	7852      	ldrb	r2, [r2, #1]
 8000e0e:	00d2      	lsls	r2, r2, #3
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e14:	430b      	orrs	r3, r1
 8000e16:	6013      	str	r3, [r2, #0]

		/* enable/disable Retransmission Mode */
		Can_SelectRetransmissionAutomatic(Address_Can->can_select_retransmission_automatic);
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 0310 	bic.w	r3, r3, #16
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	7892      	ldrb	r2, [r2, #2]
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	4611      	mov	r1, r2
 8000e28:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	6013      	str	r3, [r2, #0]

		/* enable/disable WakeUp During Sleep Mode */
		Can_SelectWakeupAutomatic(Address_Can->can_select_wakeup_automatic);
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 0320 	bic.w	r3, r3, #32
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	78d2      	ldrb	r2, [r2, #3]
 8000e3a:	0152      	lsls	r2, r2, #5
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6013      	str	r3, [r2, #0]

		/* enable/disable Bus Off Left Automatically Mode */
		Can_SelectBackFromBusOffStateAutomatic(Address_Can->can_select_back_from_bus_off_state_automatic);
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	7912      	ldrb	r2, [r2, #4]
 8000e50:	0192      	lsls	r2, r2, #6
 8000e52:	4611      	mov	r1, r2
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e56:	430b      	orrs	r3, r1
 8000e58:	6013      	str	r3, [r2, #0]

		/* enable/disable Time Trigger Communciation Mode */
		Can_SelectTimeTriggerCommunicationMode(Address_Can->can_select_time_trigger_communcation_mode);
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	7952      	ldrb	r2, [r2, #5]
 8000e66:	01d2      	lsls	r2, r2, #7
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6013      	str	r3, [r2, #0]


		/* enable/disable CAN during Debugging Mode */
		Can_SelectDuringDebugModeCanWorking(Address_Can->can_select_during_debug_mode_can_working);
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	7992      	ldrb	r2, [r2, #6]
 8000e7c:	0412      	lsls	r2, r2, #16
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e82:	430b      	orrs	r3, r1
 8000e84:	6013      	str	r3, [r2, #0]

		/* Select Node Mode */
		Can_SelectNodeMode(Address_Can->can_select_node_mode);
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	79d2      	ldrb	r2, [r2, #7]
 8000e92:	0792      	lsls	r2, r2, #30
 8000e94:	4611      	mov	r1, r2
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	61d3      	str	r3, [r2, #28]

		/* Set Bit Time Calculation,, http://www.bittiming.can-wiki.info/ */
		Can_SetBitTimeCalulation(Address_Can->can_bit_time_calculation);
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <Can_enuInit+0x13c>)
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <Can_enuInit+0x13c>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61cb      	str	r3, [r1, #28]

		/* Exit From Init Mode */
		Can_GoOutFromInitMode();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <Can_enuInit+0x13c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <Can_enuInit+0x13c>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <Can_enuInit+0x13c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f9      	bne.n	8000ebe <Can_enuInit+0x122>

//		/* It's Used for Filters Configuration */
//		GlobalStatic_u8NumberOfCan1Fitlers = Address_Can->can_number_of_can1_filters_1_to_28;

		/* Filter Init */
		(void)enuFiltersInit();
 8000eca:	f000 f807 	bl	8000edc <enuFiltersInit>

	}

	return Loc_enuCanStatusError;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40006400 	.word	0x40006400

08000edc <enuFiltersInit>:



/**************************** Private Software Interface Implementation **************/

static Can_StatusErrorType enuFiltersInit(void){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]

	/* Start Filter Init Mode	 */
	Can_GoToFilterInitMode();
 8000ee6:	4b8a      	ldr	r3, [pc, #552]	; (8001110 <enuFiltersInit+0x234>)
 8000ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eec:	4a88      	ldr	r2, [pc, #544]	; (8001110 <enuFiltersInit+0x234>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* Set Number Of Can1 Filters */
	Can_SetNumberOfCan1Filters(NUMBER_OF_CAN1_FILTERS);
 8000ef6:	4b86      	ldr	r3, [pc, #536]	; (8001110 <enuFiltersInit+0x234>)
 8000ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000efc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000f00:	4a83      	ldr	r2, [pc, #524]	; (8001110 <enuFiltersInit+0x234>)
 8000f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f06:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	 * 2- scale
	 * 3- reg1 value
	 * 4- reg2 value
	 * 5- Which Fifo Index
	 */
	Filter_concat(FILTER27_CONFG, FILTER26_CONFG, FILTER25_CONFG, FILTER24_CONFG, FILTER23_CONFG, FILTER22_CONFG,
 8000f0a:	4b81      	ldr	r3, [pc, #516]	; (8001110 <enuFiltersInit+0x234>)
 8000f0c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000f10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f14:	4b7e      	ldr	r3, [pc, #504]	; (8001110 <enuFiltersInit+0x234>)
 8000f16:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000f1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8000f1e:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <enuFiltersInit+0x234>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f26:	4b7a      	ldr	r3, [pc, #488]	; (8001110 <enuFiltersInit+0x234>)
 8000f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f2c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8000f30:	4b77      	ldr	r3, [pc, #476]	; (8001110 <enuFiltersInit+0x234>)
 8000f32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f36:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000f3a:	4b75      	ldr	r3, [pc, #468]	; (8001110 <enuFiltersInit+0x234>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8000f42:	4b73      	ldr	r3, [pc, #460]	; (8001110 <enuFiltersInit+0x234>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8000f4a:	4b71      	ldr	r3, [pc, #452]	; (8001110 <enuFiltersInit+0x234>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8000f52:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <enuFiltersInit+0x234>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8000f5a:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <enuFiltersInit+0x234>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8000f62:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <enuFiltersInit+0x234>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8000f6a:	4b69      	ldr	r3, [pc, #420]	; (8001110 <enuFiltersInit+0x234>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8000f72:	4b67      	ldr	r3, [pc, #412]	; (8001110 <enuFiltersInit+0x234>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8000f7a:	4b65      	ldr	r3, [pc, #404]	; (8001110 <enuFiltersInit+0x234>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <enuFiltersInit+0x234>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8000f8a:	4b61      	ldr	r3, [pc, #388]	; (8001110 <enuFiltersInit+0x234>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8000f92:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <enuFiltersInit+0x234>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <enuFiltersInit+0x234>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 8000fa2:	4b5b      	ldr	r3, [pc, #364]	; (8001110 <enuFiltersInit+0x234>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8000faa:	4b59      	ldr	r3, [pc, #356]	; (8001110 <enuFiltersInit+0x234>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <enuFiltersInit+0x234>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <enuFiltersInit+0x234>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <enuFiltersInit+0x234>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8000fca:	4b51      	ldr	r3, [pc, #324]	; (8001110 <enuFiltersInit+0x234>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <enuFiltersInit+0x234>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8000fda:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <enuFiltersInit+0x234>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <enuFiltersInit+0x234>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <enuFiltersInit+0x234>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <enuFiltersInit+0x234>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <enuFiltersInit+0x234>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <enuFiltersInit+0x234>)
 8001004:	2200      	movs	r2, #0
 8001006:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 800100a:	4b41      	ldr	r3, [pc, #260]	; (8001110 <enuFiltersInit+0x234>)
 800100c:	2200      	movs	r2, #0
 800100e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <enuFiltersInit+0x234>)
 8001014:	2200      	movs	r2, #0
 8001016:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <enuFiltersInit+0x234>)
 800101c:	2200      	movs	r2, #0
 800101e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <enuFiltersInit+0x234>)
 8001024:	2200      	movs	r2, #0
 8001026:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <enuFiltersInit+0x234>)
 800102c:	2200      	movs	r2, #0
 800102e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <enuFiltersInit+0x234>)
 8001034:	2200      	movs	r2, #0
 8001036:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <enuFiltersInit+0x234>)
 800103c:	2200      	movs	r2, #0
 800103e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <enuFiltersInit+0x234>)
 8001044:	2200      	movs	r2, #0
 8001046:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <enuFiltersInit+0x234>)
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <enuFiltersInit+0x234>)
 8001054:	2200      	movs	r2, #0
 8001056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <enuFiltersInit+0x234>)
 800105c:	2200      	movs	r2, #0
 800105e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <enuFiltersInit+0x234>)
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <enuFiltersInit+0x234>)
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <enuFiltersInit+0x234>)
 8001074:	2200      	movs	r2, #0
 8001076:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <enuFiltersInit+0x234>)
 800107c:	2200      	movs	r2, #0
 800107e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <enuFiltersInit+0x234>)
 8001084:	2200      	movs	r2, #0
 8001086:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <enuFiltersInit+0x234>)
 800108c:	2200      	movs	r2, #0
 800108e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <enuFiltersInit+0x234>)
 8001094:	2200      	movs	r2, #0
 8001096:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <enuFiltersInit+0x234>)
 800109c:	2200      	movs	r2, #0
 800109e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <enuFiltersInit+0x234>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <enuFiltersInit+0x234>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <enuFiltersInit+0x234>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <enuFiltersInit+0x234>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <enuFiltersInit+0x234>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <enuFiltersInit+0x234>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <enuFiltersInit+0x234>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <enuFiltersInit+0x234>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <enuFiltersInit+0x234>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <enuFiltersInit+0x234>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			FILTER3_CONFG, FILTER2_CONFG, FILTER1_CONFG, FILTER0_CONFG
						);


	/* Go to Normal Mode */
	Can_GoOutFromFilterInitMode();
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <enuFiltersInit+0x234>)
 80010f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010f8:	4a05      	ldr	r2, [pc, #20]	; (8001110 <enuFiltersInit+0x234>)
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200


	return Loc_enuCanStatusError;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40006400 	.word	0x40006400

08001114 <Gpio_enuInit>:

/********************************** Macros Function Declarations *********************/


/******************************* Software Interfaces Implementation *******************/
Gpio_StatusErrorType Gpio_enuInit(void){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 800111a:	2301      	movs	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]

	Gpio_concat(
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <Gpio_enuInit+0x134>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <Gpio_enuInit+0x138>)
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <Gpio_enuInit+0x13c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	4b48      	ldr	r3, [pc, #288]	; (8001254 <Gpio_enuInit+0x140>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <Gpio_enuInit+0x144>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a47      	ldr	r2, [pc, #284]	; (800125c <Gpio_enuInit+0x148>)
 8001140:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel1_PINA1,
	    GPIO_u8PinChannel0_PINA0 // End with the lowest channel
	);


	Gpio_concat(
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <Gpio_enuInit+0x134>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4a46      	ldr	r2, [pc, #280]	; (8001260 <Gpio_enuInit+0x14c>)
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <Gpio_enuInit+0x13c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <Gpio_enuInit+0x140>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <Gpio_enuInit+0x144>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001162:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel18_PINB2,  // Corresponds to pin B2
	    GPIO_u8PinChannel17_PINB1,  // Corresponds to pin B1
	    GPIO_u8PinChannel16_PINB0   // Corresponds to pin B0, which is indicated as 16
	);

	Gpio_concat(
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <Gpio_enuInit+0x134>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a3e      	ldr	r2, [pc, #248]	; (8001264 <Gpio_enuInit+0x150>)
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <Gpio_enuInit+0x13c>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <Gpio_enuInit+0x140>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <Gpio_enuInit+0x144>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001184:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel35_PINC3,  // Corresponds to pin C3
	    GPIO_u8PinChannel34_PINC2,  // Corresponds to pin C2
	    GPIO_u8PinChannel33_PINC1,  // Corresponds to pin C1
	    GPIO_u8PinChannel32_PINC0   // Corresponds to pin C0, which is indicated as 32
	);
	Gpio_concat(
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <Gpio_enuInit+0x134>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <Gpio_enuInit+0x154>)
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <Gpio_enuInit+0x13c>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <Gpio_enuInit+0x140>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <Gpio_enuInit+0x144>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011a6:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel49_PIND1,  // Corresponds to pin D1
	    GPIO_u8PinChannel48_PIND0   // Corresponds to pin D0, which is indicated as 48
	);


	Gpio_concat(
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <Gpio_enuInit+0x134>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <Gpio_enuInit+0x13c>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <Gpio_enuInit+0x140>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <Gpio_enuInit+0x144>)
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011ca:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel67_PINE3,  // Corresponds to pin E3
	    GPIO_u8PinChannel66_PINE2,  // Corresponds to pin E2
	    GPIO_u8PinChannel65_PINE1,  // Corresponds to pin E1
	    GPIO_u8PinChannel64_PINE0   // Corresponds to pin E0, starting from 64
	);
	Gpio_concat(
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <Gpio_enuInit+0x134>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <Gpio_enuInit+0x13c>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <Gpio_enuInit+0x140>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <Gpio_enuInit+0x144>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011ee:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel83_PINF3,  // Corresponds to pin F3
	    GPIO_u8PinChannel82_PINF2,  // Corresponds to pin F2
	    GPIO_u8PinChannel81_PINF1,  // Corresponds to pin F1
	    GPIO_u8PinChannel80_PINF0   // Corresponds to pin F0, starting from 80
	);
	Gpio_concat(
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <Gpio_enuInit+0x134>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <Gpio_enuInit+0x13c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <Gpio_enuInit+0x140>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <Gpio_enuInit+0x144>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001212:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel96_PING0    // Corresponds to pin G0, starting from 96
	);



	Gpio_concat(
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <Gpio_enuInit+0x134>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <Gpio_enuInit+0x13c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <Gpio_enuInit+0x140>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <Gpio_enuInit+0x144>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001236:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel113_PINH1,  // Corresponds to pin H1
	    GPIO_u8PinChannel112_PINH0   // Corresponds to pin H0, starting from 112
	);


	return Loc_enuGpioStatusError;
 8001238:	79fb      	ldrb	r3, [r7, #7]
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000040 	.word	0x20000040
 800124c:	aaa95555 	.word	0xaaa95555
 8001250:	20000060 	.word	0x20000060
 8001254:	20000080 	.word	0x20000080
 8001258:	200000a0 	.word	0x200000a0
 800125c:	01555555 	.word	0x01555555
 8001260:	5555a555 	.word	0x5555a555
 8001264:	55595555 	.word	0x55595555
 8001268:	5555555a 	.word	0x5555555a

0800126c <Gpio_enuFlipChannel>:
				ASSIGN_REG((* Address_pu8PortVAlue),(* Global_IdrReadArr[Copy_u8PortId]));
		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType  Gpio_enuFlipChannel(u8 Copy_u8ChannelId){
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	737b      	strb	r3, [r7, #13]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d902      	bls.n	8001294 <Gpio_enuFlipChannel+0x28>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 800128e:	2302      	movs	r3, #2
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e00f      	b.n	80012b4 <Gpio_enuFlipChannel+0x48>
		}


			else{
				TOGGLE_BIT(*Global_OdreArr[Loc_u8PortNumber],Loc_u8PinNumber);
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <Gpio_enuFlipChannel+0x58>)
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	7b7b      	ldrb	r3, [r7, #13]
 80012aa:	4906      	ldr	r1, [pc, #24]	; (80012c4 <Gpio_enuFlipChannel+0x58>)
 80012ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012b0:	4042      	eors	r2, r0
 80012b2:	601a      	str	r2, [r3, #0]
		}

			return Loc_enuGpioStatusError;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200000c0 	.word	0x200000c0

080012c8 <Gpio_enuClearPinChannelAtomic>:
				ASSIGN_REG((* Global_BsrrArr[Loc_u8PortNumber]),(ONE_VALUE<<Loc_u8PinNumber));
		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuClearPinChannelAtomic(u8 Copy_u8ChannelId){
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	737b      	strb	r3, [r7, #13]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d902      	bls.n	80012f0 <Gpio_enuClearPinChannelAtomic+0x28>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 80012ea:	2302      	movs	r3, #2
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e00a      	b.n	8001306 <Gpio_enuClearPinChannelAtomic+0x3e>
		}


			else{
				ASSIGN_REG((* Global_BsrrArr[Loc_u8PortNumber]),(ONE_VALUE<<(Loc_u8PinNumber+SIXTEEN_VALUE)));
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3310      	adds	r3, #16
 80012f4:	2201      	movs	r2, #1
 80012f6:	fa02 f103 	lsl.w	r1, r2, r3
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <Gpio_enuClearPinChannelAtomic+0x4c>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	460a      	mov	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
		}

			return Loc_enuGpioStatusError;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	200000e0 	.word	0x200000e0

08001318 <Gpio_enuSetAF>:

Gpio_StatusErrorType Gpio_enuSetAF(u8 Copy_u8ChannelId,Gpio_SelectAFType Copy_enuAF){
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	737b      	strb	r3, [r7, #13]
		u8 Loc_u8TempPinNumber =Loc_u8PinNumber %EIGHT_VALUE;   // from 0 to 7
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	733b      	strb	r3, [r7, #12]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d902      	bls.n	800134e <Gpio_enuSetAF+0x36>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8001348:	2302      	movs	r3, #2
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e037      	b.n	80013be <Gpio_enuSetAF+0xa6>
		}


			else{

				if(Loc_u8PinNumber<EIGHT_VALUE){
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	2b07      	cmp	r3, #7
 8001352:	d81a      	bhi.n	800138a <Gpio_enuSetAF+0x72>
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <Gpio_enuSetAF+0xb4>)
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	7bba      	ldrb	r2, [r7, #14]
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	210f      	movs	r1, #15
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	43d2      	mvns	r2, r2
 800136a:	401a      	ands	r2, r3
												((Copy_enuAF & 0xF ) <<(Loc_u8PinNumber*FOUR_VALUE));
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	f003 010f 	and.w	r1, r3, #15
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	4618      	mov	r0, r3
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	4913      	ldr	r1, [pc, #76]	; (80013cc <Gpio_enuSetAF+0xb4>)
 8001380:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001384:	4302      	orrs	r2, r0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e019      	b.n	80013be <Gpio_enuSetAF+0xa6>

				}
				else{
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <Gpio_enuSetAF+0xb8>)
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	7b3a      	ldrb	r2, [r7, #12]
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	210f      	movs	r1, #15
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	43d2      	mvns	r2, r2
 80013a0:	401a      	ands	r2, r3
																	((Copy_enuAF & 0xF ) <<(Loc_u8TempPinNumber*FOUR_VALUE));
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	f003 010f 	and.w	r1, r3, #15
 80013a8:	7b3b      	ldrb	r3, [r7, #12]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4618      	mov	r0, r3
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 80013b2:	7b7b      	ldrb	r3, [r7, #13]
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <Gpio_enuSetAF+0xb8>)
 80013b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ba:	4302      	orrs	r2, r0
 80013bc:	601a      	str	r2, [r3, #0]
				}
		}

			return Loc_enuGpioStatusError;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000100 	.word	0x20000100
 80013d0:	20000120 	.word	0x20000120

080013d4 <Gpio_enuEnableClockAllGPIOs>:

		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuEnableClockAllGPIOs(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 80013da:	2301      	movs	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
	volatile Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80013de:	2301      	movs	r3, #1
 80013e0:	71bb      	strb	r3, [r7, #6]

	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTA);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 fadf 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 80013ea:	4603      	mov	r3, r0
 80013ec:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTB);
 80013ee:	2101      	movs	r1, #1
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 fad9 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTC);
 80013fa:	2102      	movs	r1, #2
 80013fc:	2000      	movs	r0, #0
 80013fe:	f000 fad3 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 8001402:	4603      	mov	r3, r0
 8001404:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTD);
 8001406:	2103      	movs	r1, #3
 8001408:	2000      	movs	r0, #0
 800140a:	f000 facd 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 800140e:	4603      	mov	r3, r0
 8001410:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTE);
 8001412:	2104      	movs	r1, #4
 8001414:	2000      	movs	r0, #0
 8001416:	f000 fac7 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 800141a:	4603      	mov	r3, r0
 800141c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTF);
 800141e:	2105      	movs	r1, #5
 8001420:	2000      	movs	r0, #0
 8001422:	f000 fac1 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 8001426:	4603      	mov	r3, r0
 8001428:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTH);
 800142a:	2107      	movs	r1, #7
 800142c:	2000      	movs	r0, #0
 800142e:	f000 fabb 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 8001432:	4603      	mov	r3, r0
 8001434:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTG);
 8001436:	2106      	movs	r1, #6
 8001438:	2000      	movs	r0, #0
 800143a:	f000 fab5 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
 800143e:	4603      	mov	r3, r0
 8001440:	71bb      	strb	r3, [r7, #6]



	return Loc_enuGpioStatusError;
 8001442:	79fb      	ldrb	r3, [r7, #7]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <Rcc_enuEnableClock>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuEnableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8CounterTimeOut = 240;
 800145a:	23f0      	movs	r3, #240	; 0xf0
 800145c:	73bb      	strb	r3, [r7, #14]
	switch (Copy_enuClockSourceIndex){
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d876      	bhi.n	8001552 <Rcc_enuEnableClock+0x106>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <Rcc_enuEnableClock+0x20>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	08001481 	.word	0x08001481
 8001470:	080014ab 	.word	0x080014ab
 8001474:	080014d5 	.word	0x080014d5
 8001478:	080014ff 	.word	0x080014ff
 800147c:	08001529 	.word	0x08001529

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_enableHSI();
 8001480:	4b40      	ldr	r3, [pc, #256]	; (8001584 <Rcc_enuEnableClock+0x138>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <Rcc_enuEnableClock+0x138>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800148c:	e002      	b.n	8001494 <Rcc_enuEnableClock+0x48>
			Loc_u8CounterTimeOut--;
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	3b01      	subs	r3, #1
 8001492:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001494:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <Rcc_enuEnableClock+0x138>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d05a      	beq.n	8001558 <Rcc_enuEnableClock+0x10c>
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f2      	bne.n	800148e <Rcc_enuEnableClock+0x42>
		}

		break;
 80014a8:	e056      	b.n	8001558 <Rcc_enuEnableClock+0x10c>
	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_enableHSE();
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <Rcc_enuEnableClock+0x138>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a35      	ldr	r2, [pc, #212]	; (8001584 <Rcc_enuEnableClock+0x138>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80014b6:	e002      	b.n	80014be <Rcc_enuEnableClock+0x72>
			Loc_u8CounterTimeOut--;
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <Rcc_enuEnableClock+0x138>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0c5b      	lsrs	r3, r3, #17
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d047      	beq.n	800155c <Rcc_enuEnableClock+0x110>
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f2      	bne.n	80014b8 <Rcc_enuEnableClock+0x6c>
		}
		break;
 80014d2:	e043      	b.n	800155c <Rcc_enuEnableClock+0x110>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_enablePLL();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <Rcc_enuEnableClock+0x138>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <Rcc_enuEnableClock+0x138>)
 80014da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014de:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80014e0:	e002      	b.n	80014e8 <Rcc_enuEnableClock+0x9c>
			Loc_u8CounterTimeOut--;
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <Rcc_enuEnableClock+0x138>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0e5b      	lsrs	r3, r3, #25
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d034      	beq.n	8001560 <Rcc_enuEnableClock+0x114>
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f2      	bne.n	80014e2 <Rcc_enuEnableClock+0x96>
		}
		break;
 80014fc:	e030      	b.n	8001560 <Rcc_enuEnableClock+0x114>


	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_enablePLLI2S();
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <Rcc_enuEnableClock+0x138>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <Rcc_enuEnableClock+0x138>)
 8001504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001508:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800150a:	e002      	b.n	8001512 <Rcc_enuEnableClock+0xc6>
			Loc_u8CounterTimeOut--;
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	3b01      	subs	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <Rcc_enuEnableClock+0x138>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0edb      	lsrs	r3, r3, #27
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d021      	beq.n	8001564 <Rcc_enuEnableClock+0x118>
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f2      	bne.n	800150c <Rcc_enuEnableClock+0xc0>
		}
		break;
 8001526:	e01d      	b.n	8001564 <Rcc_enuEnableClock+0x118>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_enablePLLSAI();
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <Rcc_enuEnableClock+0x138>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <Rcc_enuEnableClock+0x138>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001534:	e002      	b.n	800153c <Rcc_enuEnableClock+0xf0>
			Loc_u8CounterTimeOut--;
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	3b01      	subs	r3, #1
 800153a:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <Rcc_enuEnableClock+0x138>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0f5b      	lsrs	r3, r3, #29
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d00e      	beq.n	8001568 <Rcc_enuEnableClock+0x11c>
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f2      	bne.n	8001536 <Rcc_enuEnableClock+0xea>
		}
		break;
 8001550:	e00a      	b.n	8001568 <Rcc_enuEnableClock+0x11c>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001552:	2302      	movs	r3, #2
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e008      	b.n	800156a <Rcc_enuEnableClock+0x11e>
		break;
 8001558:	bf00      	nop
 800155a:	e006      	b.n	800156a <Rcc_enuEnableClock+0x11e>
		break;
 800155c:	bf00      	nop
 800155e:	e004      	b.n	800156a <Rcc_enuEnableClock+0x11e>
		break;
 8001560:	bf00      	nop
 8001562:	e002      	b.n	800156a <Rcc_enuEnableClock+0x11e>
		break;
 8001564:	bf00      	nop
 8001566:	e000      	b.n	800156a <Rcc_enuEnableClock+0x11e>
		break;
 8001568:	bf00      	nop
	}

	if(Loc_u8CounterTimeOut == ZERO_VALUE)
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <Rcc_enuEnableClock+0x128>
		Loc_enuRccStatusError = RCC_STATUS_TIME_OUT_FLAG;
 8001570:	2304      	movs	r3, #4
 8001572:	73fb      	strb	r3, [r7, #15]

	return Loc_enuRccStatusError;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <Rcc_enuDisableClock>:

Rcc_StatusErrorType Rcc_enuDisableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]


	switch (Copy_enuClockSourceIndex){
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d830      	bhi.n	80015fe <Rcc_enuDisableClock+0x76>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <Rcc_enuDisableClock+0x1c>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b9 	.word	0x080015b9
 80015a8:	080015c7 	.word	0x080015c7
 80015ac:	080015d5 	.word	0x080015d5
 80015b0:	080015e3 	.word	0x080015e3
 80015b4:	080015f1 	.word	0x080015f1

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_disableHSI();
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]
		break;
 80015c4:	e01d      	b.n	8001602 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_disableHSE();
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
		break;
 80015d2:	e016      	b.n	8001602 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_disablePLL();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]
		break;
 80015e0:	e00f      	b.n	8001602 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_disablePLLI2S();
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015ec:	6013      	str	r3, [r2, #0]
		break;
 80015ee:	e008      	b.n	8001602 <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_disablePLLSAI();
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <Rcc_enuDisableClock+0x88>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6013      	str	r3, [r2, #0]

		break;
 80015fc:	e001      	b.n	8001602 <Rcc_enuDisableClock+0x7a>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 80015fe:	2302      	movs	r3, #2
 8001600:	73fb      	strb	r3, [r7, #15]
	}


	return Loc_enuRccStatusError;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40023800 	.word	0x40023800

08001614 <Rcc_enuConfigPLL>:


Rcc_StatusErrorType Rcc_enuConfigPLL(const Rcc_PllConfigType* Address_Pll){
 8001614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001618:	b08b      	sub	sp, #44	; 0x2c
 800161a:	af00      	add	r7, sp, #0
 800161c:	61f8      	str	r0, [r7, #28]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(Address_Pll == NULL){
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <Rcc_enuConfigPLL+0x1e>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 800162a:	2303      	movs	r3, #3
 800162c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001630:	e09e      	b.n	8001770 <Rcc_enuConfigPLL+0x15c>
	}
	else{
		RCC_setPLL_M_Factor(Address_Pll->rcc_PLL_M_From2To63);
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f023 011f 	bic.w	r1, r3, #31
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 8001644:	430b      	orrs	r3, r1
 8001646:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_M = Address_Pll->rcc_PLL_M_From2To63;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	799b      	ldrb	r3, [r3, #6]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4a4d      	ldr	r2, [pc, #308]	; (8001784 <Rcc_enuConfigPLL+0x170>)
 8001650:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_N_Factor(Address_Pll->rcc_PLL_N_From50To432);
 8001652:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 517f 	bic.w	r1, r3, #16320	; 0x3fc0
 800165a:	f021 0120 	bic.w	r1, r1, #32
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	889b      	ldrh	r3, [r3, #4]
 8001662:	019b      	lsls	r3, r3, #6
 8001664:	461a      	mov	r2, r3
 8001666:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800166a:	4013      	ands	r3, r2
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 800166e:	430b      	orrs	r3, r1
 8001670:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_N = Address_Pll->rcc_PLL_N_From50To432;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	889b      	ldrh	r3, [r3, #4]
 8001676:	4a44      	ldr	r2, [pc, #272]	; (8001788 <Rcc_enuConfigPLL+0x174>)
 8001678:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_P_Factor(Address_Pll->rcc_select_pllp);
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800168c:	4a3c      	ldr	r2, [pc, #240]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 800168e:	430b      	orrs	r3, r1
 8001690:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_P = Address_Pll->rcc_select_pllp*TWO_VALUE+TWO_VALUE; // y = 2x+2
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	3301      	adds	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b29b      	uxth	r3, r3
 800169e:	4a3b      	ldr	r2, [pc, #236]	; (800178c <Rcc_enuConfigPLL+0x178>)
 80016a0:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_Q_Factor(Address_Pll->rcc_select_pllq);
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	789b      	ldrb	r3, [r3, #2]
 80016ae:	061b      	lsls	r3, r3, #24
 80016b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016b4:	4a32      	ldr	r2, [pc, #200]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_Q = Address_Pll->rcc_select_pllq;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4a33      	ldr	r2, [pc, #204]	; (8001790 <Rcc_enuConfigPLL+0x17c>)
 80016c2:	8013      	strh	r3, [r2, #0]

		RCC_setPLLClk(Address_Pll->rcc_select_pll_source);
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	059b      	lsls	r3, r3, #22
 80016d2:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <Rcc_enuConfigPLL+0x16c>)
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6053      	str	r3, [r2, #4]
		Global_u64StaticPLL_Freq = !(Address_Pll->rcc_select_pll_source)*HSI_FREQ+ (Address_Pll->rcc_select_pll_source)*HSE_FREQ;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <Rcc_enuConfigPLL+0xd0>
 80016e0:	492c      	ldr	r1, [pc, #176]	; (8001794 <Rcc_enuConfigPLL+0x180>)
 80016e2:	e000      	b.n	80016e6 <Rcc_enuConfigPLL+0xd2>
 80016e4:	2100      	movs	r1, #0
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <Rcc_enuConfigPLL+0x184>)
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	440b      	add	r3, r1
 80016f4:	17da      	asrs	r2, r3, #31
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <Rcc_enuConfigPLL+0x188>)
 80016fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001700:	e9c3 1200 	strd	r1, r2, [r3]
		Global_u64StaticPLL_Freq = (Global_u64StaticPLL_Freq)/((u64)Global_u16StaticPLL_P*(u64)Global_u16StaticPLL_M)*Global_u16StaticPLL_N;
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <Rcc_enuConfigPLL+0x188>)
 8001706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <Rcc_enuConfigPLL+0x178>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	2200      	movs	r2, #0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	617a      	str	r2, [r7, #20]
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <Rcc_enuConfigPLL+0x170>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	2200      	movs	r2, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	60fa      	str	r2, [r7, #12]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	fb02 f203 	mul.w	r2, r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	693e      	ldr	r6, [r7, #16]
 800172e:	fb06 f303 	mul.w	r3, r6, r3
 8001732:	4413      	add	r3, r2
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68be      	ldr	r6, [r7, #8]
 8001738:	fba2 8906 	umull	r8, r9, r2, r6
 800173c:	444b      	add	r3, r9
 800173e:	4699      	mov	r9, r3
 8001740:	4642      	mov	r2, r8
 8001742:	464b      	mov	r3, r9
 8001744:	f7ff f920 	bl	8000988 <__aeabi_uldivmod>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <Rcc_enuConfigPLL+0x174>)
 800174e:	8809      	ldrh	r1, [r1, #0]
 8001750:	b289      	uxth	r1, r1
 8001752:	2000      	movs	r0, #0
 8001754:	468a      	mov	sl, r1
 8001756:	4683      	mov	fp, r0
 8001758:	fb0a f003 	mul.w	r0, sl, r3
 800175c:	fb02 f10b 	mul.w	r1, r2, fp
 8001760:	4401      	add	r1, r0
 8001762:	fba2 450a 	umull	r4, r5, r2, sl
 8001766:	194b      	adds	r3, r1, r5
 8001768:	461d      	mov	r5, r3
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Rcc_enuConfigPLL+0x188>)
 800176c:	e9c3 4500 	strd	r4, r5, [r3]
	}

	return Loc_enuRccStatusError;
 8001770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001774:	4618      	mov	r0, r3
 8001776:	372c      	adds	r7, #44	; 0x2c
 8001778:	46bd      	mov	sp, r7
 800177a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	200001f4 	.word	0x200001f4
 8001788:	200001f6 	.word	0x200001f6
 800178c:	200001f8 	.word	0x200001f8
 8001790:	200001fa 	.word	0x200001fa
 8001794:	00f42400 	.word	0x00f42400
 8001798:	007a1200 	.word	0x007a1200
 800179c:	20000200 	.word	0x20000200

080017a0 <Rcc_enuInitMCO2>:

Rcc_StatusErrorType Rcc_enuInitMCO2(Rcc_MCO2PinSelectClkSoruceType Copy_enuMCO2ClkSource,Rcc_MCO2PinSelectPrescalerType Copy_enuMCO2Prescaler){
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]

	RCC_selectMoc2Prescaler(Copy_enuMCO2Prescaler);
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <Rcc_enuInitMCO2+0x4c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 5260 	bic.w	r2, r3, #939524096	; 0x38000000
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	06db      	lsls	r3, r3, #27
 80017c0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <Rcc_enuInitMCO2+0x4c>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
	RCC_selectMoc2ClkSource(Copy_enuMCO2ClkSource);
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <Rcc_enuInitMCO2+0x4c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	0792      	lsls	r2, r2, #30
 80017d6:	4611      	mov	r1, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <Rcc_enuInitMCO2+0x4c>)
 80017da:	430b      	orrs	r3, r1
 80017dc:	6093      	str	r3, [r2, #8]

	return Loc_enuRccStatusError;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40023800 	.word	0x40023800

080017f0 <Rcc_enuSelectAPB2Prescaler>:
	RCC_selectMoc1ClkSource(Copy_enuMCO1ClkSource);

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuSelectAPB2Prescaler(Rcc_APB2SelectPrescalerType Copy_enuAPB2Prescaler){
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4601      	mov	r1, r0
 80017f8:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80017fa:	2101      	movs	r1, #1
 80017fc:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB2Prescaler(Copy_enuAPB2Prescaler);
 80017fe:	4910      	ldr	r1, [pc, #64]	; (8001840 <Rcc_enuSelectAPB2Prescaler+0x50>)
 8001800:	6889      	ldr	r1, [r1, #8]
 8001802:	f421 4060 	bic.w	r0, r1, #57344	; 0xe000
 8001806:	79f9      	ldrb	r1, [r7, #7]
 8001808:	0349      	lsls	r1, r1, #13
 800180a:	b289      	uxth	r1, r1
 800180c:	4c0c      	ldr	r4, [pc, #48]	; (8001840 <Rcc_enuSelectAPB2Prescaler+0x50>)
 800180e:	4301      	orrs	r1, r0
 8001810:	60a1      	str	r1, [r4, #8]
	Global_u64ABP2Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB2Prescaler];
 8001812:	490c      	ldr	r1, [pc, #48]	; (8001844 <Rcc_enuSelectAPB2Prescaler+0x54>)
 8001814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001818:	79fc      	ldrb	r4, [r7, #7]
 800181a:	4d0b      	ldr	r5, [pc, #44]	; (8001848 <Rcc_enuSelectAPB2Prescaler+0x58>)
 800181c:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8001820:	b2a4      	uxth	r4, r4
 8001822:	2500      	movs	r5, #0
 8001824:	4622      	mov	r2, r4
 8001826:	462b      	mov	r3, r5
 8001828:	f7ff f8ae 	bl	8000988 <__aeabi_uldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <Rcc_enuSelectAPB2Prescaler+0x54>)
 8001832:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	200001b0 	.word	0x200001b0
 8001848:	20000174 	.word	0x20000174

0800184c <Rcc_enuSelectAPB1Prescaler>:
Rcc_StatusErrorType Rcc_enuSelectAPB1Prescaler(Rcc_APB1SelectPrescalerType Copy_enuAPB1Prescaler){
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	4601      	mov	r1, r0
 8001854:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001856:	2101      	movs	r1, #1
 8001858:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB1Prescaler(Copy_enuAPB1Prescaler);
 800185a:	4911      	ldr	r1, [pc, #68]	; (80018a0 <Rcc_enuSelectAPB1Prescaler+0x54>)
 800185c:	6889      	ldr	r1, [r1, #8]
 800185e:	f421 50e0 	bic.w	r0, r1, #7168	; 0x1c00
 8001862:	79f9      	ldrb	r1, [r7, #7]
 8001864:	0289      	lsls	r1, r1, #10
 8001866:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
 800186a:	4c0d      	ldr	r4, [pc, #52]	; (80018a0 <Rcc_enuSelectAPB1Prescaler+0x54>)
 800186c:	4301      	orrs	r1, r0
 800186e:	60a1      	str	r1, [r4, #8]
	Global_u64ABP1Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB1Prescaler];
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <Rcc_enuSelectAPB1Prescaler+0x58>)
 8001872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001876:	79fc      	ldrb	r4, [r7, #7]
 8001878:	4d0b      	ldr	r5, [pc, #44]	; (80018a8 <Rcc_enuSelectAPB1Prescaler+0x5c>)
 800187a:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800187e:	b2a4      	uxth	r4, r4
 8001880:	2500      	movs	r5, #0
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	f7ff f87f 	bl	8000988 <__aeabi_uldivmod>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4905      	ldr	r1, [pc, #20]	; (80018a4 <Rcc_enuSelectAPB1Prescaler+0x58>)
 8001890:	e9c1 2300 	strd	r2, r3, [r1]



	return Loc_enuRccStatusError;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	200001a8 	.word	0x200001a8
 80018a8:	20000174 	.word	0x20000174

080018ac <Rcc_enuSelectAHBPrescaler>:
Rcc_StatusErrorType Rcc_enuSelectAHBPrescaler(Rcc_AHBSelectPrescalerType Copy_enuAHBPrescaler){
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4601      	mov	r1, r0
 80018b4:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80018b6:	2101      	movs	r1, #1
 80018b8:	73f9      	strb	r1, [r7, #15]
	RCC_selectAHBPrescaler(Copy_enuAHBPrescaler);
 80018ba:	490e      	ldr	r1, [pc, #56]	; (80018f4 <Rcc_enuSelectAHBPrescaler+0x48>)
 80018bc:	6889      	ldr	r1, [r1, #8]
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <Rcc_enuSelectAHBPrescaler+0x48>)
 80018c0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80018c4:	6081      	str	r1, [r0, #8]

	Global_u64AHBFreq /=Global_u16AHBPrescalerValuesArr[Copy_enuAHBPrescaler];
 80018c6:	490c      	ldr	r1, [pc, #48]	; (80018f8 <Rcc_enuSelectAHBPrescaler+0x4c>)
 80018c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018cc:	79fc      	ldrb	r4, [r7, #7]
 80018ce:	4d0b      	ldr	r5, [pc, #44]	; (80018fc <Rcc_enuSelectAHBPrescaler+0x50>)
 80018d0:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 80018d4:	b2a4      	uxth	r4, r4
 80018d6:	2500      	movs	r5, #0
 80018d8:	4622      	mov	r2, r4
 80018da:	462b      	mov	r3, r5
 80018dc:	f7ff f854 	bl	8000988 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4904      	ldr	r1, [pc, #16]	; (80018f8 <Rcc_enuSelectAHBPrescaler+0x4c>)
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bdb0      	pop	{r4, r5, r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	200001a0 	.word	0x200001a0
 80018fc:	20000154 	.word	0x20000154

08001900 <Rcc_enuSelectSystemClkSource>:

Rcc_StatusErrorType Rcc_enuSelectSystemClkSource(Rcc_SystemClkSoruceIndexType Copy_enuSystemClkSource){
 8001900:	b490      	push	{r4, r7}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4601      	mov	r1, r0
 8001908:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800190a:	2101      	movs	r1, #1
 800190c:	73f9      	strb	r1, [r7, #15]

	RCC_selectSystemClk(Copy_enuSystemClkSource);
 800190e:	491e      	ldr	r1, [pc, #120]	; (8001988 <Rcc_enuSelectSystemClkSource+0x88>)
 8001910:	6889      	ldr	r1, [r1, #8]
 8001912:	f021 0003 	bic.w	r0, r1, #3
 8001916:	79f9      	ldrb	r1, [r7, #7]
 8001918:	f001 0103 	and.w	r1, r1, #3
 800191c:	4c1a      	ldr	r4, [pc, #104]	; (8001988 <Rcc_enuSelectSystemClkSource+0x88>)
 800191e:	4301      	orrs	r1, r0
 8001920:	60a1      	str	r1, [r4, #8]

	if(Copy_enuSystemClkSource == RCC_SYSTEM_CLK_PLL_INDEX){
 8001922:	79f9      	ldrb	r1, [r7, #7]
 8001924:	2902      	cmp	r1, #2
 8001926:	d106      	bne.n	8001936 <Rcc_enuSelectSystemClkSource+0x36>
		Global_u64SystemFreq = Global_u64StaticPLL_Freq;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <Rcc_enuSelectSystemClkSource+0x8c>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	4918      	ldr	r1, [pc, #96]	; (8001990 <Rcc_enuSelectSystemClkSource+0x90>)
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
 8001934:	e022      	b.n	800197c <Rcc_enuSelectSystemClkSource+0x7c>
	}

	else{
		Global_u64SystemFreq = !(Copy_enuSystemClkSource)*HSI_FREQ + Copy_enuSystemClkSource*HSE_FREQ;
 8001936:	79f9      	ldrb	r1, [r7, #7]
 8001938:	2900      	cmp	r1, #0
 800193a:	d101      	bne.n	8001940 <Rcc_enuSelectSystemClkSource+0x40>
 800193c:	4815      	ldr	r0, [pc, #84]	; (8001994 <Rcc_enuSelectSystemClkSource+0x94>)
 800193e:	e000      	b.n	8001942 <Rcc_enuSelectSystemClkSource+0x42>
 8001940:	2000      	movs	r0, #0
 8001942:	79f9      	ldrb	r1, [r7, #7]
 8001944:	4c14      	ldr	r4, [pc, #80]	; (8001998 <Rcc_enuSelectSystemClkSource+0x98>)
 8001946:	fb04 f101 	mul.w	r1, r4, r1
 800194a:	4401      	add	r1, r0
 800194c:	17c8      	asrs	r0, r1, #31
 800194e:	460a      	mov	r2, r1
 8001950:	4603      	mov	r3, r0
 8001952:	490f      	ldr	r1, [pc, #60]	; (8001990 <Rcc_enuSelectSystemClkSource+0x90>)
 8001954:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64AHBFreq = Global_u64SystemFreq;
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <Rcc_enuSelectSystemClkSource+0x90>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	490f      	ldr	r1, [pc, #60]	; (800199c <Rcc_enuSelectSystemClkSource+0x9c>)
 8001960:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP1Freq = Global_u64SystemFreq;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <Rcc_enuSelectSystemClkSource+0x90>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	490d      	ldr	r1, [pc, #52]	; (80019a0 <Rcc_enuSelectSystemClkSource+0xa0>)
 800196c:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP2Freq = Global_u64SystemFreq;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <Rcc_enuSelectSystemClkSource+0x90>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	490b      	ldr	r1, [pc, #44]	; (80019a4 <Rcc_enuSelectSystemClkSource+0xa4>)
 8001978:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return Loc_enuRccStatusError;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bc90      	pop	{r4, r7}
 8001986:	4770      	bx	lr
 8001988:	40023800 	.word	0x40023800
 800198c:	20000200 	.word	0x20000200
 8001990:	20000198 	.word	0x20000198
 8001994:	00f42400 	.word	0x00f42400
 8001998:	007a1200 	.word	0x007a1200
 800199c:	200001a0 	.word	0x200001a0
 80019a0:	200001a8 	.word	0x200001a8
 80019a4:	200001b0 	.word	0x200001b0

080019a8 <Rcc_enuEnablePeripheralClk>:
	}

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuEnablePeripheralClk(Rcc_BusIndexType Copy_enuBusIndex, u8 Copy_u8PeripheralIndex){
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralIndex>THIRTYONE_VALUE  || Copy_enuBusIndex > FOUR_VALUE){
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	2b1f      	cmp	r3, #31
 80019c0:	d802      	bhi.n	80019c8 <Rcc_enuEnablePeripheralClk+0x20>
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d902      	bls.n	80019ce <Rcc_enuEnablePeripheralClk+0x26>
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 80019c8:	2302      	movs	r3, #2
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e015      	b.n	80019fa <Rcc_enuEnablePeripheralClk+0x52>
	}
	else{
		WRITE_BIT((*Global_PeripheralClkRegEnArr[Copy_enuBusIndex]),Copy_u8PeripheralIndex,ONE_VALUE);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <Rcc_enuEnablePeripheralClk+0x60>)
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	79ba      	ldrb	r2, [r7, #6]
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f202 	lsl.w	r2, r1, r2
 80019e0:	43d2      	mvns	r2, r2
 80019e2:	401a      	ands	r2, r3
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4905      	ldr	r1, [pc, #20]	; (8001a08 <Rcc_enuEnablePeripheralClk+0x60>)
 80019f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019f6:	4302      	orrs	r2, r0
 80019f8:	601a      	str	r2, [r3, #0]
	}

	return Loc_enuRccStatusError;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000140 	.word	0x20000140

08001a0c <Rcc_enuConfigPLLI2S>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuConfigPLLI2S(const Rcc_PllI2SConfigType* Address_PllI2S){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]

	if(Address_PllI2S == NULL){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <Rcc_enuConfigPLLI2S+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e032      	b.n	8001a8a <Rcc_enuConfigPLLI2S+0x7e>
	}
	else{

		RCC_setPLL_I2S_N_Factor(Address_PllI2S->rcc_PLLI2S_N_From50To432);
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a2a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	8852      	ldrh	r2, [r2, #2]
 8001a36:	0192      	lsls	r2, r2, #6
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001a3e:	400a      	ands	r2, r1
 8001a40:	4915      	ldr	r1, [pc, #84]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_R_Factor(Address_PllI2S->rcc_select_pll_I2S_R);
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a56:	6093      	str	r3, [r2, #8]
		RCC_setPLL_I2S_Q_Factor(Address_PllI2S->rcc_select_pll_I2S_Q);
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001a6c:	490a      	ldr	r1, [pc, #40]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_Clk(Address_PllI2S->rcc_select_pll_i2s_source_clk);
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	7912      	ldrb	r2, [r2, #4]
 8001a80:	05d2      	lsls	r2, r2, #23
 8001a82:	4611      	mov	r1, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <Rcc_enuConfigPLLI2S+0x8c>)
 8001a86:	430b      	orrs	r3, r1
 8001a88:	6093      	str	r3, [r2, #8]
	}

	return Loc_enuRccStatusError;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40023800 	.word	0x40023800

08001a9c <Rcc_enuConfigPLLSAI>:


Rcc_StatusErrorType Rcc_enuConfigPLLSAI(const Rcc_PllSAIConfigType* Address_PllSAI){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]

	if(Address_PllSAI == NULL){
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <Rcc_enuConfigPLLSAI+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e06e      	b.n	8001b92 <Rcc_enuConfigPLLSAI+0xf6>
	}
	else{

		RCC_setPLL_SAI_N_Factor(Address_PllSAI->rcc_PLLSAI_N_From50To432);
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	8852      	ldrh	r2, [r2, #2]
 8001ac6:	0192      	lsls	r2, r2, #6
 8001ac8:	4611      	mov	r1, r2
 8001aca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001ace:	400a      	ands	r2, r1
 8001ad0:	4933      	ldr	r1, [pc, #204]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_Q_Factor(Address_PllSAI->rcc_select_pll_SAI_Q);
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001aec:	492c      	ldr	r1, [pc, #176]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_R_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001afc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		RCC_setPLL_SAI_QX_PLLI2SDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLI2SDIVQ_Qx_Last_FROM1to50);
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b0e:	f023 021f 	bic.w	r2, r3, #31
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	88db      	ldrh	r3, [r3, #6]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	4921      	ldr	r1, [pc, #132]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_QY_PLLSAIDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLSAIDIVQ_Qy_Last_FROM1to50);
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	889b      	ldrh	r3, [r3, #4]
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001b36:	491a      	ldr	r1, [pc, #104]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_RLcd_PLLSAIDIVR_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b52:	4913      	ldr	r1, [pc, #76]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		RCC_setPLL_SAI1A_Clk(Address_PllSAI->rcc_select_SAI1A_source);
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7a5b      	ldrb	r3, [r3, #9]
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b6e:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI1B_Clk(Address_PllSAI->rcc_select_SAI1B_source);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7a9b      	ldrb	r3, [r3, #10]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001b8a:	4905      	ldr	r1, [pc, #20]	; (8001ba0 <Rcc_enuConfigPLLSAI+0x104>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c



	}

	return Loc_enuRccStatusError;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]


}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <Rcc_enuInit>:


Rcc_StatusErrorType Rcc_enuInit(const Rcc_ConfigType* Address_Rcc){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]

	if(Address_Rcc == NULL){
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <Rcc_enuInit+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e09b      	b.n	8001cf4 <Rcc_enuInit+0x150>
	}
	else{

		/*  Enable Clocks */
		if(Address_Rcc->rcc_hse_on_or_off == RCC_ON){
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <Rcc_enuInit+0x30>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hse_on_or_off);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fc3f 	bl	800144c <Rcc_enuEnableClock>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e006      	b.n	8001be2 <Rcc_enuInit+0x3e>
		}

		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hse_on_or_off);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fcd5 	bl	8001588 <Rcc_enuDisableClock>
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_hsi_on_or_off == RCC_ON){
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	785b      	ldrb	r3, [r3, #1]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <Rcc_enuInit+0x56>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hsi_on_or_off);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fc2c 	bl	800144c <Rcc_enuEnableClock>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e006      	b.n	8001c08 <Rcc_enuInit+0x64>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hsi_on_or_off);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fcc2 	bl	8001588 <Rcc_enuDisableClock>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
		}


		if(Address_Rcc->rcc_pll_on_or_off == RCC_ON && Address_Rcc->address_pll_cfg  != NULL){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d112      	bne.n	8001c36 <Rcc_enuInit+0x92>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <Rcc_enuInit+0x92>
			Loc_enuRccStatusError = Rcc_enuConfigPLL(Address_Rcc->address_pll_cfg);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fcf9 	bl	8001614 <Rcc_enuConfigPLL>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pll_on_or_off);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	789b      	ldrb	r3, [r3, #2]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc0e 	bl	800144c <Rcc_enuEnableClock>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e006      	b.n	8001c44 <Rcc_enuInit+0xa0>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pll_on_or_off);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	789b      	ldrb	r3, [r3, #2]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fca4 	bl	8001588 <Rcc_enuDisableClock>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllI2S_on_or_off == RCC_ON && Address_Rcc->adress_pll_i2s_cfg  != NULL){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	78db      	ldrb	r3, [r3, #3]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d112      	bne.n	8001c72 <Rcc_enuInit+0xce>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <Rcc_enuInit+0xce>
			Loc_enuRccStatusError = 	Rcc_enuConfigPLLI2S(Address_Rcc->adress_pll_i2s_cfg);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fed7 	bl	8001a0c <Rcc_enuConfigPLLI2S>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	78db      	ldrb	r3, [r3, #3]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fbf0 	bl	800144c <Rcc_enuEnableClock>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e006      	b.n	8001c80 <Rcc_enuInit+0xdc>
		}
		else{
			Loc_enuRccStatusError = 	Rcc_enuDisableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	78db      	ldrb	r3, [r3, #3]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fc86 	bl	8001588 <Rcc_enuDisableClock>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllSAI_on_or_off == RCC_ON && Address_Rcc->address_pll_sai_cfg  != NULL){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	791b      	ldrb	r3, [r3, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d112      	bne.n	8001cae <Rcc_enuInit+0x10a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <Rcc_enuInit+0x10a>
			Loc_enuRccStatusError = Rcc_enuConfigPLLSAI(Address_Rcc->address_pll_sai_cfg);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff01 	bl	8001a9c <Rcc_enuConfigPLLSAI>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fbd2 	bl	800144c <Rcc_enuEnableClock>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e006      	b.n	8001cbc <Rcc_enuInit+0x118>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	791b      	ldrb	r3, [r3, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fc68 	bl	8001588 <Rcc_enuDisableClock>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	73fb      	strb	r3, [r7, #15]
		}

		Loc_enuRccStatusError = Rcc_enuSelectAPB2Prescaler(Address_Rcc->rcc_apb2_select_prescaler );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7d1b      	ldrb	r3, [r3, #20]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fd95 	bl	80017f0 <Rcc_enuSelectAPB2Prescaler>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAPB1Prescaler( Address_Rcc->rcc_apb1_select_prescaler);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7d5b      	ldrb	r3, [r3, #21]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fdbc 	bl	800184c <Rcc_enuSelectAPB1Prescaler>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAHBPrescaler( Address_Rcc->rcc_ahb_select_prescaler);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7d9b      	ldrb	r3, [r3, #22]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fde5 	bl	80018ac <Rcc_enuSelectAHBPrescaler>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectSystemClkSource(Address_Rcc->rcc_sysmte_clk_soruce);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7ddb      	ldrb	r3, [r3, #23]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fe08 	bl	8001900 <Rcc_enuSelectSystemClkSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]


	}

	return Loc_enuRccStatusError;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <Systick_enuInit>:


/******************************* Software Interfaces Implementation **********************************/


Systick_ErrorStatusType Systick_enuInit(void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	Systick_ErrorStatusType Loc_enuSystickErrorStatus = SYSTICK_STATUS_OK;
 8001d06:	2301      	movs	r3, #1
 8001d08:	71fb      	strb	r3, [r7, #7]

	/* Disable Interrupt */
	Systick_disableInterrupt();
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <Systick_enuInit+0x70>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <Systick_enuInit+0x70>)
 8001d10:	f023 0302 	bic.w	r3, r3, #2
 8001d14:	6013      	str	r3, [r2, #0]

	/* Select Clock Source */
	Systick_setClkSoruce(STK_CLK_SORUCE);
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <Systick_enuInit+0x70>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <Systick_enuInit+0x70>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6013      	str	r3, [r2, #0]

	GlobalStatic_u64SystickFreq =Global_u64AHBFreq / (!STK_CLK_SORUCE*8 + STK_CLK_SORUCE);
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <Systick_enuInit+0x74>)
 8001d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	08c2      	lsrs	r2, r0, #3
 8001d32:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8001d36:	08cb      	lsrs	r3, r1, #3
 8001d38:	490f      	ldr	r1, [pc, #60]	; (8001d78 <Systick_enuInit+0x78>)
 8001d3a:	e9c1 2300 	strd	r2, r3, [r1]
	Global_f64TimeOverflow = (f64)STK_LOAD_FULL_VALUE/(f64)GlobalStatic_u64SystickFreq;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <Systick_enuInit+0x78>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe fbd6 	bl	80004f8 <__aeabi_ul2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8001d54:	4909      	ldr	r1, [pc, #36]	; (8001d7c <Systick_enuInit+0x7c>)
 8001d56:	f7fe fd2f 	bl	80007b8 <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <Systick_enuInit+0x80>)
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuSystickErrorStatus;
 8001d64:	79fb      	ldrb	r3, [r7, #7]


}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010
 8001d74:	200001a0 	.word	0x200001a0
 8001d78:	20000220 	.word	0x20000220
 8001d7c:	416fffff 	.word	0x416fffff
 8001d80:	20000210 	.word	0x20000210

08001d84 <SysTick_Handler>:


}

/**************************** ISR Implementation ************************************/
void SysTick_Handler (void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0

	if(Systick_OverflowInterruptHandler != NULL){
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <SysTick_Handler+0x38>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <SysTick_Handler+0x12>
		Systick_OverflowInterruptHandler();
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <SysTick_Handler+0x38>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4798      	blx	r3
	else{
		/* Error in setting callback */

	}

	if(Global_u8TimerTypeFlag == SYSTICK_INTERVAL_FLAG){
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <SysTick_Handler+0x3c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <SysTick_Handler+0x32>
		Systick_disableInterrupt();
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <SysTick_Handler+0x40>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <SysTick_Handler+0x40>)
 8001da4:	f023 0302 	bic.w	r3, r3, #2
 8001da8:	6013      	str	r3, [r2, #0]
		Systick_stopTimer();
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <SysTick_Handler+0x40>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <SysTick_Handler+0x40>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
	}
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000218 	.word	0x20000218
 8001dc0:	20000208 	.word	0x20000208
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <Usart_enuSetBaudrate>:


static volatile USARTx_Type* uartArr[] = {USART1,USART2,USART3,USART4,USART5,USART6,USART7,USART8};

/********************************** Software Interfaces Declarations *******************/
static Usart_StatusErrorType Usart_enuSetBaudrate(const Usart_ConfigType* Address_Usart){
 8001dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dcc:	b08c      	sub	sp, #48	; 0x30
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	f64 Loc_f64Brr ;
	u64 Loc_u64Fraction ;
	u64 Loc_u64IntPart ;
	u8 Loc_u8OverRun;
	if(Address_Usart == NULL){
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <Usart_enuSetBaudrate+0x1e>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001de4:	e158      	b.n	8002098 <Usart_enuSetBaudrate+0x2d0>
	}
	else if(Address_Usart->select_sync_mode == USART_SELECT_ASYNCHRONOUS_MODE){
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	789b      	ldrb	r3, [r3, #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8151 	bne.w	8002092 <Usart_enuSetBaudrate+0x2ca>
		Loc_u8OverRun = Address_Usart->select_oversample & 0b10;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	75fb      	strb	r3, [r7, #23]

		switch(Address_Usart->select_channel_number){
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	f200 8143 	bhi.w	800208a <Usart_enuSetBaudrate+0x2c2>
 8001e04:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <Usart_enuSetBaudrate+0x44>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e2d 	.word	0x08001e2d
 8001e10:	08001f5d 	.word	0x08001f5d
 8001e14:	08001f5d 	.word	0x08001f5d
 8001e18:	08001f5d 	.word	0x08001f5d
 8001e1c:	08001f5d 	.word	0x08001f5d
 8001e20:	08001e2d 	.word	0x08001e2d
 8001e24:	08001f5d 	.word	0x08001f5d
 8001e28:	08001f5d 	.word	0x08001f5d

		case USART_SELECT_CHANNEL_1:
		case USART_SELECT_CHANNEL_6:

			Loc_f64Brr = (f64)Global_u64ABP2Freq/(Address_Usart->baude_rate)/(8*(2-Loc_u8OverRun));
 8001e2c:	4b9e      	ldr	r3, [pc, #632]	; (80020a8 <Usart_enuSetBaudrate+0x2e0>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fb5f 	bl	80004f8 <__aeabi_ul2d>
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	460d      	mov	r5, r1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fb56 	bl	80004f8 <__aeabi_ul2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4620      	mov	r0, r4
 8001e52:	4629      	mov	r1, r5
 8001e54:	f7fe fcb0 	bl	80007b8 <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4614      	mov	r4, r2
 8001e5e:	461d      	mov	r5, r3
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	f1c3 0302 	rsb	r3, r3, #2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb11 	bl	8000490 <__aeabi_i2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe fc9f 	bl	80007b8 <__aeabi_ddiv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_u64IntPart = (u64)Loc_f64Brr;
 8001e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e86:	f7fe fd97 	bl	80009b8 <__aeabi_d2ulz>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_u64Fraction =(Loc_f64Brr-Loc_u64IntPart)*16+0.5;
 8001e92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e96:	f7fe fb2f 	bl	80004f8 <__aeabi_ul2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ea2:	f7fe f9a7 	bl	80001f4 <__aeabi_dsub>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b7e      	ldr	r3, [pc, #504]	; (80020ac <Usart_enuSetBaudrate+0x2e4>)
 8001eb4:	f7fe fb56 	bl	8000564 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b7a      	ldr	r3, [pc, #488]	; (80020b0 <Usart_enuSetBaudrate+0x2e8>)
 8001ec6:	f7fe f997 	bl	80001f8 <__adddf3>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fd71 	bl	80009b8 <__aeabi_d2ulz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_u64Fraction ==16){
 8001ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee2:	f1a2 0110 	sub.w	r1, r2, #16
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	d10d      	bne.n	8001f06 <Usart_enuSetBaudrate+0x13e>
				Loc_u64Fraction = 0;
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_u64IntPart++;
 8001ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001efa:	f112 0801 	adds.w	r8, r2, #1
 8001efe:	f143 0900 	adc.w	r9, r3, #0
 8001f02:	e9c7 8906 	strd	r8, r9, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b291      	uxth	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	4610      	mov	r0, r2
 8001f28:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8001f2a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_u64Fraction);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8001f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 010f 	bic.w	r1, r3, #15
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8001f52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]

			break;
 8001f5a:	e09d      	b.n	8002098 <Usart_enuSetBaudrate+0x2d0>
		case USART_SELECT_CHANNEL_4:
		case USART_SELECT_CHANNEL_5:
		case USART_SELECT_CHANNEL_7:
		case USART_SELECT_CHANNEL_8:

			Loc_f64Brr = (f64)Global_u64ABP1Freq/(Address_Usart->baude_rate)/(8*(2-Loc_u8OverRun));
 8001f5c:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <Usart_enuSetBaudrate+0x2f0>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fac7 	bl	80004f8 <__aeabi_ul2d>
 8001f6a:	4680      	mov	r8, r0
 8001f6c:	4689      	mov	r9, r1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fabe 	bl	80004f8 <__aeabi_ul2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4640      	mov	r0, r8
 8001f82:	4649      	mov	r1, r9
 8001f84:	f7fe fc18 	bl	80007b8 <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	4699      	mov	r9, r3
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	f1c3 0302 	rsb	r3, r3, #2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa79 	bl	8000490 <__aeabi_i2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4640      	mov	r0, r8
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	f7fe fc07 	bl	80007b8 <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_u64IntPart = (u64)Loc_f64Brr;
 8001fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fb6:	f7fe fcff 	bl	80009b8 <__aeabi_d2ulz>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_u64Fraction =(Loc_f64Brr-Loc_u64IntPart)*16+0.5;
 8001fc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fc6:	f7fe fa97 	bl	80004f8 <__aeabi_ul2d>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd2:	f7fe f90f 	bl	80001f4 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <Usart_enuSetBaudrate+0x2e4>)
 8001fe4:	f7fe fabe 	bl	8000564 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <Usart_enuSetBaudrate+0x2e8>)
 8001ff6:	f7fe f8ff 	bl	80001f8 <__adddf3>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fcd9 	bl	80009b8 <__aeabi_d2ulz>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_u64Fraction ==16){
 800200e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002012:	f1a2 0110 	sub.w	r1, r2, #16
 8002016:	430b      	orrs	r3, r1
 8002018:	d10c      	bne.n	8002034 <Usart_enuSetBaudrate+0x26c>
				Loc_u64Fraction = 0;
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_u64IntPart++;
 8002026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202a:	1c54      	adds	r4, r2, #1
 800202c:	f143 0500 	adc.w	r5, r3, #0
 8002030:	e9c7 4506 	strd	r4, r5, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b291      	uxth	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	4610      	mov	r0, r2
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8002058:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 010f 	bic.w	r1, r3, #15
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <Usart_enuSetBaudrate+0x2ec>)
 8002080:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]

			break;
 8002088:	e006      	b.n	8002098 <Usart_enuSetBaudrate+0x2d0>


		default :
			Loc_UsartStatusError = USART_STATUS_FAIL;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002090:	e002      	b.n	8002098 <Usart_enuSetBaudrate+0x2d0>

		}
	}
	else{
		/* Sync Mode */
		Loc_UsartStatusError = USART_STATUS_FAIL;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return Loc_UsartStatusError;
 8002098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 800209c:	4618      	mov	r0, r3
 800209e:	3730      	adds	r7, #48	; 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020a6:	bf00      	nop
 80020a8:	200001b0 	.word	0x200001b0
 80020ac:	40300000 	.word	0x40300000
 80020b0:	3fe00000 	.word	0x3fe00000
 80020b4:	200001b8 	.word	0x200001b8
 80020b8:	200001a8 	.word	0x200001a8

080020bc <Usart_enuEnableRccClock>:


static Usart_StatusErrorType Usart_enuEnableRccClock(const Usart_ConfigType* Address_Usart){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]

		if(Address_Usart == NULL){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <Usart_enuEnableRccClock+0x18>
			Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 80020ce:	2302      	movs	r3, #2
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e03c      	b.n	800214e <Usart_enuEnableRccClock+0x92>
		}
		else {
			switch(Address_Usart->select_channel_number){
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b07      	cmp	r3, #7
 80020da:	d836      	bhi.n	800214a <Usart_enuEnableRccClock+0x8e>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <Usart_enuEnableRccClock+0x28>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08002105 	.word	0x08002105
 80020e8:	08002119 	.word	0x08002119
 80020ec:	08002121 	.word	0x08002121
 80020f0:	08002129 	.word	0x08002129
 80020f4:	08002131 	.word	0x08002131
 80020f8:	0800210f 	.word	0x0800210f
 80020fc:	08002139 	.word	0x08002139
 8002100:	08002141 	.word	0x08002141
			case USART_SELECT_CHANNEL_1:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB2, FOUR_VALUE);
 8002104:	2104      	movs	r1, #4
 8002106:	2004      	movs	r0, #4
 8002108:	f7ff fc4e 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
				break;
 800210c:	e01f      	b.n	800214e <Usart_enuEnableRccClock+0x92>
			case USART_SELECT_CHANNEL_6:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB2, FIVE_VALUE);
 800210e:	2105      	movs	r1, #5
 8002110:	2004      	movs	r0, #4
 8002112:	f7ff fc49 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
				break;
 8002116:	e01a      	b.n	800214e <Usart_enuEnableRccClock+0x92>

			case USART_SELECT_CHANNEL_2:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, SEVENTEEN_VALUE);
 8002118:	2111      	movs	r1, #17
 800211a:	2003      	movs	r0, #3
 800211c:	f7ff fc44 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_3:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, EIGHTEEN_VALUE);
 8002120:	2112      	movs	r1, #18
 8002122:	2003      	movs	r0, #3
 8002124:	f7ff fc40 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_4:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, NINETEEN_VALUE);
 8002128:	2113      	movs	r1, #19
 800212a:	2003      	movs	r0, #3
 800212c:	f7ff fc3c 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_5:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTY_VALUE);
 8002130:	2114      	movs	r1, #20
 8002132:	2003      	movs	r0, #3
 8002134:	f7ff fc38 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_7:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, THIRTY_VALUE);
 8002138:	211e      	movs	r1, #30
 800213a:	2003      	movs	r0, #3
 800213c:	f7ff fc34 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_8:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, THIRTYONE_VALUE);
 8002140:	211f      	movs	r1, #31
 8002142:	2003      	movs	r0, #3
 8002144:	f7ff fc30 	bl	80019a8 <Rcc_enuEnablePeripheralClk>
				break;
 8002148:	e001      	b.n	800214e <Usart_enuEnableRccClock+0x92>

			default :
					Loc_UsartStatusError = USART_STATUS_FAIL;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]

			}
		}

		return Loc_UsartStatusError;
 800214e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <Usart_enuInit>:



/******************************* Software Interfaces Implementation *******************/

Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
	if(Address_Usart == NULL){
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <Usart_enuInit+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 800216a:	2302      	movs	r3, #2
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	e10a      	b.n	8002386 <Usart_enuInit+0x22e>
	}
	else{
			/* Enable Usartx Rcc Clock */
			Loc_UsartStatusError = Usart_enuEnableRccClock(Address_Usart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffa3 	bl	80020bc <Usart_enuEnableRccClock>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]

			/* Set Baudrate */
			Loc_UsartStatusError = Usart_enuSetBaudrate(Address_Usart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fe24 	bl	8001dc8 <Usart_enuSetBaudrate>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]

			/* Set Data Size */
			Usart_SetDataSize((Address_Usart->select_channel_number),(Address_Usart->select_character_size));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b81      	ldr	r3, [pc, #516]	; (8002390 <Usart_enuInit+0x238>)
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	031b      	lsls	r3, r3, #12
 800219c:	4619      	mov	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <Usart_enuInit+0x238>)
 80021a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]

			/* Set Clock Phase if Sync */
			Usart_SetClockPhase((Address_Usart->select_channel_number),(Address_Usart->select_clock_phase));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b76      	ldr	r3, [pc, #472]	; (8002390 <Usart_enuInit+0x238>)
 80021b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	79db      	ldrb	r3, [r3, #7]
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4619      	mov	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	4b70      	ldr	r3, [pc, #448]	; (8002390 <Usart_enuInit+0x238>)
 80021d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	611a      	str	r2, [r3, #16]

			/* Set Clock Polarity if Sync */
			Usart_SetClockPolarity((Address_Usart->select_channel_number),(Address_Usart->select_clock_polarity));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b6c      	ldr	r3, [pc, #432]	; (8002390 <Usart_enuInit+0x238>)
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	029b      	lsls	r3, r3, #10
 80021f0:	4619      	mov	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <Usart_enuInit+0x238>)
 80021fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80021fe:	430a      	orrs	r2, r1
 8002200:	611a      	str	r2, [r3, #16]

			/* enable or disable DMA */
			Usart_SetDmaMode((Address_Usart->select_channel_number),(Address_Usart->select_dma_tx_enable_rx_enable));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4b61      	ldr	r3, [pc, #388]	; (8002390 <Usart_enuInit+0x238>)
 800220a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7a1b      	ldrb	r3, [r3, #8]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <Usart_enuInit+0x238>)
 8002224:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002228:	430a      	orrs	r2, r1
 800222a:	615a      	str	r2, [r3, #20]

			/* enable or disable FULL-Duplex */
			Usart_SetDuplexMode((Address_Usart->select_channel_number),(Address_Usart->select_full_duplex_half_duplex));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b57      	ldr	r3, [pc, #348]	; (8002390 <Usart_enuInit+0x238>)
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f023 0208 	bic.w	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7a5b      	ldrb	r3, [r3, #9]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4619      	mov	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <Usart_enuInit+0x238>)
 800224e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002252:	430a      	orrs	r2, r1
 8002254:	615a      	str	r2, [r3, #20]

			/* Select OverSample mode  */
			Usart_SelectOversampleMode((Address_Usart->select_channel_number),(Address_Usart->select_oversample));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <Usart_enuInit+0x238>)
 800225e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	795b      	ldrb	r3, [r3, #5]
 800226c:	02db      	lsls	r3, r3, #11
 800226e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	4b45      	ldr	r3, [pc, #276]	; (8002390 <Usart_enuInit+0x238>)
 800227a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800227e:	430a      	orrs	r2, r1
 8002280:	615a      	str	r2, [r3, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4b41      	ldr	r3, [pc, #260]	; (8002390 <Usart_enuInit+0x238>)
 800228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	795b      	ldrb	r3, [r3, #5]
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	03db      	lsls	r3, r3, #15
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <Usart_enuInit+0x238>)
 80022a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]


			/* Select Parity bit mode  */
			Usart_SelectParityBitMode((Address_Usart->select_channel_number),(Address_Usart->select_parity_bits));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <Usart_enuInit+0x238>)
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f423 61c0 	bic.w	r1, r3, #1536	; 0x600
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	791b      	ldrb	r3, [r3, #4]
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <Usart_enuInit+0x238>)
 80022d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]


			/* Select Stop bits  */
			Usart_SelectStopBits((Address_Usart->select_channel_number),(Address_Usart->select_stop_bits));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <Usart_enuInit+0x238>)
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <Usart_enuInit+0x238>)
 80022f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022fa:	611a      	str	r2, [r3, #16]

			/* Enable Clk if Sync  */
			Usart_SetClkInSyncMode((Address_Usart->select_channel_number),(Address_Usart->select_sync_mode));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <Usart_enuInit+0x238>)
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	02db      	lsls	r3, r3, #11
 8002314:	4619      	mov	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <Usart_enuInit+0x238>)
 800231e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002322:	430a      	orrs	r2, r1
 8002324:	611a      	str	r2, [r3, #16]


			/* Enable Tx, Rx , UART */
			Usart_Enable(Address_Usart->select_channel_number);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <Usart_enuInit+0x238>)
 800232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <Usart_enuInit+0x238>)
 800233c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002344:	60da      	str	r2, [r3, #12]
			Usart_EnableTx(Address_Usart->select_channel_number);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <Usart_enuInit+0x238>)
 800234e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <Usart_enuInit+0x238>)
 800235c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002360:	f042 0208 	orr.w	r2, r2, #8
 8002364:	60da      	str	r2, [r3, #12]
			Usart_EnableRx(Address_Usart->select_channel_number);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <Usart_enuInit+0x238>)
 800236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <Usart_enuInit+0x238>)
 800237c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002380:	f042 0204 	orr.w	r2, r2, #4
 8002384:	60da      	str	r2, [r3, #12]


	}
	return Loc_UsartStatusError;
 8002386:	7bfb      	ldrb	r3, [r7, #15]

}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200001b8 	.word	0x200001b8

08002394 <Usart_enuReceiveStringBlocking>:
	return Loc_UsartStatusError;

}


Usart_StatusErrorType Usart_enuReceiveStringBlocking(const Usart_ConfigType* Address_Usart, u8* Address_Data){
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]

	u8 Loc_u8Counter = ZERO_VALUE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73bb      	strb	r3, [r7, #14]
	u8 Loc_u8FlagCheck = ONE_VALUE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	737b      	strb	r3, [r7, #13]
	u8 Loc_u8ReceivedChar;
	if(Address_Usart == NULL || Address_Data == NULL){
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <Usart_enuReceiveStringBlocking+0x22>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d123      	bne.n	80023fe <Usart_enuReceiveStringBlocking+0x6a>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 80023b6:	2302      	movs	r3, #2
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e023      	b.n	8002404 <Usart_enuReceiveStringBlocking+0x70>
	}
	else{

		while( Loc_u8FlagCheck == ONE_VALUE){

		while( ( Usart_IsReceiveDataRegisterEmpty( Address_Usart->select_channel_number)  == ONE_VALUE)  );
 80023bc:	bf00      	nop
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <Usart_enuReceiveStringBlocking+0x80>)
 80023c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f4      	beq.n	80023be <Usart_enuReceiveStringBlocking+0x2a>


		Loc_u8ReceivedChar = Usart_GetDataReg(( Address_Usart->select_channel_number));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <Usart_enuReceiveStringBlocking+0x80>)
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	733b      	strb	r3, [r7, #12]
		Address_Data[Loc_u8Counter++]= Loc_u8ReceivedChar;
 80023e4:	7bbb      	ldrb	r3, [r7, #14]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	73ba      	strb	r2, [r7, #14]
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	7b3a      	ldrb	r2, [r7, #12]
 80023f2:	701a      	strb	r2, [r3, #0]
		if( Loc_u8ReceivedChar == '\0' ){
 80023f4:	7b3b      	ldrb	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <Usart_enuReceiveStringBlocking+0x6a>
			Loc_u8FlagCheck = ZERO_VALUE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	737b      	strb	r3, [r7, #13]
		while( Loc_u8FlagCheck == ONE_VALUE){
 80023fe:	7b7b      	ldrb	r3, [r7, #13]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d0db      	beq.n	80023bc <Usart_enuReceiveStringBlocking+0x28>
		}
		}


	}
	return Loc_UsartStatusError;
 8002404:	7bfb      	ldrb	r3, [r7, #15]

}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200001b8 	.word	0x200001b8

08002418 <CompareTwoStrings>:

	return Loc_enuStatus;
}


Std_StatusType CompareTwoStrings(u8* Address_Data1, u8* Address_Data2, Std_True_or_FalseType* Address_Result){
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
	u8 Loc_u8FlagCheck = ONE_VALUE;
 8002424:	2301      	movs	r3, #1
 8002426:	757b      	strb	r3, [r7, #21]
	u8 Loc_u8Counter = ZERO_VALUE;
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	75bb      	strb	r3, [r7, #22]
	if(Address_Data1 == NULL ||Address_Data2 == NULL ||Address_Result == NULL  ){
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <CompareTwoStrings+0x2a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <CompareTwoStrings+0x2a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <CompareTwoStrings+0x36>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
 8002442:	2301      	movs	r3, #1
 8002444:	75bb      	strb	r3, [r7, #22]
 8002446:	e027      	b.n	8002498 <CompareTwoStrings+0x80>
		while(Address_Data1[Loc_u8Counter] && Address_Data1[Loc_u8Counter] && Loc_u8FlagCheck == ONE_VALUE) {

			if(Address_Data1[Loc_u8Counter] != Address_Data1[Loc_u8Counter]){
				Loc_u8FlagCheck = ZERO_VALUE;
			}
			Loc_u8Counter++;
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	3301      	adds	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
		while(Address_Data1[Loc_u8Counter] && Address_Data1[Loc_u8Counter] && Loc_u8FlagCheck == ONE_VALUE) {
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <CompareTwoStrings+0x54>
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <CompareTwoStrings+0x54>
 8002466:	7d7b      	ldrb	r3, [r7, #21]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d0ed      	beq.n	8002448 <CompareTwoStrings+0x30>
		}

		if(Address_Data1[Loc_u8Counter] == '\0' && Address_Data2[Loc_u8Counter] == '\0' && Loc_u8FlagCheck == ONE_VALUE){
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10c      	bne.n	8002492 <CompareTwoStrings+0x7a>
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <CompareTwoStrings+0x7a>
 8002484:	7d7b      	ldrb	r3, [r7, #21]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d103      	bne.n	8002492 <CompareTwoStrings+0x7a>
			*Address_Result = STD_TRUE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e002      	b.n	8002498 <CompareTwoStrings+0x80>
		}
		else{
			*Address_Result= STD_FALSE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
		}


	}
	return Loc_enuStatus;
 8002498:	7dbb      	ldrb	r3, [r7, #22]

}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024a8:	480d      	ldr	r0, [pc, #52]	; (80024e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b2:	490d      	ldr	r1, [pc, #52]	; (80024e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <LoopForever+0xe>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c8:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <LoopForever+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024d6:	f000 f811 	bl	80024fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024da:	f7fe fc11 	bl	8000d00 <main>

080024de <LoopForever>:

LoopForever:
  b LoopForever
 80024de:	e7fe      	b.n	80024de <LoopForever>
  ldr   r0, =_estack
 80024e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80024ec:	08002574 	.word	0x08002574
  ldr r2, =_sbss
 80024f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024f4:	20000228 	.word	0x20000228

080024f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC_IRQHandler>
	...

080024fc <__libc_init_array>:
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	4d0d      	ldr	r5, [pc, #52]	; (8002534 <__libc_init_array+0x38>)
 8002500:	4c0d      	ldr	r4, [pc, #52]	; (8002538 <__libc_init_array+0x3c>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	2600      	movs	r6, #0
 8002508:	42a6      	cmp	r6, r4
 800250a:	d109      	bne.n	8002520 <__libc_init_array+0x24>
 800250c:	4d0b      	ldr	r5, [pc, #44]	; (800253c <__libc_init_array+0x40>)
 800250e:	4c0c      	ldr	r4, [pc, #48]	; (8002540 <__libc_init_array+0x44>)
 8002510:	f000 f818 	bl	8002544 <_init>
 8002514:	1b64      	subs	r4, r4, r5
 8002516:	10a4      	asrs	r4, r4, #2
 8002518:	2600      	movs	r6, #0
 800251a:	42a6      	cmp	r6, r4
 800251c:	d105      	bne.n	800252a <__libc_init_array+0x2e>
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	f855 3b04 	ldr.w	r3, [r5], #4
 8002524:	4798      	blx	r3
 8002526:	3601      	adds	r6, #1
 8002528:	e7ee      	b.n	8002508 <__libc_init_array+0xc>
 800252a:	f855 3b04 	ldr.w	r3, [r5], #4
 800252e:	4798      	blx	r3
 8002530:	3601      	adds	r6, #1
 8002532:	e7f2      	b.n	800251a <__libc_init_array+0x1e>
 8002534:	0800256c 	.word	0x0800256c
 8002538:	0800256c 	.word	0x0800256c
 800253c:	0800256c 	.word	0x0800256c
 8002540:	08002570 	.word	0x08002570

08002544 <_init>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr

08002550 <_fini>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr
