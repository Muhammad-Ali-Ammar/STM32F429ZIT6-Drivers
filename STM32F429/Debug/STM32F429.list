
STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f5c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002108  08002108  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002108  08002108  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002110  08002110  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08002118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00000058  20000158  20000158  00020158  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003766  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000854  00000000  00000000  00023931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002f0  00000000  00000000  00024188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000230  00000000  00000000  00024478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001b35  00000000  00000000  000246a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000167b  00000000  00000000  000261dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000118d5  00000000  00000000  00027858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d34  00000000  00000000  00039130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00039e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000158 	.word	0x20000158
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080020f0 	.word	0x080020f0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000015c 	.word	0x2000015c
 80001e8:	080020f0 	.word	0x080020f0

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_uldivmod>:
 8000988:	b953      	cbnz	r3, 80009a0 <__aeabi_uldivmod+0x18>
 800098a:	b94a      	cbnz	r2, 80009a0 <__aeabi_uldivmod+0x18>
 800098c:	2900      	cmp	r1, #0
 800098e:	bf08      	it	eq
 8000990:	2800      	cmpeq	r0, #0
 8000992:	bf1c      	itt	ne
 8000994:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000998:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800099c:	f000 b970 	b.w	8000c80 <__aeabi_idiv0>
 80009a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a8:	f000 f806 	bl	80009b8 <__udivmoddi4>
 80009ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b4:	b004      	add	sp, #16
 80009b6:	4770      	bx	lr

080009b8 <__udivmoddi4>:
 80009b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009bc:	9e08      	ldr	r6, [sp, #32]
 80009be:	460d      	mov	r5, r1
 80009c0:	4604      	mov	r4, r0
 80009c2:	460f      	mov	r7, r1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d14a      	bne.n	8000a5e <__udivmoddi4+0xa6>
 80009c8:	428a      	cmp	r2, r1
 80009ca:	4694      	mov	ip, r2
 80009cc:	d965      	bls.n	8000a9a <__udivmoddi4+0xe2>
 80009ce:	fab2 f382 	clz	r3, r2
 80009d2:	b143      	cbz	r3, 80009e6 <__udivmoddi4+0x2e>
 80009d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80009d8:	f1c3 0220 	rsb	r2, r3, #32
 80009dc:	409f      	lsls	r7, r3
 80009de:	fa20 f202 	lsr.w	r2, r0, r2
 80009e2:	4317      	orrs	r7, r2
 80009e4:	409c      	lsls	r4, r3
 80009e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ea:	fa1f f58c 	uxth.w	r5, ip
 80009ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80009f2:	0c22      	lsrs	r2, r4, #16
 80009f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80009f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009fc:	fb01 f005 	mul.w	r0, r1, r5
 8000a00:	4290      	cmp	r0, r2
 8000a02:	d90a      	bls.n	8000a1a <__udivmoddi4+0x62>
 8000a04:	eb1c 0202 	adds.w	r2, ip, r2
 8000a08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a0c:	f080 811c 	bcs.w	8000c48 <__udivmoddi4+0x290>
 8000a10:	4290      	cmp	r0, r2
 8000a12:	f240 8119 	bls.w	8000c48 <__udivmoddi4+0x290>
 8000a16:	3902      	subs	r1, #2
 8000a18:	4462      	add	r2, ip
 8000a1a:	1a12      	subs	r2, r2, r0
 8000a1c:	b2a4      	uxth	r4, r4
 8000a1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a2a:	fb00 f505 	mul.w	r5, r0, r5
 8000a2e:	42a5      	cmp	r5, r4
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x90>
 8000a32:	eb1c 0404 	adds.w	r4, ip, r4
 8000a36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a3a:	f080 8107 	bcs.w	8000c4c <__udivmoddi4+0x294>
 8000a3e:	42a5      	cmp	r5, r4
 8000a40:	f240 8104 	bls.w	8000c4c <__udivmoddi4+0x294>
 8000a44:	4464      	add	r4, ip
 8000a46:	3802      	subs	r0, #2
 8000a48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a4c:	1b64      	subs	r4, r4, r5
 8000a4e:	2100      	movs	r1, #0
 8000a50:	b11e      	cbz	r6, 8000a5a <__udivmoddi4+0xa2>
 8000a52:	40dc      	lsrs	r4, r3
 8000a54:	2300      	movs	r3, #0
 8000a56:	e9c6 4300 	strd	r4, r3, [r6]
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0xbc>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	f000 80ed 	beq.w	8000c42 <__udivmoddi4+0x28a>
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000a6e:	4608      	mov	r0, r1
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	fab3 f183 	clz	r1, r3
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d149      	bne.n	8000b10 <__udivmoddi4+0x158>
 8000a7c:	42ab      	cmp	r3, r5
 8000a7e:	d302      	bcc.n	8000a86 <__udivmoddi4+0xce>
 8000a80:	4282      	cmp	r2, r0
 8000a82:	f200 80f8 	bhi.w	8000c76 <__udivmoddi4+0x2be>
 8000a86:	1a84      	subs	r4, r0, r2
 8000a88:	eb65 0203 	sbc.w	r2, r5, r3
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d0e2      	beq.n	8000a5a <__udivmoddi4+0xa2>
 8000a94:	e9c6 4700 	strd	r4, r7, [r6]
 8000a98:	e7df      	b.n	8000a5a <__udivmoddi4+0xa2>
 8000a9a:	b902      	cbnz	r2, 8000a9e <__udivmoddi4+0xe6>
 8000a9c:	deff      	udf	#255	; 0xff
 8000a9e:	fab2 f382 	clz	r3, r2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 8090 	bne.w	8000bc8 <__udivmoddi4+0x210>
 8000aa8:	1a8a      	subs	r2, r1, r2
 8000aaa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aae:	fa1f fe8c 	uxth.w	lr, ip
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ab8:	fb07 2015 	mls	r0, r7, r5, r2
 8000abc:	0c22      	lsrs	r2, r4, #16
 8000abe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ac2:	fb0e f005 	mul.w	r0, lr, r5
 8000ac6:	4290      	cmp	r0, r2
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x124>
 8000aca:	eb1c 0202 	adds.w	r2, ip, r2
 8000ace:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ad2:	d202      	bcs.n	8000ada <__udivmoddi4+0x122>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f200 80cb 	bhi.w	8000c70 <__udivmoddi4+0x2b8>
 8000ada:	4645      	mov	r5, r8
 8000adc:	1a12      	subs	r2, r2, r0
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ae4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ae8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aec:	fb0e fe00 	mul.w	lr, lr, r0
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x14e>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000afc:	d202      	bcs.n	8000b04 <__udivmoddi4+0x14c>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	f200 80bb 	bhi.w	8000c7a <__udivmoddi4+0x2c2>
 8000b04:	4610      	mov	r0, r2
 8000b06:	eba4 040e 	sub.w	r4, r4, lr
 8000b0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b0e:	e79f      	b.n	8000a50 <__udivmoddi4+0x98>
 8000b10:	f1c1 0720 	rsb	r7, r1, #32
 8000b14:	408b      	lsls	r3, r1
 8000b16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000b22:	fa20 f307 	lsr.w	r3, r0, r7
 8000b26:	40fd      	lsrs	r5, r7
 8000b28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b2c:	4323      	orrs	r3, r4
 8000b2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	fb09 5518 	mls	r5, r9, r8, r5
 8000b3a:	0c1c      	lsrs	r4, r3, #16
 8000b3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b40:	fb08 f50e 	mul.w	r5, r8, lr
 8000b44:	42a5      	cmp	r5, r4
 8000b46:	fa02 f201 	lsl.w	r2, r2, r1
 8000b4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000b4e:	d90b      	bls.n	8000b68 <__udivmoddi4+0x1b0>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b58:	f080 8088 	bcs.w	8000c6c <__udivmoddi4+0x2b4>
 8000b5c:	42a5      	cmp	r5, r4
 8000b5e:	f240 8085 	bls.w	8000c6c <__udivmoddi4+0x2b4>
 8000b62:	f1a8 0802 	sub.w	r8, r8, #2
 8000b66:	4464      	add	r4, ip
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	b29d      	uxth	r5, r3
 8000b6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b70:	fb09 4413 	mls	r4, r9, r3, r4
 8000b74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x1da>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000b88:	d26c      	bcs.n	8000c64 <__udivmoddi4+0x2ac>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	d96a      	bls.n	8000c64 <__udivmoddi4+0x2ac>
 8000b8e:	3b02      	subs	r3, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b96:	fba3 9502 	umull	r9, r5, r3, r2
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	42ac      	cmp	r4, r5
 8000ba0:	46c8      	mov	r8, r9
 8000ba2:	46ae      	mov	lr, r5
 8000ba4:	d356      	bcc.n	8000c54 <__udivmoddi4+0x29c>
 8000ba6:	d053      	beq.n	8000c50 <__udivmoddi4+0x298>
 8000ba8:	b156      	cbz	r6, 8000bc0 <__udivmoddi4+0x208>
 8000baa:	ebb0 0208 	subs.w	r2, r0, r8
 8000bae:	eb64 040e 	sbc.w	r4, r4, lr
 8000bb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000bb6:	40ca      	lsrs	r2, r1
 8000bb8:	40cc      	lsrs	r4, r1
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	e9c6 7400 	strd	r7, r4, [r6]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	f1c3 0120 	rsb	r1, r3, #32
 8000bcc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bd0:	fa20 f201 	lsr.w	r2, r0, r1
 8000bd4:	fa25 f101 	lsr.w	r1, r5, r1
 8000bd8:	409d      	lsls	r5, r3
 8000bda:	432a      	orrs	r2, r5
 8000bdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be0:	fa1f fe8c 	uxth.w	lr, ip
 8000be4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be8:	fb07 1510 	mls	r5, r7, r0, r1
 8000bec:	0c11      	lsrs	r1, r2, #16
 8000bee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bf2:	fb00 f50e 	mul.w	r5, r0, lr
 8000bf6:	428d      	cmp	r5, r1
 8000bf8:	fa04 f403 	lsl.w	r4, r4, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x258>
 8000bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000c02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c06:	d22f      	bcs.n	8000c68 <__udivmoddi4+0x2b0>
 8000c08:	428d      	cmp	r5, r1
 8000c0a:	d92d      	bls.n	8000c68 <__udivmoddi4+0x2b0>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4461      	add	r1, ip
 8000c10:	1b49      	subs	r1, r1, r5
 8000c12:	b292      	uxth	r2, r2
 8000c14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c18:	fb07 1115 	mls	r1, r7, r5, r1
 8000c1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c20:	fb05 f10e 	mul.w	r1, r5, lr
 8000c24:	4291      	cmp	r1, r2
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x282>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c30:	d216      	bcs.n	8000c60 <__udivmoddi4+0x2a8>
 8000c32:	4291      	cmp	r1, r2
 8000c34:	d914      	bls.n	8000c60 <__udivmoddi4+0x2a8>
 8000c36:	3d02      	subs	r5, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a52      	subs	r2, r2, r1
 8000c3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c40:	e738      	b.n	8000ab4 <__udivmoddi4+0xfc>
 8000c42:	4631      	mov	r1, r6
 8000c44:	4630      	mov	r0, r6
 8000c46:	e708      	b.n	8000a5a <__udivmoddi4+0xa2>
 8000c48:	4639      	mov	r1, r7
 8000c4a:	e6e6      	b.n	8000a1a <__udivmoddi4+0x62>
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	e6fb      	b.n	8000a48 <__udivmoddi4+0x90>
 8000c50:	4548      	cmp	r0, r9
 8000c52:	d2a9      	bcs.n	8000ba8 <__udivmoddi4+0x1f0>
 8000c54:	ebb9 0802 	subs.w	r8, r9, r2
 8000c58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	e7a3      	b.n	8000ba8 <__udivmoddi4+0x1f0>
 8000c60:	4645      	mov	r5, r8
 8000c62:	e7ea      	b.n	8000c3a <__udivmoddi4+0x282>
 8000c64:	462b      	mov	r3, r5
 8000c66:	e794      	b.n	8000b92 <__udivmoddi4+0x1da>
 8000c68:	4640      	mov	r0, r8
 8000c6a:	e7d1      	b.n	8000c10 <__udivmoddi4+0x258>
 8000c6c:	46d0      	mov	r8, sl
 8000c6e:	e77b      	b.n	8000b68 <__udivmoddi4+0x1b0>
 8000c70:	3d02      	subs	r5, #2
 8000c72:	4462      	add	r2, ip
 8000c74:	e732      	b.n	8000adc <__udivmoddi4+0x124>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e70a      	b.n	8000a90 <__udivmoddi4+0xd8>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e742      	b.n	8000b06 <__udivmoddi4+0x14e>

08000c80 <__aeabi_idiv0>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <main>:
};

Can_MessageType message2;

int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
	/********************************** It must *************************************/

	/* RCC PART */
 	Rcc_enuInit(&rcc);
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <main+0x84>)
 8000c8c:	f001 f890 	bl	8001db0 <Rcc_enuInit>
	Gpio_enuEnableClockAllGPIOs();
 8000c90:	f000 fcde 	bl	8001650 <Gpio_enuEnableClockAllGPIOs>
	Rcc_enuInitMCO2(RCC_MCO2_PIN_SELECT_HSE_CLK,RCC_MCO2_PIN_SELECT_PRESCALER_NO_DIV);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2002      	movs	r0, #2
 8000c98:	f000 fec0 	bl	8001a1c <Rcc_enuInitMCO2>

	/* Systic Part */
	Systick_enuInit();
 8000c9c:	f001 f936 	bl	8001f0c <Systick_enuInit>


	Gpio_enuInit();
 8000ca0:	f000 fb7e 	bl	80013a0 <Gpio_enuInit>

	Gpio_enuSetAF(GPIO_PINA11, GPIO_SELET_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 8000ca4:	2109      	movs	r1, #9
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f000 fc74 	bl	8001594 <Gpio_enuSetAF>
	Gpio_enuSetAF(GPIO_PINA12, GPIO_SELET_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 8000cac:	2109      	movs	r1, #9
 8000cae:	200c      	movs	r0, #12
 8000cb0:	f000 fc70 	bl	8001594 <Gpio_enuSetAF>
	Gpio_enuSetAF(GPIO_PIND1, GPIO_SELET_AF9_CAN1_CAN2_LTDC_TIM12_TIM13_TIM14); // for can
 8000cb4:	2109      	movs	r1, #9
 8000cb6:	2031      	movs	r0, #49	; 0x31
 8000cb8:	f000 fc6c 	bl	8001594 <Gpio_enuSetAF>

	Can_enuInit(&can1);
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <main+0x88>)
 8000cbe:	f000 f82d 	bl	8000d1c <Can_enuInit>


	u8 arr1[8]={6,5};
 8000cc2:	f240 5306 	movw	r3, #1286	; 0x506
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]


	//Lcd_4bit_enuInit(&Lcd);
///////////////////////////////////////////////////////////////////////////////////////

	Can_enuTransmitMessage_MustSend(&message1, arr1);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480f      	ldr	r0, [pc, #60]	; (8000d10 <main+0x8c>)
 8000cd4:	f000 f8c2 	bl	8000e5c <Can_enuTransmitMessage_MustSend>

	Can_enuReceiveMessageFifox_CheckOneTime(CAN_RX_FIFO_MAIL_BOX_INDEX_0, &message2, arr3, NULL);
 8000cd8:	463a      	mov	r2, r7
 8000cda:	2300      	movs	r3, #0
 8000cdc:	490d      	ldr	r1, [pc, #52]	; (8000d14 <main+0x90>)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f9aa 	bl	8001038 <Can_enuReceiveMessageFifox_CheckOneTime>
	if(arr3[0]==5){
 8000ce4:	783b      	ldrb	r3, [r7, #0]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d103      	bne.n	8000cf2 <main+0x6e>

		Gpio_enuClearPinChannelAtomic(GPIO_PING13);
 8000cea:	206d      	movs	r0, #109	; 0x6d
 8000cec:	f000 fc2a 	bl	8001544 <Gpio_enuClearPinChannelAtomic>
 8000cf0:	e008      	b.n	8000d04 <main+0x80>

	}

	else if( arr3[0]==6){
 8000cf2:	783b      	ldrb	r3, [r7, #0]
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d105      	bne.n	8000d04 <main+0x80>
		Gpio_enuSetPinChannelAtomic(GPIO_PING13);
 8000cf8:	206d      	movs	r0, #109	; 0x6d
 8000cfa:	f000 fbfb 	bl	80014f4 <Gpio_enuSetPinChannelAtomic>
		Systick_enuSetBusyWaitTicks(1000000);
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <main+0x94>)
 8000d00:	f001 f946 	bl	8001f90 <Systick_enuSetBusyWaitTicks>
	}


	for(;;){
 8000d04:	e7fe      	b.n	8000d04 <main+0x80>
 8000d06:	bf00      	nop
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000018 	.word	0x20000018
 8000d10:	20000024 	.word	0x20000024
 8000d14:	20000174 	.word	0x20000174
 8000d18:	000f4240 	.word	0x000f4240

08000d1c <Can_enuInit>:




/******************************* Software Interfaces Implementation *******************/
Can_StatusErrorType Can_enuInit(const Can_ConfigType* Address_Can){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
	if(NULL == Address_Can){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <Can_enuInit+0x18>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8000d2e:	2309      	movs	r3, #9
 8000d30:	73fb      	strb	r3, [r7, #15]
 8000d32:	e08c      	b.n	8000e4e <Can_enuInit+0x132>
	}
	else{
		/* Enable CAN1 Rcc Clock */
		Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTYFIVE_VALUE);
 8000d34:	2119      	movs	r1, #25
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 ff3c 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
//		/* Enable CAN2 Rcc Clock */
//		Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTYSIX_VALUE);


		/* exit from sleep mode and enable init mode */
		Can_GoToInitMode();
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <Can_enuInit+0x13c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a45      	ldr	r2, [pc, #276]	; (8000e58 <Can_enuInit+0x13c>)
 8000d42:	f023 0302 	bic.w	r3, r3, #2
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <Can_enuInit+0x13c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f9      	bne.n	8000d48 <Can_enuInit+0x2c>
 8000d54:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <Can_enuInit+0x13c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a3f      	ldr	r2, [pc, #252]	; (8000e58 <Can_enuInit+0x13c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <Can_enuInit+0x13c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d1f9      	bne.n	8000d60 <Can_enuInit+0x44>

		/* Choose Tx Fifo Priority */
		Can_SelectTxFifoPriority(Address_Can->can_select_tx_fifo_priority);
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <Can_enuInit+0x13c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 0304 	bic.w	r3, r3, #4
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <Can_enuInit+0x13c>)
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6013      	str	r3, [r2, #0]


		/* Choose Rx Lock Mode */
		Can_SelectRxFifoLockMode(Address_Can->can_select_rx_lock_mode);
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <Can_enuInit+0x13c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 0308 	bic.w	r3, r3, #8
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	7852      	ldrb	r2, [r2, #1]
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	4611      	mov	r1, r2
 8000d92:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <Can_enuInit+0x13c>)
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6013      	str	r3, [r2, #0]

		/* enable/disable Retransmission Mode */
		Can_SelectRetransmissionAutomatic(Address_Can->can_select_retransmission_automatic);
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <Can_enuInit+0x13c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0310 	bic.w	r3, r3, #16
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	7892      	ldrb	r2, [r2, #2]
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	4611      	mov	r1, r2
 8000da8:	4a2b      	ldr	r2, [pc, #172]	; (8000e58 <Can_enuInit+0x13c>)
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6013      	str	r3, [r2, #0]

		/* enable/disable WakeUp During Sleep Mode */
		Can_SelectWakeupAutomatic(Address_Can->can_select_wakeup_automatic);
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <Can_enuInit+0x13c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 0320 	bic.w	r3, r3, #32
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	78d2      	ldrb	r2, [r2, #3]
 8000dba:	0152      	lsls	r2, r2, #5
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <Can_enuInit+0x13c>)
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	6013      	str	r3, [r2, #0]

		/* enable/disable Bus Off Left Automatically Mode */
		Can_SelectBackFromBusOffStateAutomatic(Address_Can->can_select_back_from_bus_off_state_automatic);
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <Can_enuInit+0x13c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	7912      	ldrb	r2, [r2, #4]
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <Can_enuInit+0x13c>)
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	6013      	str	r3, [r2, #0]

		/* enable/disable Time Trigger Communciation Mode */
		Can_SelectTimeTriggerCommunicationMode(Address_Can->can_select_time_trigger_communcation_mode);
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <Can_enuInit+0x13c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	7952      	ldrb	r2, [r2, #5]
 8000de6:	01d2      	lsls	r2, r2, #7
 8000de8:	4611      	mov	r1, r2
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <Can_enuInit+0x13c>)
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6013      	str	r3, [r2, #0]


		/* enable/disable CAN during Debugging Mode */
		Can_SelectDuringDebugModeCanWorking(Address_Can->can_select_during_debug_mode_can_working);
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <Can_enuInit+0x13c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	7992      	ldrb	r2, [r2, #6]
 8000dfc:	0412      	lsls	r2, r2, #16
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <Can_enuInit+0x13c>)
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6013      	str	r3, [r2, #0]

		/* Select Node Mode */
		Can_SelectNodeMode(Address_Can->can_select_node_mode);
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <Can_enuInit+0x13c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	79d2      	ldrb	r2, [r2, #7]
 8000e12:	0792      	lsls	r2, r2, #30
 8000e14:	4611      	mov	r1, r2
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <Can_enuInit+0x13c>)
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	61d3      	str	r3, [r2, #28]

		/* Set Bit Time Calculation,, http://www.bittiming.can-wiki.info/ */
		Can_SetBitTimeCalulation(Address_Can->can_bit_time_calculation);
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <Can_enuInit+0x13c>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e2c:	490a      	ldr	r1, [pc, #40]	; (8000e58 <Can_enuInit+0x13c>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61cb      	str	r3, [r1, #28]

		/* Exit From Init Mode */
		Can_GoOutFromInitMode();
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <Can_enuInit+0x13c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <Can_enuInit+0x13c>)
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <Can_enuInit+0x13c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f9      	bne.n	8000e3e <Can_enuInit+0x122>

//		/* It's Used for Filters Configuration */
//		GlobalStatic_u8NumberOfCan1Fitlers = Address_Can->can_number_of_can1_filters_1_to_28;

		/* Filter Init */
		(void)enuFiltersInit();
 8000e4a:	f000 f98d 	bl	8001168 <enuFiltersInit>

	}

	return Loc_enuCanStatusError;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40006400 	.word	0x40006400

08000e5c <Can_enuTransmitMessage_MustSend>:
	return Loc_enuCanStatusError;


}

Can_StatusErrorType Can_enuTransmitMessage_MustSend(const Can_MessageType* Address_Message,u8 _ArrMessageData[]){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]

	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8BestMailBoxIndex = Can_GetBestMailBoxIndex();
 8000e6a:	4b70      	ldr	r3, [pc, #448]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	0e1b      	lsrs	r3, r3, #24
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	73bb      	strb	r3, [r7, #14]
	if(NULL == Address_Message){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <Can_enuTransmitMessage_MustSend+0x28>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e0cc      	b.n	800101e <Can_enuTransmitMessage_MustSend+0x1c2>
	}

	else{

		/* check is any mail box is empty */
			while(Can_IsMailBox_x_Empty(Loc_u8BestMailBoxIndex) == STD_FALSE);
 8000e84:	bf00      	nop
 8000e86:	4b69      	ldr	r3, [pc, #420]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	331a      	adds	r3, #26
 8000e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d1f5      	bne.n	8000e86 <Can_enuTransmitMessage_MustSend+0x2a>

			/* Set DLC */
			Can_SetDLCinTxMailBox_x(Loc_u8BestMailBoxIndex, (Address_Message->can_DLC_FROM_0_TO_8 ));
 8000e9a:	4a64      	ldr	r2, [pc, #400]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3318      	adds	r3, #24
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 010f 	bic.w	r1, r3, #15
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 020f 	and.w	r2, r3, #15
 8000eb4:	485d      	ldr	r0, [pc, #372]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	3318      	adds	r3, #24
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4403      	add	r3, r0
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	601a      	str	r2, [r3, #0]

			/* SET extended ID */
			Can_SetExtendedIDinTxMailBox_x(Loc_u8BestMailBoxIndex, (Address_Message->can_extended_id_remaining_18_bit));
 8000ec4:	4a59      	ldr	r2, [pc, #356]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	3318      	adds	r3, #24
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a57      	ldr	r2, [pc, #348]	; (8001030 <Can_enuTransmitMessage_MustSend+0x1d4>)
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	00d9      	lsls	r1, r3, #3
 8000eda:	4b56      	ldr	r3, [pc, #344]	; (8001034 <Can_enuTransmitMessage_MustSend+0x1d8>)
 8000edc:	400b      	ands	r3, r1
 8000ede:	4853      	ldr	r0, [pc, #332]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000ee0:	7bb9      	ldrb	r1, [r7, #14]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	f101 0318 	add.w	r3, r1, #24
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	4403      	add	r3, r0
 8000eec:	601a      	str	r2, [r3, #0]

			/* SET  IDE */
			Can_SetIDEinTxMailBox_x(Loc_u8BestMailBoxIndex,Address_Message->can_select_ide_mode);
 8000eee:	4a4f      	ldr	r2, [pc, #316]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 0204 	bic.w	r2, r3, #4
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7a1b      	ldrb	r3, [r3, #8]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4618      	mov	r0, r3
 8000f06:	4949      	ldr	r1, [pc, #292]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	4302      	orrs	r2, r0
 8000f0c:	3318      	adds	r3, #24
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	440b      	add	r3, r1
 8000f12:	601a      	str	r2, [r3, #0]

			/* SET  RTR */
			Can_SetRTRinTxMailBox_x(Loc_u8BestMailBoxIndex,Address_Message->can_select_rtr_mode);
 8000f14:	4a45      	ldr	r2, [pc, #276]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 0202 	bic.w	r2, r3, #2
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a5b      	ldrb	r3, [r3, #9]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	493f      	ldr	r1, [pc, #252]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	4302      	orrs	r2, r0
 8000f32:	3318      	adds	r3, #24
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	440b      	add	r3, r1
 8000f38:	601a      	str	r2, [r3, #0]

			/* SET Standard IDE */
			Can_SetStandardIDinTxMailBox_x(Loc_u8BestMailBoxIndex,Address_Message->can_standard_id_11_bit);
 8000f3a:	4a3c      	ldr	r2, [pc, #240]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	3318      	adds	r3, #24
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	4413      	add	r3, r2
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f3c3 0214 	ubfx	r2, r3, #0, #21
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	885b      	ldrh	r3, [r3, #2]
 8000f4e:	055b      	lsls	r3, r3, #21
 8000f50:	4618      	mov	r0, r3
 8000f52:	4936      	ldr	r1, [pc, #216]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	4302      	orrs	r2, r0
 8000f58:	3318      	adds	r3, #24
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	601a      	str	r2, [r3, #0]

			/* SET  Message Data  */
			Can_SetDataMessaginMailBox_x(Loc_u8BestMailBoxIndex,_ArrMessageData);
 8000f60:	4932      	ldr	r1, [pc, #200]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	492e      	ldr	r1, [pc, #184]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	6852      	ldr	r2, [r2, #4]
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f82:	601a      	str	r2, [r3, #0]

			/* Request For Transmit */
			Can_StartTransmit(Loc_u8BestMailBoxIndex);
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	3318      	adds	r3, #24
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4413      	add	r3, r2
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4926      	ldr	r1, [pc, #152]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	3318      	adds	r3, #24
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	440b      	add	r3, r1
 8000f9e:	601a      	str	r2, [r3, #0]

		//	while( Can_IsRequestCompletedMailBox_x(Loc_u8BestMailBoxIndex) != STD_TRUE);


			// Request here's Done
			while(Can_IsMailBox_x_Empty(Loc_u8BestMailBoxIndex) == STD_FALSE);
 8000fa0:	bf00      	nop
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	331a      	adds	r3, #26
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d1f5      	bne.n	8000fa2 <Can_enuTransmitMessage_MustSend+0x146>

			if(	Can_IsTransmissionCompletedMailBox_x(Loc_u8BestMailBoxIndex) != STD_TRUE){
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d028      	beq.n	800101e <Can_enuTransmitMessage_MustSend+0x1c2>
				// Error Happenes
				Loc_enuCanStatusError = Can_IsArbitrationLostHappenedMailBox_x(Loc_u8BestMailBoxIndex)*CAN_STATUS_FAIL_ARBITRATION_LOST +
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <Can_enuTransmitMessage_MustSend+0x18a>
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	e000      	b.n	8000fe8 <Can_enuTransmitMessage_MustSend+0x18c>
 8000fe6:	2200      	movs	r2, #0
												Can_IsTransmissionErrorHappenedMailBox_x(Loc_u8BestMailBoxIndex)*Can_GetLastErrorCode();
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8000fea:	6899      	ldr	r1, [r3, #8]
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	3303      	adds	r3, #3
 8000ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
				Loc_enuCanStatusError = Can_IsArbitrationLostHappenedMailBox_x(Loc_u8BestMailBoxIndex)*CAN_STATUS_FAIL_ARBITRATION_LOST +
 8001004:	b2d9      	uxtb	r1, r3
												Can_IsTransmissionErrorHappenedMailBox_x(Loc_u8BestMailBoxIndex)*Can_GetLastErrorCode();
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	091b      	lsrs	r3, r3, #4
				Loc_enuCanStatusError = Can_IsArbitrationLostHappenedMailBox_x(Loc_u8BestMailBoxIndex)*CAN_STATUS_FAIL_ARBITRATION_LOST +
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	fb11 f303 	smulbb	r3, r1, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	73fb      	strb	r3, [r7, #15]



	}

	return Loc_enuCanStatusError;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40006400 	.word	0x40006400
 8001030:	ffe00007 	.word	0xffe00007
 8001034:	001ffff8 	.word	0x001ffff8

08001038 <Can_enuReceiveMessageFifox_CheckOneTime>:

}


Can_StatusErrorType Can_enuReceiveMessageFifox_CheckOneTime(Can_RxFifoMailBoxIndexType Copy_enuFifoIndex,
							Can_MessageType* Address_Message,u8 _ArrMessageData[EIGHT_VALUE],u8* Address_FilterIndex){
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]

	Can_StatusErrorType Loc_enuCanStatusError= CAN_STATUS_OK;;
 8001048:	2300      	movs	r3, #0
 800104a:	75fb      	strb	r3, [r7, #23]

	if(NULL == Address_Message ){
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <Can_enuReceiveMessageFifox_CheckOneTime+0x20>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8001052:	2309      	movs	r3, #9
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	e07e      	b.n	8001156 <Can_enuReceiveMessageFifox_CheckOneTime+0x11e>
	}

	else{
			if(Can_GetNumberOfPendingMessages_FIFOx(Copy_enuFifoIndex) != ZERO_VALUE){
 8001058:	4a42      	ldr	r2, [pc, #264]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3302      	adds	r3, #2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d070      	beq.n	800114e <Can_enuReceiveMessageFifox_CheckOneTime+0x116>

				/* Get DLC of Message */
				Address_Message->can_DLC_FROM_0_TO_8 = Can_GetDLCinRxFifoMailBox_x(Copy_enuFifoIndex);
 800106c:	4a3d      	ldr	r2, [pc, #244]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	331b      	adds	r3, #27
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	3304      	adds	r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	b2da      	uxtb	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	701a      	strb	r2, [r3, #0]


				/* Get EXID of Message */
				Address_Message->can_extended_id_remaining_18_bit = Can_GetExtendedIDinRxFifoMailBox_x(Copy_enuFifoIndex);
 8001086:	4a37      	ldr	r2, [pc, #220]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	331b      	adds	r3, #27
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	605a      	str	r2, [r3, #4]


				/* Get IDE of Message */
				Address_Message->can_select_ide_mode = Can_GetIDEinRxFifoMailBox_x(Copy_enuFifoIndex);
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	331b      	adds	r3, #27
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	721a      	strb	r2, [r3, #8]

				/* Get RTR of Message */
				Address_Message->can_select_rtr_mode = Can_GetRTRinRxFifoMailBox_x(Copy_enuFifoIndex);
 80010b8:	4a2a      	ldr	r2, [pc, #168]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	331b      	adds	r3, #27
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	725a      	strb	r2, [r3, #9]

				/* Get Standard ID of Message */
				Address_Message->can_standard_id_11_bit = Can_GetStandardIDinRxFifoMailBox_x(Copy_enuFifoIndex);
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	331b      	adds	r3, #27
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	3304      	adds	r3, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0d5b      	lsrs	r3, r3, #21
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	805a      	strh	r2, [r3, #2]


				/* Get The Data */
				Can_GetDataMessaginFifoMailBox_x(Copy_enuFifoIndex,_ArrMessageData);
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4413      	add	r3, r2
 80010f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	4918      	ldr	r1, [pc, #96]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3304      	adds	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	440a      	add	r2, r1
 800110c:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	601a      	str	r2, [r3, #0]


				if(Address_FilterIndex != NULL){
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <Can_enuReceiveMessageFifox_CheckOneTime+0xf8>
					*Address_FilterIndex = Can_GetFilterIndexFifox(Copy_enuFifoIndex);
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	331b      	adds	r3, #27
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	3304      	adds	r3, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b2da      	uxtb	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	701a      	strb	r2, [r3, #0]
				}

				/* Relase The Message */
				Can_RelaseFIFOxMailBox(Copy_enuFifoIndex);
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3302      	adds	r3, #2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <Can_enuReceiveMessageFifox_CheckOneTime+0x12c>)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	3302      	adds	r3, #2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	e003      	b.n	8001156 <Can_enuReceiveMessageFifox_CheckOneTime+0x11e>

			}

			else{
				Address_FilterIndex = NULL;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
				Loc_enuCanStatusError = CAN_STATUS_RX_FIFO_MAILBOX_EMPTY;
 8001152:	230b      	movs	r3, #11
 8001154:	75fb      	strb	r3, [r7, #23]
			}
	}

	return Loc_enuCanStatusError;
 8001156:	7dfb      	ldrb	r3, [r7, #23]

}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40006400 	.word	0x40006400

08001168 <enuFiltersInit>:



/**************************** Private Software Interface Implementation **************/

static Can_StatusErrorType enuFiltersInit(void){
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]

	/* Start Filter Init Mode	 */
	Can_GoToFilterInitMode();
 8001172:	4b8a      	ldr	r3, [pc, #552]	; (800139c <enuFiltersInit+0x234>)
 8001174:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001178:	4a88      	ldr	r2, [pc, #544]	; (800139c <enuFiltersInit+0x234>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* Set Number Of Can1 Filters */
	Can_SetNumberOfCan1Filters(NUMBER_OF_CAN1_FILTERS);
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <enuFiltersInit+0x234>)
 8001184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001188:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800118c:	4a83      	ldr	r2, [pc, #524]	; (800139c <enuFiltersInit+0x234>)
 800118e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001192:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	 * 2- scale
	 * 3- reg1 value
	 * 4- reg2 value
	 * 5- Which Fifo Index
	 */
	Filter_concat(FILTER27_CONFG, FILTER26_CONFG, FILTER25_CONFG, FILTER24_CONFG, FILTER23_CONFG, FILTER22_CONFG,
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <enuFiltersInit+0x234>)
 8001198:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800119c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011a0:	4b7e      	ldr	r3, [pc, #504]	; (800139c <enuFiltersInit+0x234>)
 80011a2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80011a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80011aa:	4b7c      	ldr	r3, [pc, #496]	; (800139c <enuFiltersInit+0x234>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011b2:	4b7a      	ldr	r3, [pc, #488]	; (800139c <enuFiltersInit+0x234>)
 80011b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011b8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 80011bc:	4b77      	ldr	r3, [pc, #476]	; (800139c <enuFiltersInit+0x234>)
 80011be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011c2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 80011c6:	4b75      	ldr	r3, [pc, #468]	; (800139c <enuFiltersInit+0x234>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 80011ce:	4b73      	ldr	r3, [pc, #460]	; (800139c <enuFiltersInit+0x234>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80011d6:	4b71      	ldr	r3, [pc, #452]	; (800139c <enuFiltersInit+0x234>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 80011de:	4b6f      	ldr	r3, [pc, #444]	; (800139c <enuFiltersInit+0x234>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 80011e6:	4b6d      	ldr	r3, [pc, #436]	; (800139c <enuFiltersInit+0x234>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 80011ee:	4b6b      	ldr	r3, [pc, #428]	; (800139c <enuFiltersInit+0x234>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 80011f6:	4b69      	ldr	r3, [pc, #420]	; (800139c <enuFiltersInit+0x234>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <enuFiltersInit+0x234>)
 8001200:	2200      	movs	r2, #0
 8001202:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <enuFiltersInit+0x234>)
 8001208:	2200      	movs	r2, #0
 800120a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 800120e:	4b63      	ldr	r3, [pc, #396]	; (800139c <enuFiltersInit+0x234>)
 8001210:	2200      	movs	r2, #0
 8001212:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8001216:	4b61      	ldr	r3, [pc, #388]	; (800139c <enuFiltersInit+0x234>)
 8001218:	2200      	movs	r2, #0
 800121a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 800121e:	4b5f      	ldr	r3, [pc, #380]	; (800139c <enuFiltersInit+0x234>)
 8001220:	2200      	movs	r2, #0
 8001222:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <enuFiltersInit+0x234>)
 8001228:	2200      	movs	r2, #0
 800122a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <enuFiltersInit+0x234>)
 8001230:	2200      	movs	r2, #0
 8001232:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <enuFiltersInit+0x234>)
 8001238:	2200      	movs	r2, #0
 800123a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <enuFiltersInit+0x234>)
 8001240:	2200      	movs	r2, #0
 8001242:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <enuFiltersInit+0x234>)
 8001248:	2200      	movs	r2, #0
 800124a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <enuFiltersInit+0x234>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8001256:	4b51      	ldr	r3, [pc, #324]	; (800139c <enuFiltersInit+0x234>)
 8001258:	2200      	movs	r2, #0
 800125a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <enuFiltersInit+0x234>)
 8001260:	2200      	movs	r2, #0
 8001262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8001266:	4b4d      	ldr	r3, [pc, #308]	; (800139c <enuFiltersInit+0x234>)
 8001268:	2200      	movs	r2, #0
 800126a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <enuFiltersInit+0x234>)
 8001270:	2200      	movs	r2, #0
 8001272:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <enuFiltersInit+0x234>)
 8001278:	2200      	movs	r2, #0
 800127a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <enuFiltersInit+0x234>)
 8001280:	2200      	movs	r2, #0
 8001282:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <enuFiltersInit+0x234>)
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <enuFiltersInit+0x234>)
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <enuFiltersInit+0x234>)
 8001298:	2200      	movs	r2, #0
 800129a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <enuFiltersInit+0x234>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <enuFiltersInit+0x234>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <enuFiltersInit+0x234>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <enuFiltersInit+0x234>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <enuFiltersInit+0x234>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <enuFiltersInit+0x234>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <enuFiltersInit+0x234>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <enuFiltersInit+0x234>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <enuFiltersInit+0x234>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <enuFiltersInit+0x234>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <enuFiltersInit+0x234>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <enuFiltersInit+0x234>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <enuFiltersInit+0x234>)
 8001300:	2200      	movs	r2, #0
 8001302:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <enuFiltersInit+0x234>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <enuFiltersInit+0x234>)
 8001310:	2200      	movs	r2, #0
 8001312:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <enuFiltersInit+0x234>)
 8001318:	2200      	movs	r2, #0
 800131a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <enuFiltersInit+0x234>)
 8001320:	2200      	movs	r2, #0
 8001322:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <enuFiltersInit+0x234>)
 8001328:	2200      	movs	r2, #0
 800132a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <enuFiltersInit+0x234>)
 8001330:	2200      	movs	r2, #0
 8001332:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <enuFiltersInit+0x234>)
 8001338:	2200      	movs	r2, #0
 800133a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <enuFiltersInit+0x234>)
 8001340:	2200      	movs	r2, #0
 8001342:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <enuFiltersInit+0x234>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <enuFiltersInit+0x234>)
 8001350:	2200      	movs	r2, #0
 8001352:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <enuFiltersInit+0x234>)
 8001358:	2200      	movs	r2, #0
 800135a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <enuFiltersInit+0x234>)
 8001360:	2200      	movs	r2, #0
 8001362:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <enuFiltersInit+0x234>)
 8001368:	2200      	movs	r2, #0
 800136a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <enuFiltersInit+0x234>)
 8001370:	2200      	movs	r2, #0
 8001372:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <enuFiltersInit+0x234>)
 8001378:	2201      	movs	r2, #1
 800137a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			FILTER3_CONFG, FILTER2_CONFG, FILTER1_CONFG, FILTER0_CONFG
						);


	/* Go to Normal Mode */
	Can_GoOutFromFilterInitMode();
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <enuFiltersInit+0x234>)
 8001380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <enuFiltersInit+0x234>)
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200


	return Loc_enuCanStatusError;
 800138e:	79fb      	ldrb	r3, [r7, #7]
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40006400 	.word	0x40006400

080013a0 <Gpio_enuInit>:

/********************************** Macros Function Declarations *********************/


/******************************* Software Interfaces Implementation *******************/
Gpio_StatusErrorType Gpio_enuInit(void){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 80013a6:	2301      	movs	r3, #1
 80013a8:	71fb      	strb	r3, [r7, #7]

	Gpio_concat(
 80013aa:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <Gpio_enuInit+0x134>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <Gpio_enuInit+0x138>)
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <Gpio_enuInit+0x13c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <Gpio_enuInit+0x140>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <Gpio_enuInit+0x144>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <Gpio_enuInit+0x148>)
 80013cc:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel1_PINA1,
	    GPIO_u8PinChannel0_PINA0 // End with the lowest channel
	);


	Gpio_concat(
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <Gpio_enuInit+0x134>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <Gpio_enuInit+0x13c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <Gpio_enuInit+0x140>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <Gpio_enuInit+0x144>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80013f0:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel18_PINB2,  // Corresponds to pin B2
	    GPIO_u8PinChannel17_PINB1,  // Corresponds to pin B1
	    GPIO_u8PinChannel16_PINB0   // Corresponds to pin B0, which is indicated as 16
	);

	Gpio_concat(
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <Gpio_enuInit+0x134>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <Gpio_enuInit+0x14c>)
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <Gpio_enuInit+0x13c>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <Gpio_enuInit+0x140>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <Gpio_enuInit+0x144>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001412:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel35_PINC3,  // Corresponds to pin C3
	    GPIO_u8PinChannel34_PINC2,  // Corresponds to pin C2
	    GPIO_u8PinChannel33_PINC1,  // Corresponds to pin C1
	    GPIO_u8PinChannel32_PINC0   // Corresponds to pin C0, which is indicated as 32
	);
	Gpio_concat(
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <Gpio_enuInit+0x134>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <Gpio_enuInit+0x150>)
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <Gpio_enuInit+0x13c>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <Gpio_enuInit+0x140>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <Gpio_enuInit+0x144>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001434:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel49_PIND1,  // Corresponds to pin D1
	    GPIO_u8PinChannel48_PIND0   // Corresponds to pin D0, which is indicated as 48
	);


	Gpio_concat(
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <Gpio_enuInit+0x134>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <Gpio_enuInit+0x13c>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <Gpio_enuInit+0x140>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <Gpio_enuInit+0x144>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001458:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel67_PINE3,  // Corresponds to pin E3
	    GPIO_u8PinChannel66_PINE2,  // Corresponds to pin E2
	    GPIO_u8PinChannel65_PINE1,  // Corresponds to pin E1
	    GPIO_u8PinChannel64_PINE0   // Corresponds to pin E0, starting from 64
	);
	Gpio_concat(
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <Gpio_enuInit+0x134>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <Gpio_enuInit+0x13c>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <Gpio_enuInit+0x140>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <Gpio_enuInit+0x144>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800147c:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel83_PINF3,  // Corresponds to pin F3
	    GPIO_u8PinChannel82_PINF2,  // Corresponds to pin F2
	    GPIO_u8PinChannel81_PINF1,  // Corresponds to pin F1
	    GPIO_u8PinChannel80_PINF0   // Corresponds to pin F0, starting from 80
	);
	Gpio_concat(
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <Gpio_enuInit+0x134>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <Gpio_enuInit+0x13c>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <Gpio_enuInit+0x140>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <Gpio_enuInit+0x144>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80014a0:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel96_PING0    // Corresponds to pin G0, starting from 96
	);



	Gpio_concat(
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <Gpio_enuInit+0x134>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <Gpio_enuInit+0x13c>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <Gpio_enuInit+0x140>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <Gpio_enuInit+0x144>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80014c4:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel113_PINH1,  // Corresponds to pin H1
	    GPIO_u8PinChannel112_PINH0   // Corresponds to pin H0, starting from 112
	);


	return Loc_enuGpioStatusError;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000030 	.word	0x20000030
 80014d8:	aa955555 	.word	0xaa955555
 80014dc:	20000050 	.word	0x20000050
 80014e0:	20000070 	.word	0x20000070
 80014e4:	20000090 	.word	0x20000090
 80014e8:	01555555 	.word	0x01555555
 80014ec:	55595555 	.word	0x55595555
 80014f0:	5555555a 	.word	0x5555555a

080014f4 <Gpio_enuSetPinChannelAtomic>:

			return Loc_enuGpioStatusError;
}


Gpio_StatusErrorType Gpio_enuSetPinChannelAtomic(u8 Copy_u8ChannelId){
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	737b      	strb	r3, [r7, #13]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	d902      	bls.n	800151c <Gpio_enuSetPinChannelAtomic+0x28>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8001516:	2302      	movs	r3, #2
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e009      	b.n	8001530 <Gpio_enuSetPinChannelAtomic+0x3c>
		}


			else{
				ASSIGN_REG((* Global_BsrrArr[Loc_u8PortNumber]),(ONE_VALUE<<Loc_u8PinNumber));
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	2201      	movs	r2, #1
 8001520:	fa02 f103 	lsl.w	r1, r2, r3
 8001524:	7b7b      	ldrb	r3, [r7, #13]
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <Gpio_enuSetPinChannelAtomic+0x4c>)
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	460a      	mov	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
		}

			return Loc_enuGpioStatusError;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200000b0 	.word	0x200000b0

08001544 <Gpio_enuClearPinChannelAtomic>:
Gpio_StatusErrorType Gpio_enuClearPinChannelAtomic(u8 Copy_u8ChannelId){
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	737b      	strb	r3, [r7, #13]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	d902      	bls.n	800156c <Gpio_enuClearPinChannelAtomic+0x28>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8001566:	2302      	movs	r3, #2
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e00a      	b.n	8001582 <Gpio_enuClearPinChannelAtomic+0x3e>
		}


			else{
				ASSIGN_REG((* Global_BsrrArr[Loc_u8PortNumber]),(ONE_VALUE<<(Loc_u8PinNumber+SIXTEEN_VALUE)));
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	3310      	adds	r3, #16
 8001570:	2201      	movs	r2, #1
 8001572:	fa02 f103 	lsl.w	r1, r2, r3
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <Gpio_enuClearPinChannelAtomic+0x4c>)
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	460a      	mov	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
		}

			return Loc_enuGpioStatusError;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200000b0 	.word	0x200000b0

08001594 <Gpio_enuSetAF>:

Gpio_StatusErrorType Gpio_enuSetAF(u8 Copy_u8ChannelId,Gpio_SelectAFType Copy_enuAF){
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71bb      	strb	r3, [r7, #6]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	737b      	strb	r3, [r7, #13]
		u8 Loc_u8TempPinNumber =Loc_u8PinNumber %EIGHT_VALUE;   // from 0 to 7
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	733b      	strb	r3, [r7, #12]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d902      	bls.n	80015ca <Gpio_enuSetAF+0x36>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 80015c4:	2302      	movs	r3, #2
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e037      	b.n	800163a <Gpio_enuSetAF+0xa6>
		}


			else{

				if(Loc_u8PinNumber<EIGHT_VALUE){
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d81a      	bhi.n	8001606 <Gpio_enuSetAF+0x72>
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <Gpio_enuSetAF+0xb4>)
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	7bba      	ldrb	r2, [r7, #14]
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	210f      	movs	r1, #15
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	43d2      	mvns	r2, r2
 80015e6:	401a      	ands	r2, r3
												((Copy_enuAF & 0xF ) <<(Loc_u8PinNumber*FOUR_VALUE));
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	f003 010f 	and.w	r1, r3, #15
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	4618      	mov	r0, r3
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	4913      	ldr	r1, [pc, #76]	; (8001648 <Gpio_enuSetAF+0xb4>)
 80015fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001600:	4302      	orrs	r2, r0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e019      	b.n	800163a <Gpio_enuSetAF+0xa6>

				}
				else{
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	4a10      	ldr	r2, [pc, #64]	; (800164c <Gpio_enuSetAF+0xb8>)
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	7b3a      	ldrb	r2, [r7, #12]
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	210f      	movs	r1, #15
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	43d2      	mvns	r2, r2
 800161c:	401a      	ands	r2, r3
																	((Copy_enuAF & 0xF ) <<(Loc_u8TempPinNumber*FOUR_VALUE));
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	f003 010f 	and.w	r1, r3, #15
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4618      	mov	r0, r3
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	4906      	ldr	r1, [pc, #24]	; (800164c <Gpio_enuSetAF+0xb8>)
 8001632:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001636:	4302      	orrs	r2, r0
 8001638:	601a      	str	r2, [r3, #0]
				}
		}

			return Loc_enuGpioStatusError;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	200000d0 	.word	0x200000d0
 800164c:	200000f0 	.word	0x200000f0

08001650 <Gpio_enuEnableClockAllGPIOs>:

		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuEnableClockAllGPIOs(void){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8001656:	2301      	movs	r3, #1
 8001658:	71fb      	strb	r3, [r7, #7]
	volatile Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800165a:	2301      	movs	r3, #1
 800165c:	71bb      	strb	r3, [r7, #6]

	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTA);
 800165e:	2100      	movs	r1, #0
 8001660:	2000      	movs	r0, #0
 8001662:	f000 faa7 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 8001666:	4603      	mov	r3, r0
 8001668:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTB);
 800166a:	2101      	movs	r1, #1
 800166c:	2000      	movs	r0, #0
 800166e:	f000 faa1 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 8001672:	4603      	mov	r3, r0
 8001674:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTC);
 8001676:	2102      	movs	r1, #2
 8001678:	2000      	movs	r0, #0
 800167a:	f000 fa9b 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 800167e:	4603      	mov	r3, r0
 8001680:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTD);
 8001682:	2103      	movs	r1, #3
 8001684:	2000      	movs	r0, #0
 8001686:	f000 fa95 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 800168a:	4603      	mov	r3, r0
 800168c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTE);
 800168e:	2104      	movs	r1, #4
 8001690:	2000      	movs	r0, #0
 8001692:	f000 fa8f 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 8001696:	4603      	mov	r3, r0
 8001698:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTF);
 800169a:	2105      	movs	r1, #5
 800169c:	2000      	movs	r0, #0
 800169e:	f000 fa89 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 80016a2:	4603      	mov	r3, r0
 80016a4:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTH);
 80016a6:	2107      	movs	r1, #7
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 fa83 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 80016ae:	4603      	mov	r3, r0
 80016b0:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTG);
 80016b2:	2106      	movs	r1, #6
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 fa7d 	bl	8001bb4 <Rcc_enuEnablePeripheralClk>
 80016ba:	4603      	mov	r3, r0
 80016bc:	71bb      	strb	r3, [r7, #6]



	return Loc_enuGpioStatusError;
 80016be:	79fb      	ldrb	r3, [r7, #7]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <Rcc_enuEnableClock>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuEnableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8CounterTimeOut = 240;
 80016d6:	23f0      	movs	r3, #240	; 0xf0
 80016d8:	73bb      	strb	r3, [r7, #14]
	switch (Copy_enuClockSourceIndex){
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d876      	bhi.n	80017ce <Rcc_enuEnableClock+0x106>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <Rcc_enuEnableClock+0x20>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016fd 	.word	0x080016fd
 80016ec:	08001727 	.word	0x08001727
 80016f0:	08001751 	.word	0x08001751
 80016f4:	0800177b 	.word	0x0800177b
 80016f8:	080017a5 	.word	0x080017a5

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_enableHSI();
 80016fc:	4b40      	ldr	r3, [pc, #256]	; (8001800 <Rcc_enuEnableClock+0x138>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a3f      	ldr	r2, [pc, #252]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001708:	e002      	b.n	8001710 <Rcc_enuEnableClock+0x48>
			Loc_u8CounterTimeOut--;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3b01      	subs	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001710:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d05a      	beq.n	80017d4 <Rcc_enuEnableClock+0x10c>
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f2      	bne.n	800170a <Rcc_enuEnableClock+0x42>
		}

		break;
 8001724:	e056      	b.n	80017d4 <Rcc_enuEnableClock+0x10c>
	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_enableHSE();
 8001726:	4b36      	ldr	r3, [pc, #216]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a35      	ldr	r2, [pc, #212]	; (8001800 <Rcc_enuEnableClock+0x138>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001732:	e002      	b.n	800173a <Rcc_enuEnableClock+0x72>
			Loc_u8CounterTimeOut--;
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	3b01      	subs	r3, #1
 8001738:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800173a:	4b31      	ldr	r3, [pc, #196]	; (8001800 <Rcc_enuEnableClock+0x138>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0c5b      	lsrs	r3, r3, #17
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d047      	beq.n	80017d8 <Rcc_enuEnableClock+0x110>
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f2      	bne.n	8001734 <Rcc_enuEnableClock+0x6c>
		}
		break;
 800174e:	e043      	b.n	80017d8 <Rcc_enuEnableClock+0x110>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_enablePLL();
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175a:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800175c:	e002      	b.n	8001764 <Rcc_enuEnableClock+0x9c>
			Loc_u8CounterTimeOut--;
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	3b01      	subs	r3, #1
 8001762:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0e5b      	lsrs	r3, r3, #25
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b01      	cmp	r3, #1
 8001770:	d034      	beq.n	80017dc <Rcc_enuEnableClock+0x114>
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f2      	bne.n	800175e <Rcc_enuEnableClock+0x96>
		}
		break;
 8001778:	e030      	b.n	80017dc <Rcc_enuEnableClock+0x114>


	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_enablePLLI2S();
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <Rcc_enuEnableClock+0x138>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a20      	ldr	r2, [pc, #128]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001784:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001786:	e002      	b.n	800178e <Rcc_enuEnableClock+0xc6>
			Loc_u8CounterTimeOut--;
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	3b01      	subs	r3, #1
 800178c:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <Rcc_enuEnableClock+0x138>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0edb      	lsrs	r3, r3, #27
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d021      	beq.n	80017e0 <Rcc_enuEnableClock+0x118>
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f2      	bne.n	8001788 <Rcc_enuEnableClock+0xc0>
		}
		break;
 80017a2:	e01d      	b.n	80017e0 <Rcc_enuEnableClock+0x118>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_enablePLLSAI();
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <Rcc_enuEnableClock+0x138>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a15      	ldr	r2, [pc, #84]	; (8001800 <Rcc_enuEnableClock+0x138>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80017b0:	e002      	b.n	80017b8 <Rcc_enuEnableClock+0xf0>
			Loc_u8CounterTimeOut--;
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <Rcc_enuEnableClock+0x138>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0f5b      	lsrs	r3, r3, #29
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d00e      	beq.n	80017e4 <Rcc_enuEnableClock+0x11c>
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f2      	bne.n	80017b2 <Rcc_enuEnableClock+0xea>
		}
		break;
 80017cc:	e00a      	b.n	80017e4 <Rcc_enuEnableClock+0x11c>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 80017ce:	2302      	movs	r3, #2
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e008      	b.n	80017e6 <Rcc_enuEnableClock+0x11e>
		break;
 80017d4:	bf00      	nop
 80017d6:	e006      	b.n	80017e6 <Rcc_enuEnableClock+0x11e>
		break;
 80017d8:	bf00      	nop
 80017da:	e004      	b.n	80017e6 <Rcc_enuEnableClock+0x11e>
		break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <Rcc_enuEnableClock+0x11e>
		break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <Rcc_enuEnableClock+0x11e>
		break;
 80017e4:	bf00      	nop
	}

	if(Loc_u8CounterTimeOut == ZERO_VALUE)
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <Rcc_enuEnableClock+0x128>
		Loc_enuRccStatusError = RCC_STATUS_TIME_OUT_FLAG;
 80017ec:	2304      	movs	r3, #4
 80017ee:	73fb      	strb	r3, [r7, #15]

	return Loc_enuRccStatusError;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <Rcc_enuDisableClock>:

Rcc_StatusErrorType Rcc_enuDisableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]


	switch (Copy_enuClockSourceIndex){
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d830      	bhi.n	800187a <Rcc_enuDisableClock+0x76>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <Rcc_enuDisableClock+0x1c>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001835 	.word	0x08001835
 8001824:	08001843 	.word	0x08001843
 8001828:	08001851 	.word	0x08001851
 800182c:	0800185f 	.word	0x0800185f
 8001830:	0800186d 	.word	0x0800186d

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_disableHSI();
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <Rcc_enuDisableClock+0x88>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6013      	str	r3, [r2, #0]
		break;
 8001840:	e01d      	b.n	800187e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_disableHSE();
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
		break;
 800184e:	e016      	b.n	800187e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_disablePLL();
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]
		break;
 800185c:	e00f      	b.n	800187e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_disablePLLI2S();
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001868:	6013      	str	r3, [r2, #0]
		break;
 800186a:	e008      	b.n	800187e <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_disablePLLSAI();
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <Rcc_enuDisableClock+0x88>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <Rcc_enuDisableClock+0x88>)
 8001872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001876:	6013      	str	r3, [r2, #0]

		break;
 8001878:	e001      	b.n	800187e <Rcc_enuDisableClock+0x7a>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 800187a:	2302      	movs	r3, #2
 800187c:	73fb      	strb	r3, [r7, #15]
	}


	return Loc_enuRccStatusError;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40023800 	.word	0x40023800

08001890 <Rcc_enuConfigPLL>:


Rcc_StatusErrorType Rcc_enuConfigPLL(const Rcc_PllConfigType* Address_Pll){
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	b08b      	sub	sp, #44	; 0x2c
 8001896:	af00      	add	r7, sp, #0
 8001898:	61f8      	str	r0, [r7, #28]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(Address_Pll == NULL){
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <Rcc_enuConfigPLL+0x1e>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ac:	e09e      	b.n	80019ec <Rcc_enuConfigPLL+0x15c>
	}
	else{
		RCC_setPLL_M_Factor(Address_Pll->rcc_PLL_M_From2To63);
 80018ae:	4b53      	ldr	r3, [pc, #332]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 011f 	bic.w	r1, r3, #31
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	799b      	ldrb	r3, [r3, #6]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_M = Address_Pll->rcc_PLL_M_From2To63;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	799b      	ldrb	r3, [r3, #6]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <Rcc_enuConfigPLL+0x170>)
 80018cc:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_N_Factor(Address_Pll->rcc_PLL_N_From50To432);
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 517f 	bic.w	r1, r3, #16320	; 0x3fc0
 80018d6:	f021 0120 	bic.w	r1, r1, #32
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	889b      	ldrh	r3, [r3, #4]
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	461a      	mov	r2, r3
 80018e2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80018e6:	4013      	ands	r3, r2
 80018e8:	4a44      	ldr	r2, [pc, #272]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 80018ea:	430b      	orrs	r3, r1
 80018ec:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_N = Address_Pll->rcc_PLL_N_From50To432;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	889b      	ldrh	r3, [r3, #4]
 80018f2:	4a44      	ldr	r2, [pc, #272]	; (8001a04 <Rcc_enuConfigPLL+0x174>)
 80018f4:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_P_Factor(Address_Pll->rcc_select_pllp);
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001908:	4a3c      	ldr	r2, [pc, #240]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 800190a:	430b      	orrs	r3, r1
 800190c:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_P = Address_Pll->rcc_select_pllp*TWO_VALUE+TWO_VALUE; // y = 2x+2
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	3301      	adds	r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	b29b      	uxth	r3, r3
 800191a:	4a3b      	ldr	r2, [pc, #236]	; (8001a08 <Rcc_enuConfigPLL+0x178>)
 800191c:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_Q_Factor(Address_Pll->rcc_select_pllq);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	789b      	ldrb	r3, [r3, #2]
 800192a:	061b      	lsls	r3, r3, #24
 800192c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001930:	4a32      	ldr	r2, [pc, #200]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 8001932:	430b      	orrs	r3, r1
 8001934:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_Q = Address_Pll->rcc_select_pllq;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4a33      	ldr	r2, [pc, #204]	; (8001a0c <Rcc_enuConfigPLL+0x17c>)
 800193e:	8013      	strh	r3, [r2, #0]

		RCC_setPLLClk(Address_Pll->rcc_select_pll_source);
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	059b      	lsls	r3, r3, #22
 800194e:	4a2b      	ldr	r2, [pc, #172]	; (80019fc <Rcc_enuConfigPLL+0x16c>)
 8001950:	430b      	orrs	r3, r1
 8001952:	6053      	str	r3, [r2, #4]
		Global_u64StaticPLL_Freq = !(Address_Pll->rcc_select_pll_source)*HSI_FREQ+ (Address_Pll->rcc_select_pll_source)*HSE_FREQ;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <Rcc_enuConfigPLL+0xd0>
 800195c:	492c      	ldr	r1, [pc, #176]	; (8001a10 <Rcc_enuConfigPLL+0x180>)
 800195e:	e000      	b.n	8001962 <Rcc_enuConfigPLL+0xd2>
 8001960:	2100      	movs	r1, #0
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <Rcc_enuConfigPLL+0x184>)
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	440b      	add	r3, r1
 8001970:	17da      	asrs	r2, r3, #31
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <Rcc_enuConfigPLL+0x188>)
 8001978:	e9d7 1200 	ldrd	r1, r2, [r7]
 800197c:	e9c3 1200 	strd	r1, r2, [r3]
		Global_u64StaticPLL_Freq = (Global_u64StaticPLL_Freq)/((u64)Global_u16StaticPLL_P*(u64)Global_u16StaticPLL_M)*Global_u16StaticPLL_N;
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <Rcc_enuConfigPLL+0x188>)
 8001982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <Rcc_enuConfigPLL+0x178>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	2200      	movs	r2, #0
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	617a      	str	r2, [r7, #20]
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <Rcc_enuConfigPLL+0x170>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	2200      	movs	r2, #0
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	60fa      	str	r2, [r7, #12]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	fb02 f203 	mul.w	r2, r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	693e      	ldr	r6, [r7, #16]
 80019aa:	fb06 f303 	mul.w	r3, r6, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68be      	ldr	r6, [r7, #8]
 80019b4:	fba2 8906 	umull	r8, r9, r2, r6
 80019b8:	444b      	add	r3, r9
 80019ba:	4699      	mov	r9, r3
 80019bc:	4642      	mov	r2, r8
 80019be:	464b      	mov	r3, r9
 80019c0:	f7fe ffe2 	bl	8000988 <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <Rcc_enuConfigPLL+0x174>)
 80019ca:	8809      	ldrh	r1, [r1, #0]
 80019cc:	b289      	uxth	r1, r1
 80019ce:	2000      	movs	r0, #0
 80019d0:	468a      	mov	sl, r1
 80019d2:	4683      	mov	fp, r0
 80019d4:	fb0a f003 	mul.w	r0, sl, r3
 80019d8:	fb02 f10b 	mul.w	r1, r2, fp
 80019dc:	4401      	add	r1, r0
 80019de:	fba2 450a 	umull	r4, r5, r2, sl
 80019e2:	194b      	adds	r3, r1, r5
 80019e4:	461d      	mov	r5, r3
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <Rcc_enuConfigPLL+0x188>)
 80019e8:	e9c3 4500 	strd	r4, r5, [r3]
	}

	return Loc_enuRccStatusError;
 80019ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	372c      	adds	r7, #44	; 0x2c
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	20000180 	.word	0x20000180
 8001a04:	20000182 	.word	0x20000182
 8001a08:	20000184 	.word	0x20000184
 8001a0c:	20000186 	.word	0x20000186
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200
 8001a18:	20000188 	.word	0x20000188

08001a1c <Rcc_enuInitMCO2>:

Rcc_StatusErrorType Rcc_enuInitMCO2(Rcc_MCO2PinSelectClkSoruceType Copy_enuMCO2ClkSource,Rcc_MCO2PinSelectPrescalerType Copy_enuMCO2Prescaler){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]

	RCC_selectMoc2Prescaler(Copy_enuMCO2Prescaler);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <Rcc_enuInitMCO2+0x4c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 5260 	bic.w	r2, r3, #939524096	; 0x38000000
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	06db      	lsls	r3, r3, #27
 8001a3c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8001a40:	4909      	ldr	r1, [pc, #36]	; (8001a68 <Rcc_enuInitMCO2+0x4c>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
	RCC_selectMoc2ClkSource(Copy_enuMCO2ClkSource);
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <Rcc_enuInitMCO2+0x4c>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	0792      	lsls	r2, r2, #30
 8001a52:	4611      	mov	r1, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <Rcc_enuInitMCO2+0x4c>)
 8001a56:	430b      	orrs	r3, r1
 8001a58:	6093      	str	r3, [r2, #8]

	return Loc_enuRccStatusError;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40023800 	.word	0x40023800

08001a6c <Rcc_enuSelectAPB2Prescaler>:
	RCC_selectMoc1ClkSource(Copy_enuMCO1ClkSource);

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuSelectAPB2Prescaler(Rcc_APB2SelectPrescalerType Copy_enuAPB2Prescaler){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
	RCC_selectAPB2Prescaler(Copy_enuAPB2Prescaler);
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <Rcc_enuSelectAPB2Prescaler+0x30>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	035b      	lsls	r3, r3, #13
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4904      	ldr	r1, [pc, #16]	; (8001a9c <Rcc_enuSelectAPB2Prescaler+0x30>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]

	return Loc_enuRccStatusError;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <Rcc_enuSelectAPB1Prescaler>:
Rcc_StatusErrorType Rcc_enuSelectAPB1Prescaler(Rcc_APB1SelectPrescalerType Copy_enuAPB1Prescaler){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
	RCC_selectAPB1Prescaler(Copy_enuAPB1Prescaler);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <Rcc_enuSelectAPB1Prescaler+0x34>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	029b      	lsls	r3, r3, #10
 8001aba:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001abe:	4905      	ldr	r1, [pc, #20]	; (8001ad4 <Rcc_enuSelectAPB1Prescaler+0x34>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

	return Loc_enuRccStatusError;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <Rcc_enuSelectAHBPrescaler>:
Rcc_StatusErrorType Rcc_enuSelectAHBPrescaler(Rcc_AHBSelectPrescalerType Copy_enuAHBPrescaler){
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4601      	mov	r1, r0
 8001ae0:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	73f9      	strb	r1, [r7, #15]
	RCC_selectAHBPrescaler(Copy_enuAHBPrescaler);
 8001ae6:	490e      	ldr	r1, [pc, #56]	; (8001b20 <Rcc_enuSelectAHBPrescaler+0x48>)
 8001ae8:	6889      	ldr	r1, [r1, #8]
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <Rcc_enuSelectAHBPrescaler+0x48>)
 8001aec:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8001af0:	6081      	str	r1, [r0, #8]

	Global_u64AHBFreq /=Global_u16AHBPrescalerValuesArr[Copy_enuAHBPrescaler];
 8001af2:	490c      	ldr	r1, [pc, #48]	; (8001b24 <Rcc_enuSelectAHBPrescaler+0x4c>)
 8001af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001af8:	79fc      	ldrb	r4, [r7, #7]
 8001afa:	4d0b      	ldr	r5, [pc, #44]	; (8001b28 <Rcc_enuSelectAHBPrescaler+0x50>)
 8001afc:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8001b00:	b2a4      	uxth	r4, r4
 8001b02:	2500      	movs	r5, #0
 8001b04:	4622      	mov	r2, r4
 8001b06:	462b      	mov	r3, r5
 8001b08:	f7fe ff3e 	bl	8000988 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4904      	ldr	r1, [pc, #16]	; (8001b24 <Rcc_enuSelectAHBPrescaler+0x4c>)
 8001b12:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	20000150 	.word	0x20000150
 8001b28:	20000124 	.word	0x20000124

08001b2c <Rcc_enuSelectSystemClkSource>:

Rcc_StatusErrorType Rcc_enuSelectSystemClkSource(Rcc_SystemClkSoruceIndexType Copy_enuSystemClkSource){
 8001b2c:	b490      	push	{r4, r7}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4601      	mov	r1, r0
 8001b34:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001b36:	2101      	movs	r1, #1
 8001b38:	73f9      	strb	r1, [r7, #15]

	RCC_selectSystemClk(Copy_enuSystemClkSource);
 8001b3a:	4918      	ldr	r1, [pc, #96]	; (8001b9c <Rcc_enuSelectSystemClkSource+0x70>)
 8001b3c:	6889      	ldr	r1, [r1, #8]
 8001b3e:	f021 0003 	bic.w	r0, r1, #3
 8001b42:	79f9      	ldrb	r1, [r7, #7]
 8001b44:	f001 0103 	and.w	r1, r1, #3
 8001b48:	4c14      	ldr	r4, [pc, #80]	; (8001b9c <Rcc_enuSelectSystemClkSource+0x70>)
 8001b4a:	4301      	orrs	r1, r0
 8001b4c:	60a1      	str	r1, [r4, #8]

	if(Copy_enuSystemClkSource == RCC_SYSTEM_CLK_PLL_INDEX){
 8001b4e:	79f9      	ldrb	r1, [r7, #7]
 8001b50:	2902      	cmp	r1, #2
 8001b52:	d106      	bne.n	8001b62 <Rcc_enuSelectSystemClkSource+0x36>
		Global_u64SystemFreq = Global_u64StaticPLL_Freq;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <Rcc_enuSelectSystemClkSource+0x74>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	4912      	ldr	r1, [pc, #72]	; (8001ba4 <Rcc_enuSelectSystemClkSource+0x78>)
 8001b5c:	e9c1 2300 	strd	r2, r3, [r1]
 8001b60:	e016      	b.n	8001b90 <Rcc_enuSelectSystemClkSource+0x64>
	}

	else{
		Global_u64SystemFreq = !(Copy_enuSystemClkSource)*HSI_FREQ + Copy_enuSystemClkSource*HSE_FREQ;
 8001b62:	79f9      	ldrb	r1, [r7, #7]
 8001b64:	2900      	cmp	r1, #0
 8001b66:	d101      	bne.n	8001b6c <Rcc_enuSelectSystemClkSource+0x40>
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <Rcc_enuSelectSystemClkSource+0x7c>)
 8001b6a:	e000      	b.n	8001b6e <Rcc_enuSelectSystemClkSource+0x42>
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	79f9      	ldrb	r1, [r7, #7]
 8001b70:	4c0e      	ldr	r4, [pc, #56]	; (8001bac <Rcc_enuSelectSystemClkSource+0x80>)
 8001b72:	fb04 f101 	mul.w	r1, r4, r1
 8001b76:	4401      	add	r1, r0
 8001b78:	17c8      	asrs	r0, r1, #31
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <Rcc_enuSelectSystemClkSource+0x78>)
 8001b80:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64AHBFreq = Global_u64SystemFreq;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <Rcc_enuSelectSystemClkSource+0x78>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <Rcc_enuSelectSystemClkSource+0x84>)
 8001b8c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return Loc_enuRccStatusError;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc90      	pop	{r4, r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	20000188 	.word	0x20000188
 8001ba4:	20000148 	.word	0x20000148
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	20000150 	.word	0x20000150

08001bb4 <Rcc_enuEnablePeripheralClk>:
	}

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuEnablePeripheralClk(Rcc_BusIndexType Copy_enuBusIndex, u8 Copy_u8PeripheralIndex){
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralIndex>THIRTYONE_VALUE  || Copy_enuBusIndex > FOUR_VALUE){
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	2b1f      	cmp	r3, #31
 8001bcc:	d802      	bhi.n	8001bd4 <Rcc_enuEnablePeripheralClk+0x20>
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d902      	bls.n	8001bda <Rcc_enuEnablePeripheralClk+0x26>
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e015      	b.n	8001c06 <Rcc_enuEnablePeripheralClk+0x52>
	}
	else{
		WRITE_BIT((*Global_PeripheralClkRegEnArr[Copy_enuBusIndex]),Copy_u8PeripheralIndex,ONE_VALUE);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <Rcc_enuEnablePeripheralClk+0x60>)
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	79ba      	ldrb	r2, [r7, #6]
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	43d2      	mvns	r2, r2
 8001bee:	401a      	ands	r2, r3
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4905      	ldr	r1, [pc, #20]	; (8001c14 <Rcc_enuEnablePeripheralClk+0x60>)
 8001bfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c02:	4302      	orrs	r2, r0
 8001c04:	601a      	str	r2, [r3, #0]
	}

	return Loc_enuRccStatusError;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000110 	.word	0x20000110

08001c18 <Rcc_enuConfigPLLI2S>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuConfigPLLI2S(const Rcc_PllI2SConfigType* Address_PllI2S){
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]

	if(Address_PllI2S == NULL){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <Rcc_enuConfigPLLI2S+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e032      	b.n	8001c96 <Rcc_enuConfigPLLI2S+0x7e>
	}
	else{

		RCC_setPLL_I2S_N_Factor(Address_PllI2S->rcc_PLLI2S_N_From50To432);
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	8852      	ldrh	r2, [r2, #2]
 8001c42:	0192      	lsls	r2, r2, #6
 8001c44:	4611      	mov	r1, r2
 8001c46:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_R_Factor(Address_PllI2S->rcc_select_pll_I2S_R);
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c62:	6093      	str	r3, [r2, #8]
		RCC_setPLL_I2S_Q_Factor(Address_PllI2S->rcc_select_pll_I2S_Q);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c6a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001c78:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_Clk(Address_PllI2S->rcc_select_pll_i2s_source_clk);
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	7912      	ldrb	r2, [r2, #4]
 8001c8c:	05d2      	lsls	r2, r2, #23
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <Rcc_enuConfigPLLI2S+0x8c>)
 8001c92:	430b      	orrs	r3, r1
 8001c94:	6093      	str	r3, [r2, #8]
	}

	return Loc_enuRccStatusError;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <Rcc_enuConfigPLLSAI>:


Rcc_StatusErrorType Rcc_enuConfigPLLSAI(const Rcc_PllSAIConfigType* Address_PllSAI){
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]

	if(Address_PllSAI == NULL){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <Rcc_enuConfigPLLSAI+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e06e      	b.n	8001d9e <Rcc_enuConfigPLLSAI+0xf6>
	}
	else{

		RCC_setPLL_SAI_N_Factor(Address_PllSAI->rcc_PLLSAI_N_From50To432);
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	8852      	ldrh	r2, [r2, #2]
 8001cd2:	0192      	lsls	r2, r2, #6
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001cda:	400a      	ands	r2, r1
 8001cdc:	4933      	ldr	r1, [pc, #204]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_Q_Factor(Address_PllSAI->rcc_select_pll_SAI_Q);
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	061b      	lsls	r3, r3, #24
 8001cf4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001cf8:	492c      	ldr	r1, [pc, #176]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_R_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		RCC_setPLL_SAI_QX_PLLI2SDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLI2SDIVQ_Qx_Last_FROM1to50);
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1a:	f023 021f 	bic.w	r2, r3, #31
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	88db      	ldrh	r3, [r3, #6]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	4921      	ldr	r1, [pc, #132]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_QY_PLLSAIDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLSAIDIVQ_Qy_Last_FROM1to50);
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	889b      	ldrh	r3, [r3, #4]
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001d42:	491a      	ldr	r1, [pc, #104]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_RLcd_PLLSAIDIVR_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5e:	4913      	ldr	r1, [pc, #76]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		RCC_setPLL_SAI1A_Clk(Address_PllSAI->rcc_select_SAI1A_source);
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7a5b      	ldrb	r3, [r3, #9]
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI1B_Clk(Address_PllSAI->rcc_select_SAI1B_source);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7a9b      	ldrb	r3, [r3, #10]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001d96:	4905      	ldr	r1, [pc, #20]	; (8001dac <Rcc_enuConfigPLLSAI+0x104>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c



	}

	return Loc_enuRccStatusError;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]


}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40023800 	.word	0x40023800

08001db0 <Rcc_enuInit>:


Rcc_StatusErrorType Rcc_enuInit(const Rcc_ConfigType* Address_Rcc){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]

	if(Address_Rcc == NULL){
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <Rcc_enuInit+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e09b      	b.n	8001f00 <Rcc_enuInit+0x150>
	}
	else{

		/*  Enable Clocks */
		if(Address_Rcc->rcc_hse_on_or_off == RCC_ON){
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d107      	bne.n	8001de0 <Rcc_enuInit+0x30>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hse_on_or_off);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fc77 	bl	80016c8 <Rcc_enuEnableClock>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e006      	b.n	8001dee <Rcc_enuInit+0x3e>
		}

		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hse_on_or_off);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fd0d 	bl	8001804 <Rcc_enuDisableClock>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_hsi_on_or_off == RCC_ON){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <Rcc_enuInit+0x56>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hsi_on_or_off);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fc64 	bl	80016c8 <Rcc_enuEnableClock>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e006      	b.n	8001e14 <Rcc_enuInit+0x64>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hsi_on_or_off);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fcfa 	bl	8001804 <Rcc_enuDisableClock>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
		}


		if(Address_Rcc->rcc_pll_on_or_off == RCC_ON && Address_Rcc->address_pll_cfg  != NULL){
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	789b      	ldrb	r3, [r3, #2]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d112      	bne.n	8001e42 <Rcc_enuInit+0x92>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <Rcc_enuInit+0x92>
			Loc_enuRccStatusError = Rcc_enuConfigPLL(Address_Rcc->address_pll_cfg);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fd31 	bl	8001890 <Rcc_enuConfigPLL>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pll_on_or_off);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fc46 	bl	80016c8 <Rcc_enuEnableClock>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e006      	b.n	8001e50 <Rcc_enuInit+0xa0>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pll_on_or_off);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	789b      	ldrb	r3, [r3, #2]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcdc 	bl	8001804 <Rcc_enuDisableClock>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllI2S_on_or_off == RCC_ON && Address_Rcc->adress_pll_i2s_cfg  != NULL){
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d112      	bne.n	8001e7e <Rcc_enuInit+0xce>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <Rcc_enuInit+0xce>
			Loc_enuRccStatusError = 	Rcc_enuConfigPLLI2S(Address_Rcc->adress_pll_i2s_cfg);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fed7 	bl	8001c18 <Rcc_enuConfigPLLI2S>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	78db      	ldrb	r3, [r3, #3]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fc28 	bl	80016c8 <Rcc_enuEnableClock>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e006      	b.n	8001e8c <Rcc_enuInit+0xdc>
		}
		else{
			Loc_enuRccStatusError = 	Rcc_enuDisableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fcbe 	bl	8001804 <Rcc_enuDisableClock>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllSAI_on_or_off == RCC_ON && Address_Rcc->address_pll_sai_cfg  != NULL){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d112      	bne.n	8001eba <Rcc_enuInit+0x10a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <Rcc_enuInit+0x10a>
			Loc_enuRccStatusError = Rcc_enuConfigPLLSAI(Address_Rcc->address_pll_sai_cfg);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff01 	bl	8001ca8 <Rcc_enuConfigPLLSAI>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fc0a 	bl	80016c8 <Rcc_enuEnableClock>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e006      	b.n	8001ec8 <Rcc_enuInit+0x118>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fca0 	bl	8001804 <Rcc_enuDisableClock>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	73fb      	strb	r3, [r7, #15]
		}

		Loc_enuRccStatusError = Rcc_enuSelectAPB2Prescaler(Address_Rcc->rcc_apb2_select_prescaler );
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7d1b      	ldrb	r3, [r3, #20]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fdcd 	bl	8001a6c <Rcc_enuSelectAPB2Prescaler>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAPB1Prescaler( Address_Rcc->rcc_apb1_select_prescaler);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7d5b      	ldrb	r3, [r3, #21]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fde0 	bl	8001aa0 <Rcc_enuSelectAPB1Prescaler>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAHBPrescaler( Address_Rcc->rcc_ahb_select_prescaler);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7d9b      	ldrb	r3, [r3, #22]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fdf5 	bl	8001ad8 <Rcc_enuSelectAHBPrescaler>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectSystemClkSource(Address_Rcc->rcc_sysmte_clk_soruce);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7ddb      	ldrb	r3, [r3, #23]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe18 	bl	8001b2c <Rcc_enuSelectSystemClkSource>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]


	}

	return Loc_enuRccStatusError;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <Systick_enuInit>:


/******************************* Software Interfaces Implementation **********************************/


Systick_ErrorStatusType Systick_enuInit(void){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
	Systick_ErrorStatusType Loc_enuSystickErrorStatus = SYSTICK_STATUS_OK;
 8001f12:	2301      	movs	r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]

	/* Disable Interrupt */
	Systick_disableInterrupt();
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <Systick_enuInit+0x70>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <Systick_enuInit+0x70>)
 8001f1c:	f023 0302 	bic.w	r3, r3, #2
 8001f20:	6013      	str	r3, [r2, #0]

	/* Select Clock Source */
	Systick_setClkSoruce(STK_CLK_SORUCE);
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <Systick_enuInit+0x70>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <Systick_enuInit+0x70>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6013      	str	r3, [r2, #0]

	GlobalStatic_u64SystickFreq =Global_u64AHBFreq / (!STK_CLK_SORUCE*8 + STK_CLK_SORUCE);
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <Systick_enuInit+0x74>)
 8001f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	08c2      	lsrs	r2, r0, #3
 8001f3e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8001f42:	08cb      	lsrs	r3, r1, #3
 8001f44:	490f      	ldr	r1, [pc, #60]	; (8001f84 <Systick_enuInit+0x78>)
 8001f46:	e9c1 2300 	strd	r2, r3, [r1]
	Global_f64TimeOverflow = (f64)STK_LOAD_FULL_VALUE/(f64)GlobalStatic_u64SystickFreq;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <Systick_enuInit+0x78>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fad0 	bl	80004f8 <__aeabi_ul2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8001f60:	4909      	ldr	r1, [pc, #36]	; (8001f88 <Systick_enuInit+0x7c>)
 8001f62:	f7fe fc29 	bl	80007b8 <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <Systick_enuInit+0x80>)
 8001f6c:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuSystickErrorStatus;
 8001f70:	79fb      	ldrb	r3, [r7, #7]


}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010
 8001f80:	20000150 	.word	0x20000150
 8001f84:	200001a8 	.word	0x200001a8
 8001f88:	416fffff 	.word	0x416fffff
 8001f8c:	20000198 	.word	0x20000198

08001f90 <Systick_enuSetBusyWaitTicks>:


}


Systick_ErrorStatusType Systick_enuSetBusyWaitTicks(u32 Copy_u32TicksNumber){
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	Systick_ErrorStatusType Loc_enuSystickErrorStatus = SYSTICK_STATUS_OK;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]

	u8 Loc_u8InterruptStatusEnable ;

	/* Set Value */
	Systick_SetValue(Copy_u32TicksNumber);
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <Systick_enuSetBusyWaitTicks+0x78>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]

	/* get interrupt status */
	Loc_u8InterruptStatusEnable = Systick_getInterruptStatus();
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	73bb      	strb	r3, [r7, #14]

	/* Disable interrupt */
	Systick_disableInterrupt();
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a15      	ldr	r2, [pc, #84]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fb6:	f023 0302 	bic.w	r3, r3, #2
 8001fba:	6013      	str	r3, [r2, #0]

	/* Start Timer */
	Systick_startCounting();
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]
	while(Systick_IsCountingDone() == ZERO_VALUE);
 8001fc8:	bf00      	nop
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0c1b      	lsrs	r3, r3, #16
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d1f8      	bne.n	8001fca <Systick_enuSetBusyWaitTicks+0x3a>

	/* Disable/stop Timer */
	Systick_stopTimer();
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]

	/* set interrupt as it was */
	Systick_setInterruptStatus(Loc_u8InterruptStatusEnable);
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 0302 	bic.w	r3, r3, #2
 8001fec:	7bba      	ldrb	r2, [r7, #14]
 8001fee:	0052      	lsls	r2, r2, #1
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4a06      	ldr	r2, [pc, #24]	; (800200c <Systick_enuSetBusyWaitTicks+0x7c>)
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6013      	str	r3, [r2, #0]

	return Loc_enuSystickErrorStatus;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]


}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e014 	.word	0xe000e014
 800200c:	e000e010 	.word	0xe000e010

08002010 <SysTick_Handler>:


}

/**************************** ISR Implementation ************************************/
void SysTick_Handler (void){
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0

	if(Systick_OverflowInterruptHandler != NULL){
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <SysTick_Handler+0x38>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <SysTick_Handler+0x12>
		Systick_OverflowInterruptHandler();
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <SysTick_Handler+0x38>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4798      	blx	r3
	else{
		/* Error in setting callback */

	}

	if(Global_u8TimerTypeFlag == SYSTICK_INTERVAL_FLAG){
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <SysTick_Handler+0x3c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10b      	bne.n	8002042 <SysTick_Handler+0x32>
		Systick_disableInterrupt();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <SysTick_Handler+0x40>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <SysTick_Handler+0x40>)
 8002030:	f023 0302 	bic.w	r3, r3, #2
 8002034:	6013      	str	r3, [r2, #0]
		Systick_stopTimer();
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SysTick_Handler+0x40>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SysTick_Handler+0x40>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6013      	str	r3, [r2, #0]
	}
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200001a0 	.word	0x200001a0
 800204c:	20000190 	.word	0x20000190
 8002050:	e000e010 	.word	0xe000e010

08002054 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002056:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002058:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <LoopForever+0x6>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	; (8002094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <LoopForever+0xe>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	; (80020a0 <LoopForever+0x16>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002082:	f000 f811 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002086:	f7fe fdfd 	bl	8000c84 <main>

0800208a <LoopForever>:

LoopForever:
  b LoopForever
 800208a:	e7fe      	b.n	800208a <LoopForever>
  ldr   r0, =_estack
 800208c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8002098:	08002118 	.word	0x08002118
  ldr r2, =_sbss
 800209c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80020a0:	200001b0 	.word	0x200001b0

080020a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4d0d      	ldr	r5, [pc, #52]	; (80020e0 <__libc_init_array+0x38>)
 80020ac:	4c0d      	ldr	r4, [pc, #52]	; (80020e4 <__libc_init_array+0x3c>)
 80020ae:	1b64      	subs	r4, r4, r5
 80020b0:	10a4      	asrs	r4, r4, #2
 80020b2:	2600      	movs	r6, #0
 80020b4:	42a6      	cmp	r6, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	4d0b      	ldr	r5, [pc, #44]	; (80020e8 <__libc_init_array+0x40>)
 80020ba:	4c0c      	ldr	r4, [pc, #48]	; (80020ec <__libc_init_array+0x44>)
 80020bc:	f000 f818 	bl	80020f0 <_init>
 80020c0:	1b64      	subs	r4, r4, r5
 80020c2:	10a4      	asrs	r4, r4, #2
 80020c4:	2600      	movs	r6, #0
 80020c6:	42a6      	cmp	r6, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d0:	4798      	blx	r3
 80020d2:	3601      	adds	r6, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020da:	4798      	blx	r3
 80020dc:	3601      	adds	r6, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	08002110 	.word	0x08002110
 80020e4:	08002110 	.word	0x08002110
 80020e8:	08002110 	.word	0x08002110
 80020ec:	08002114 	.word	0x08002114

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr
