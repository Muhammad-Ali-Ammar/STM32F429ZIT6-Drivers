
STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002184  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002330  08002330  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002330  08002330  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002338  08002338  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08002340  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000090  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003e87  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000a1a  00000000  00000000  000240e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000330  00000000  00000000  00024b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000253  00000000  00000000  00024e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001bb2  00000000  00000000  00025083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001834  00000000  00000000  00026c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000f08c  00000000  00000000  00028469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000df0  00000000  00000000  000374f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e8 	.word	0x200001e8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002318 	.word	0x08002318

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001ec 	.word	0x200001ec
 80001e8:	08002318 	.word	0x08002318

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_uldivmod>:
 8000988:	b953      	cbnz	r3, 80009a0 <__aeabi_uldivmod+0x18>
 800098a:	b94a      	cbnz	r2, 80009a0 <__aeabi_uldivmod+0x18>
 800098c:	2900      	cmp	r1, #0
 800098e:	bf08      	it	eq
 8000990:	2800      	cmpeq	r0, #0
 8000992:	bf1c      	itt	ne
 8000994:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000998:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800099c:	f000 b98e 	b.w	8000cbc <__aeabi_idiv0>
 80009a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a8:	f000 f824 	bl	80009f4 <__udivmoddi4>
 80009ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b4:	b004      	add	sp, #16
 80009b6:	4770      	bx	lr

080009b8 <__aeabi_d2ulz>:
 80009b8:	b5d0      	push	{r4, r6, r7, lr}
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__aeabi_d2ulz+0x34>)
 80009bc:	2200      	movs	r2, #0
 80009be:	4606      	mov	r6, r0
 80009c0:	460f      	mov	r7, r1
 80009c2:	f7ff fdcf 	bl	8000564 <__aeabi_dmul>
 80009c6:	f000 f97b 	bl	8000cc0 <__aeabi_d2uiz>
 80009ca:	4604      	mov	r4, r0
 80009cc:	f7ff fd50 	bl	8000470 <__aeabi_ui2d>
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <__aeabi_d2ulz+0x38>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f7ff fdc6 	bl	8000564 <__aeabi_dmul>
 80009d8:	4602      	mov	r2, r0
 80009da:	460b      	mov	r3, r1
 80009dc:	4630      	mov	r0, r6
 80009de:	4639      	mov	r1, r7
 80009e0:	f7ff fc08 	bl	80001f4 <__aeabi_dsub>
 80009e4:	f000 f96c 	bl	8000cc0 <__aeabi_d2uiz>
 80009e8:	4621      	mov	r1, r4
 80009ea:	bdd0      	pop	{r4, r6, r7, pc}
 80009ec:	3df00000 	.word	0x3df00000
 80009f0:	41f00000 	.word	0x41f00000

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a48:	f080 811c 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8119 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a76:	f080 8107 	bcs.w	8000c88 <__udivmoddi4+0x294>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8104 	bls.w	8000c88 <__udivmoddi4+0x294>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ed 	beq.w	8000c7e <__udivmoddi4+0x28a>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f8 	bhi.w	8000cb2 <__udivmoddi4+0x2be>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8090 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2b8>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b68:	4323      	orrs	r3, r4
 8000b6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fb09 5518 	mls	r5, r9, r8, r5
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bac:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46ae      	mov	lr, r5
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x29c>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x298>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bea:	eb64 040e 	sbc.w	r4, r4, lr
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	f1c3 0120 	rsb	r1, r3, #32
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c10:	fa25 f101 	lsr.w	r1, r5, r1
 8000c14:	409d      	lsls	r5, r3
 8000c16:	432a      	orrs	r2, r5
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1510 	mls	r5, r7, r0, r1
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c32:	428d      	cmp	r5, r1
 8000c34:	fa04 f403 	lsl.w	r4, r4, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x258>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c44:	428d      	cmp	r5, r1
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4461      	add	r1, ip
 8000c4c:	1b49      	subs	r1, r1, r5
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c54:	fb07 1115 	mls	r1, r7, r5, r1
 8000c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c60:	4291      	cmp	r1, r2
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x282>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c6e:	4291      	cmp	r1, r2
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a52      	subs	r2, r2, r1
 8000c78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e708      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c84:	4639      	mov	r1, r7
 8000c86:	e6e6      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	e6fb      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8c:	4548      	cmp	r0, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x282>
 8000ca0:	462b      	mov	r3, r5
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x258>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000cac:	3d02      	subs	r5, #2
 8000cae:	4462      	add	r2, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e70a      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x14e>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_d2uiz>:
 8000cc0:	004a      	lsls	r2, r1, #1
 8000cc2:	d211      	bcs.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000cc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cc8:	d211      	bcs.n	8000cee <__aeabi_d2uiz+0x2e>
 8000cca:	d50d      	bpl.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000ccc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cd4:	d40e      	bmi.n	8000cf4 <__aeabi_d2uiz+0x34>
 8000cd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ce2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cf2:	d102      	bne.n	8000cfa <__aeabi_d2uiz+0x3a>
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf8:	4770      	bx	lr
 8000cfa:	f04f 0000 	mov.w	r0, #0
 8000cfe:	4770      	bx	lr

08000d00 <Usart_Isr>:
		.select_stop_bits = USART_SELECT_STOP_1_BIT,
		.select_sync_mode = USART_SELECT_ASYNCHRONOUS_MODE
};


void Usart_Isr(u16 Copy_u16Result){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]

	if(Copy_u16Result == '1'){
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	2b31      	cmp	r3, #49	; 0x31
 8000d0e:	d103      	bne.n	8000d18 <Usart_Isr+0x18>
		Gpio_enuFlipChannel(GPIO_PING13);
 8000d10:	206d      	movs	r0, #109	; 0x6d
 8000d12:	f000 f8eb 	bl	8000eec <Gpio_enuFlipChannel>
	}
	else if(Copy_u16Result == '0'){
		Gpio_enuClearPinChannelAtomic(GPIO_PING13);
	}
}
 8000d16:	e005      	b.n	8000d24 <Usart_Isr+0x24>
	else if(Copy_u16Result == '0'){
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	2b30      	cmp	r3, #48	; 0x30
 8000d1c:	d102      	bne.n	8000d24 <Usart_Isr+0x24>
		Gpio_enuClearPinChannelAtomic(GPIO_PING13);
 8000d1e:	206d      	movs	r0, #109	; 0x6d
 8000d20:	f000 f912 	bl	8000f48 <Gpio_enuClearPinChannelAtomic>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <main>:

int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	/********************************** It must *************************************/

	/* RCC PART */
 	Rcc_enuInit(&rcc);
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0x5c>)
 8000d32:	f000 fdfb 	bl	800192c <Rcc_enuInit>
	Gpio_enuEnableClockAllGPIOs();
 8000d36:	f000 f98d 	bl	8001054 <Gpio_enuEnableClockAllGPIOs>
	Rcc_enuInitMCO2(RCC_MCO2_PIN_SELECT_HSE_CLK,RCC_MCO2_PIN_SELECT_PRESCALER_NO_DIV);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 fbf3 	bl	8001528 <Rcc_enuInitMCO2>


	/* Systic Part */
	Systick_enuInit();
 8000d42:	f000 fec1 	bl	8001ac8 <Systick_enuInit>

	/* Interrupt Part */
	Scb_enuSetGroupPrioirty(SCB_SELECT_GROUP_PRIORITY_ZERO_AND_SUB_PRIORITY_16);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fe9e 	bl	8001a88 <Scb_enuSetGroupPrioirty>



	Gpio_enuInit();
 8000d4c:	f000 f822 	bl	8000d94 <Gpio_enuInit>



	/* UART part */

	Nvic_SetInterruptPriority(NVIC_USART1, NVIC_Select_Group_0, NVIC_Select_Sub_0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2025      	movs	r0, #37	; 0x25
 8000d56:	f000 f9e1 	bl	800111c <Nvic_SetInterruptPriority>
	Gpio_enuSetAF(GPIO_PINB6, GPIO_SELECT_AF7_USART1_USART2_USART3); // for Usart Tx1
 8000d5a:	2107      	movs	r1, #7
 8000d5c:	2016      	movs	r0, #22
 8000d5e:	f000 f91b 	bl	8000f98 <Gpio_enuSetAF>
	Gpio_enuSetAF(GPIO_PINB7, GPIO_SELECT_AF7_USART1_USART2_USART3); // for Usart Rx1
 8000d62:	2107      	movs	r1, #7
 8000d64:	2017      	movs	r0, #23
 8000d66:	f000 f917 	bl	8000f98 <Gpio_enuSetAF>


	Usart_enuSetCallbackRxFunction(&Usart1, Usart_Isr);
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <main+0x60>)
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <main+0x64>)
 8000d6e:	f001 fa1b 	bl	80021a8 <Usart_enuSetCallbackRxFunction>
	Usart_enuInit(&Usart1);
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <main+0x64>)
 8000d74:	f001 f8d4 	bl	8001f20 <Usart_enuInit>
	Usart_enuEnableRxInterrupt(&Usart1);
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <main+0x64>)
 8000d7a:	f001 f9ef 	bl	800215c <Usart_enuEnableRxInterrupt>

	Nvic_enuEnableInterrupt(NVIC_USART1);
 8000d7e:	2025      	movs	r0, #37	; 0x25
 8000d80:	f000 f9a4 	bl	80010cc <Nvic_enuEnableInterrupt>


///////////////////////////////////////////////////////////////////////////////////////


	for(;;){
 8000d84:	e7fe      	b.n	8000d84 <main+0x58>
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	08000d01 	.word	0x08000d01
 8000d90:	20000018 	.word	0x20000018

08000d94 <Gpio_enuInit>:

/********************************** Macros Function Declarations *********************/


/******************************* Software Interfaces Implementation *******************/
Gpio_StatusErrorType Gpio_enuInit(void){
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]

	Gpio_concat(
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a4a      	ldr	r2, [pc, #296]	; (8000ecc <Gpio_enuInit+0x138>)
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a47      	ldr	r2, [pc, #284]	; (8000edc <Gpio_enuInit+0x148>)
 8000dc0:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel1_PINA1,
	    GPIO_u8PinChannel0_PINA0 // End with the lowest channel
	);


	Gpio_concat(
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a46      	ldr	r2, [pc, #280]	; (8000ee0 <Gpio_enuInit+0x14c>)
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000de2:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel18_PINB2,  // Corresponds to pin B2
	    GPIO_u8PinChannel17_PINB1,  // Corresponds to pin B1
	    GPIO_u8PinChannel16_PINB0   // Corresponds to pin B0, which is indicated as 16
	);

	Gpio_concat(
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4a3e      	ldr	r2, [pc, #248]	; (8000ee4 <Gpio_enuInit+0x150>)
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e04:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel35_PINC3,  // Corresponds to pin C3
	    GPIO_u8PinChannel34_PINC2,  // Corresponds to pin C2
	    GPIO_u8PinChannel33_PINC1,  // Corresponds to pin C1
	    GPIO_u8PinChannel32_PINC0   // Corresponds to pin C0, which is indicated as 32
	);
	Gpio_concat(
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a37      	ldr	r2, [pc, #220]	; (8000ee8 <Gpio_enuInit+0x154>)
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e26:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel49_PIND1,  // Corresponds to pin D1
	    GPIO_u8PinChannel48_PIND0   // Corresponds to pin D0, which is indicated as 48
	);


	Gpio_concat(
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e4a:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel67_PINE3,  // Corresponds to pin E3
	    GPIO_u8PinChannel66_PINE2,  // Corresponds to pin E2
	    GPIO_u8PinChannel65_PINE1,  // Corresponds to pin E1
	    GPIO_u8PinChannel64_PINE0   // Corresponds to pin E0, starting from 64
	);
	Gpio_concat(
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e6e:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel83_PINF3,  // Corresponds to pin F3
	    GPIO_u8PinChannel82_PINF2,  // Corresponds to pin F2
	    GPIO_u8PinChannel81_PINF1,  // Corresponds to pin F1
	    GPIO_u8PinChannel80_PINF0   // Corresponds to pin F0, starting from 80
	);
	Gpio_concat(
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e92:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel96_PING0    // Corresponds to pin G0, starting from 96
	);



	Gpio_concat(
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <Gpio_enuInit+0x134>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <Gpio_enuInit+0x13c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <Gpio_enuInit+0x140>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <Gpio_enuInit+0x144>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000eb6:	601a      	str	r2, [r3, #0]
	    GPIO_u8PinChannel113_PINH1,  // Corresponds to pin H1
	    GPIO_u8PinChannel112_PINH0   // Corresponds to pin H0, starting from 112
	);


	return Loc_enuGpioStatusError;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000030 	.word	0x20000030
 8000ecc:	aaa95555 	.word	0xaaa95555
 8000ed0:	20000050 	.word	0x20000050
 8000ed4:	20000070 	.word	0x20000070
 8000ed8:	20000090 	.word	0x20000090
 8000edc:	01555555 	.word	0x01555555
 8000ee0:	5555a555 	.word	0x5555a555
 8000ee4:	55595555 	.word	0x55595555
 8000ee8:	5555555a 	.word	0x5555555a

08000eec <Gpio_enuFlipChannel>:
				ASSIGN_REG((* Address_pu8PortVAlue),(* Global_IdrReadArr[Copy_u8PortId]));
		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType  Gpio_enuFlipChannel(u8 Copy_u8ChannelId){
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	737b      	strb	r3, [r7, #13]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d902      	bls.n	8000f14 <Gpio_enuFlipChannel+0x28>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e00f      	b.n	8000f34 <Gpio_enuFlipChannel+0x48>
		}


			else{
				TOGGLE_BIT(*Global_OdreArr[Loc_u8PortNumber],Loc_u8PinNumber);
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <Gpio_enuFlipChannel+0x58>)
 8000f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	4906      	ldr	r1, [pc, #24]	; (8000f44 <Gpio_enuFlipChannel+0x58>)
 8000f2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f30:	4042      	eors	r2, r0
 8000f32:	601a      	str	r2, [r3, #0]
		}

			return Loc_enuGpioStatusError;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200000b0 	.word	0x200000b0

08000f48 <Gpio_enuClearPinChannelAtomic>:
				ASSIGN_REG((* Global_BsrrArr[Loc_u8PortNumber]),(ONE_VALUE<<Loc_u8PinNumber));
		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuClearPinChannelAtomic(u8 Copy_u8ChannelId){
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	737b      	strb	r3, [r7, #13]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	d902      	bls.n	8000f70 <Gpio_enuClearPinChannelAtomic+0x28>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e00a      	b.n	8000f86 <Gpio_enuClearPinChannelAtomic+0x3e>
		}


			else{
				ASSIGN_REG((* Global_BsrrArr[Loc_u8PortNumber]),(ONE_VALUE<<(Loc_u8PinNumber+SIXTEEN_VALUE)));
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	3310      	adds	r3, #16
 8000f74:	2201      	movs	r2, #1
 8000f76:	fa02 f103 	lsl.w	r1, r2, r3
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <Gpio_enuClearPinChannelAtomic+0x4c>)
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	460a      	mov	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
		}

			return Loc_enuGpioStatusError;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	200000d0 	.word	0x200000d0

08000f98 <Gpio_enuSetAF>:

Gpio_StatusErrorType Gpio_enuSetAF(u8 Copy_u8ChannelId,Gpio_SelectAFType Copy_enuAF){
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]

	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
		u8 Loc_u8PinNumber = Copy_u8ChannelId % SIXTEEN_VALUE;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	73bb      	strb	r3, [r7, #14]
		u8 Loc_u8PortNumber = Copy_u8ChannelId /SIXTEEN_VALUE;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	737b      	strb	r3, [r7, #13]
		u8 Loc_u8TempPinNumber =Loc_u8PinNumber %EIGHT_VALUE;   // from 0 to 7
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	733b      	strb	r3, [r7, #12]

		if(Loc_u8PinNumber > GPIO_MAX_INDEX_OF_PIN_NUMBER ){
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d902      	bls.n	8000fce <Gpio_enuSetAF+0x36>
			Loc_enuGpioStatusError = GPIO_STATUS_WRONG_PIN_ID;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e037      	b.n	800103e <Gpio_enuSetAF+0xa6>
		}


			else{

				if(Loc_u8PinNumber<EIGHT_VALUE){
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d81a      	bhi.n	800100a <Gpio_enuSetAF+0x72>
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	4a1d      	ldr	r2, [pc, #116]	; (800104c <Gpio_enuSetAF+0xb4>)
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	7bba      	ldrb	r2, [r7, #14]
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe8:	43d2      	mvns	r2, r2
 8000fea:	401a      	ands	r2, r3
												((Copy_enuAF & 0xF ) <<(Loc_u8PinNumber*FOUR_VALUE));
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	f003 010f 	and.w	r1, r3, #15
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	4618      	mov	r0, r3
					*Global_AFLowArr[Loc_u8PortNumber] =  ((*Global_AFLowArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8PinNumber*FOUR_VALUE)) ) |\
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	4913      	ldr	r1, [pc, #76]	; (800104c <Gpio_enuSetAF+0xb4>)
 8001000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001004:	4302      	orrs	r2, r0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e019      	b.n	800103e <Gpio_enuSetAF+0xa6>

				}
				else{
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <Gpio_enuSetAF+0xb8>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	7b3a      	ldrb	r2, [r7, #12]
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	210f      	movs	r1, #15
 800101a:	fa01 f202 	lsl.w	r2, r1, r2
 800101e:	43d2      	mvns	r2, r2
 8001020:	401a      	ands	r2, r3
																	((Copy_enuAF & 0xF ) <<(Loc_u8TempPinNumber*FOUR_VALUE));
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	f003 010f 	and.w	r1, r3, #15
 8001028:	7b3b      	ldrb	r3, [r7, #12]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4618      	mov	r0, r3
					*Global_AFHighArr[Loc_u8PortNumber] =  ((*Global_AFHighArr[Loc_u8PortNumber])& ~(0xF<<(Loc_u8TempPinNumber*FOUR_VALUE)) ) |\
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	4906      	ldr	r1, [pc, #24]	; (8001050 <Gpio_enuSetAF+0xb8>)
 8001036:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800103a:	4302      	orrs	r2, r0
 800103c:	601a      	str	r2, [r3, #0]
				}
		}

			return Loc_enuGpioStatusError;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200000f0 	.word	0x200000f0
 8001050:	20000110 	.word	0x20000110

08001054 <Gpio_enuEnableClockAllGPIOs>:

		}

			return Loc_enuGpioStatusError;
}
Gpio_StatusErrorType Gpio_enuEnableClockAllGPIOs(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	Gpio_StatusErrorType Loc_enuGpioStatusError = GPIO_STATUS_OK;
 800105a:	2301      	movs	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
	volatile Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800105e:	2301      	movs	r3, #1
 8001060:	71bb      	strb	r3, [r7, #6]

	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTA);
 8001062:	2100      	movs	r1, #0
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fb63 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 800106a:	4603      	mov	r3, r0
 800106c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTB);
 800106e:	2101      	movs	r1, #1
 8001070:	2000      	movs	r0, #0
 8001072:	f000 fb5d 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTC);
 800107a:	2102      	movs	r1, #2
 800107c:	2000      	movs	r0, #0
 800107e:	f000 fb57 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTD);
 8001086:	2103      	movs	r1, #3
 8001088:	2000      	movs	r0, #0
 800108a:	f000 fb51 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 800108e:	4603      	mov	r3, r0
 8001090:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTE);
 8001092:	2104      	movs	r1, #4
 8001094:	2000      	movs	r0, #0
 8001096:	f000 fb4b 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTF);
 800109e:	2105      	movs	r1, #5
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fb45 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 80010a6:	4603      	mov	r3, r0
 80010a8:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTH);
 80010aa:	2107      	movs	r1, #7
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 fb3f 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 80010b2:	4603      	mov	r3, r0
 80010b4:	71bb      	strb	r3, [r7, #6]
	Loc_enuRccStatusError = Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_AHB1, GPIO_PORTG);
 80010b6:	2106      	movs	r1, #6
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fb39 	bl	8001730 <Rcc_enuEnablePeripheralClk>
 80010be:	4603      	mov	r3, r0
 80010c0:	71bb      	strb	r3, [r7, #6]



	return Loc_enuGpioStatusError;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <Nvic_enuEnableInterrupt>:



/******************************* Software Interfaces Implementation *******************/

Nvic_ErrorStatusType Nvic_enuEnableInterrupt(Nvic_IndexPeripheralType Copy_NvicIndex){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	Nvic_ErrorStatusType Loc_NvicErrorStatus = NVIC_STATUS_OK;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8RegNumber = Copy_NvicIndex/THIRTYTWO_VALUE;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	73bb      	strb	r3, [r7, #14]
	u8 Loc_u8BitNumber = Copy_NvicIndex%THIRTYTWO_VALUE;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	737b      	strb	r3, [r7, #13]

	SET_BIT(*GlobalStatic_NvicIsrEnableArr[Loc_u8RegNumber], Loc_u8BitNumber);
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <Nvic_enuEnableInterrupt+0x4c>)
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	4906      	ldr	r1, [pc, #24]	; (8001118 <Nvic_enuEnableInterrupt+0x4c>)
 8001100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001104:	4302      	orrs	r2, r0
 8001106:	601a      	str	r2, [r3, #0]


	return Loc_NvicErrorStatus;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000130 	.word	0x20000130

0800111c <Nvic_SetInterruptPriority>:

	return Loc_NvicErrorStatus;
}

Nvic_ErrorStatusType Nvic_SetInterruptPriority(Nvic_IndexPeripheralType Copy_NvicIndex,Nvic_SelectGroupxType Copy_enuGroupNumber,
																Nvic_SelectSubxType Copy_enuSubNumber){
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	460b      	mov	r3, r1
 8001128:	71bb      	strb	r3, [r7, #6]
 800112a:	4613      	mov	r3, r2
 800112c:	717b      	strb	r3, [r7, #5]
	Nvic_ErrorStatusType Loc_NvicErrorStatus = NVIC_STATUS_OK;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8PriorityResult= ZERO_VALUE;
 8001132:	2300      	movs	r3, #0
 8001134:	73bb      	strb	r3, [r7, #14]

	switch(Global_GroupPrioritySelection){
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <Nvic_SetInterruptPriority+0xb4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d836      	bhi.n	80011ac <Nvic_SetInterruptPriority+0x90>
 800113e:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <Nvic_SetInterruptPriority+0x28>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001165 	.word	0x08001165
 8001148:	080011ad 	.word	0x080011ad
 800114c:	080011ad 	.word	0x080011ad
 8001150:	080011ad 	.word	0x080011ad
 8001154:	0800116b 	.word	0x0800116b
 8001158:	080011ad 	.word	0x080011ad
 800115c:	08001189 	.word	0x08001189
 8001160:	080011a7 	.word	0x080011a7

	case SCB_SELECT_GROUP_PRIORITY_16_AND_SUB_PRIORITY_ZERO :
		Loc_u8PriorityResult = Copy_enuGroupNumber;
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	73bb      	strb	r3, [r7, #14]
		break;
 8001168:	e022      	b.n	80011b0 <Nvic_SetInterruptPriority+0x94>

	case SCB_SELECT_GROUP_PRIORITY_4_AND_SUB_PRIORITY_4:
		Loc_u8PriorityResult = ((Copy_enuGroupNumber & 0b11) <<TWO_VALUE) | ((Copy_enuSubNumber & 0b11) <<ZERO_VALUE);
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	b25a      	sxtb	r2, r3
 8001176:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	b25b      	sxtb	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b25b      	sxtb	r3, r3
 8001184:	73bb      	strb	r3, [r7, #14]
		break;
 8001186:	e013      	b.n	80011b0 <Nvic_SetInterruptPriority+0x94>
	case SCB_SELECT_GROUP_PRIORITY_2_AND_SUB_PRIORITY_8:
		Loc_u8PriorityResult = ((Copy_enuGroupNumber & 0b1) <<ONE_VALUE) | ((Copy_enuSubNumber & 0b111) <<ZERO_VALUE);
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b25b      	sxtb	r3, r3
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	b25a      	sxtb	r2, r3
 8001194:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	73bb      	strb	r3, [r7, #14]
		break;
 80011a4:	e004      	b.n	80011b0 <Nvic_SetInterruptPriority+0x94>

	case SCB_SELECT_GROUP_PRIORITY_ZERO_AND_SUB_PRIORITY_16:
		Loc_u8PriorityResult = Copy_enuSubNumber;
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	73bb      	strb	r3, [r7, #14]
		break;
 80011aa:	e001      	b.n	80011b0 <Nvic_SetInterruptPriority+0x94>

	default :
		Loc_NvicErrorStatus = NVIC_STATUS_FAIL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
	}


	NVIC_IPR[Copy_NvicIndex] = Loc_u8PriorityResult<<FOUR_VALUE; // first 4 bits reserved
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	011a      	lsls	r2, r3, #4
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80011bc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80011c0:	601a      	str	r2, [r3, #0]


	return Loc_NvicErrorStatus;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000218 	.word	0x20000218

080011d4 <Rcc_enuEnableClock>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuEnableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80011de:	2301      	movs	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8CounterTimeOut = 240;
 80011e2:	23f0      	movs	r3, #240	; 0xf0
 80011e4:	73bb      	strb	r3, [r7, #14]
	switch (Copy_enuClockSourceIndex){
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d876      	bhi.n	80012da <Rcc_enuEnableClock+0x106>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <Rcc_enuEnableClock+0x20>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001209 	.word	0x08001209
 80011f8:	08001233 	.word	0x08001233
 80011fc:	0800125d 	.word	0x0800125d
 8001200:	08001287 	.word	0x08001287
 8001204:	080012b1 	.word	0x080012b1

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_enableHSI();
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <Rcc_enuEnableClock+0x138>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a3f      	ldr	r2, [pc, #252]	; (800130c <Rcc_enuEnableClock+0x138>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001214:	e002      	b.n	800121c <Rcc_enuEnableClock+0x48>
			Loc_u8CounterTimeOut--;
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	3b01      	subs	r3, #1
 800121a:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSIReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <Rcc_enuEnableClock+0x138>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b01      	cmp	r3, #1
 8001228:	d05a      	beq.n	80012e0 <Rcc_enuEnableClock+0x10c>
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f2      	bne.n	8001216 <Rcc_enuEnableClock+0x42>
		}

		break;
 8001230:	e056      	b.n	80012e0 <Rcc_enuEnableClock+0x10c>
	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_enableHSE();
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <Rcc_enuEnableClock+0x138>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a35      	ldr	r2, [pc, #212]	; (800130c <Rcc_enuEnableClock+0x138>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800123e:	e002      	b.n	8001246 <Rcc_enuEnableClock+0x72>
			Loc_u8CounterTimeOut--;
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	3b01      	subs	r3, #1
 8001244:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsHSEReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <Rcc_enuEnableClock+0x138>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0c5b      	lsrs	r3, r3, #17
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d047      	beq.n	80012e4 <Rcc_enuEnableClock+0x110>
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f2      	bne.n	8001240 <Rcc_enuEnableClock+0x6c>
		}
		break;
 800125a:	e043      	b.n	80012e4 <Rcc_enuEnableClock+0x110>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_enablePLL();
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <Rcc_enuEnableClock+0x138>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2a      	ldr	r2, [pc, #168]	; (800130c <Rcc_enuEnableClock+0x138>)
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001268:	e002      	b.n	8001270 <Rcc_enuEnableClock+0x9c>
			Loc_u8CounterTimeOut--;
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	3b01      	subs	r3, #1
 800126e:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReady() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <Rcc_enuEnableClock+0x138>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0e5b      	lsrs	r3, r3, #25
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b01      	cmp	r3, #1
 800127c:	d034      	beq.n	80012e8 <Rcc_enuEnableClock+0x114>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f2      	bne.n	800126a <Rcc_enuEnableClock+0x96>
		}
		break;
 8001284:	e030      	b.n	80012e8 <Rcc_enuEnableClock+0x114>


	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_enablePLLI2S();
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <Rcc_enuEnableClock+0x138>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <Rcc_enuEnableClock+0x138>)
 800128c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001290:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 8001292:	e002      	b.n	800129a <Rcc_enuEnableClock+0xc6>
			Loc_u8CounterTimeOut--;
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	3b01      	subs	r3, #1
 8001298:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadyI2S() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <Rcc_enuEnableClock+0x138>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0edb      	lsrs	r3, r3, #27
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d021      	beq.n	80012ec <Rcc_enuEnableClock+0x118>
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f2      	bne.n	8001294 <Rcc_enuEnableClock+0xc0>
		}
		break;
 80012ae:	e01d      	b.n	80012ec <Rcc_enuEnableClock+0x118>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_enablePLLSAI();
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <Rcc_enuEnableClock+0x138>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <Rcc_enuEnableClock+0x138>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ba:	6013      	str	r3, [r2, #0]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80012bc:	e002      	b.n	80012c4 <Rcc_enuEnableClock+0xf0>
			Loc_u8CounterTimeOut--;
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	73bb      	strb	r3, [r7, #14]
		while(RCC_IsPLLReadySAI() == ZERO_VALUE && Loc_u8CounterTimeOut != ZERO_VALUE){
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <Rcc_enuEnableClock+0x138>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0f5b      	lsrs	r3, r3, #29
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d00e      	beq.n	80012f0 <Rcc_enuEnableClock+0x11c>
 80012d2:	7bbb      	ldrb	r3, [r7, #14]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <Rcc_enuEnableClock+0xea>
		}
		break;
 80012d8:	e00a      	b.n	80012f0 <Rcc_enuEnableClock+0x11c>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 80012da:	2302      	movs	r3, #2
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e008      	b.n	80012f2 <Rcc_enuEnableClock+0x11e>
		break;
 80012e0:	bf00      	nop
 80012e2:	e006      	b.n	80012f2 <Rcc_enuEnableClock+0x11e>
		break;
 80012e4:	bf00      	nop
 80012e6:	e004      	b.n	80012f2 <Rcc_enuEnableClock+0x11e>
		break;
 80012e8:	bf00      	nop
 80012ea:	e002      	b.n	80012f2 <Rcc_enuEnableClock+0x11e>
		break;
 80012ec:	bf00      	nop
 80012ee:	e000      	b.n	80012f2 <Rcc_enuEnableClock+0x11e>
		break;
 80012f0:	bf00      	nop
	}

	if(Loc_u8CounterTimeOut == ZERO_VALUE)
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <Rcc_enuEnableClock+0x128>
		Loc_enuRccStatusError = RCC_STATUS_TIME_OUT_FLAG;
 80012f8:	2304      	movs	r3, #4
 80012fa:	73fb      	strb	r3, [r7, #15]

	return Loc_enuRccStatusError;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <Rcc_enuDisableClock>:

Rcc_StatusErrorType Rcc_enuDisableClock(Rcc_ClkSoruceIndexType Copy_enuClockSourceIndex){
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]


	switch (Copy_enuClockSourceIndex){
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d830      	bhi.n	8001386 <Rcc_enuDisableClock+0x76>
 8001324:	a201      	add	r2, pc, #4	; (adr r2, 800132c <Rcc_enuDisableClock+0x1c>)
 8001326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132a:	bf00      	nop
 800132c:	08001341 	.word	0x08001341
 8001330:	0800134f 	.word	0x0800134f
 8001334:	0800135d 	.word	0x0800135d
 8001338:	0800136b 	.word	0x0800136b
 800133c:	08001379 	.word	0x08001379

	case RCC_CLK_SOURCE_HSI_INDEX:
		RCC_disableHSI();
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <Rcc_enuDisableClock+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <Rcc_enuDisableClock+0x88>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]
		break;
 800134c:	e01d      	b.n	800138a <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_HSE_INDEX:

		RCC_disableHSE();
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <Rcc_enuDisableClock+0x88>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <Rcc_enuDisableClock+0x88>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
		break;
 800135a:	e016      	b.n	800138a <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLL_INDEX:
		RCC_disablePLL();
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <Rcc_enuDisableClock+0x88>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <Rcc_enuDisableClock+0x88>)
 8001362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001366:	6013      	str	r3, [r2, #0]
		break;
 8001368:	e00f      	b.n	800138a <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLI2S_INDEX:
		RCC_disablePLLI2S();
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <Rcc_enuDisableClock+0x88>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <Rcc_enuDisableClock+0x88>)
 8001370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001374:	6013      	str	r3, [r2, #0]
		break;
 8001376:	e008      	b.n	800138a <Rcc_enuDisableClock+0x7a>

	case RCC_CLK_SOURCE_PLLSAI_INDEX:
		RCC_disablePLLSAI();
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <Rcc_enuDisableClock+0x88>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <Rcc_enuDisableClock+0x88>)
 800137e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001382:	6013      	str	r3, [r2, #0]

		break;
 8001384:	e001      	b.n	800138a <Rcc_enuDisableClock+0x7a>

	default :
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001386:	2302      	movs	r3, #2
 8001388:	73fb      	strb	r3, [r7, #15]
	}


	return Loc_enuRccStatusError;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40023800 	.word	0x40023800

0800139c <Rcc_enuConfigPLL>:


Rcc_StatusErrorType Rcc_enuConfigPLL(const Rcc_PllConfigType* Address_Pll){
 800139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a0:	b08b      	sub	sp, #44	; 0x2c
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	61f8      	str	r0, [r7, #28]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(Address_Pll == NULL){
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <Rcc_enuConfigPLL+0x1e>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013b8:	e09e      	b.n	80014f8 <Rcc_enuConfigPLL+0x15c>
	}
	else{
		RCC_setPLL_M_Factor(Address_Pll->rcc_PLL_M_From2To63);
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f023 011f 	bic.w	r1, r3, #31
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	799b      	ldrb	r3, [r3, #6]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_M = Address_Pll->rcc_PLL_M_From2To63;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4a4d      	ldr	r2, [pc, #308]	; (800150c <Rcc_enuConfigPLL+0x170>)
 80013d8:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_N_Factor(Address_Pll->rcc_PLL_N_From50To432);
 80013da:	4b4b      	ldr	r3, [pc, #300]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 517f 	bic.w	r1, r3, #16320	; 0x3fc0
 80013e2:	f021 0120 	bic.w	r1, r1, #32
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	889b      	ldrh	r3, [r3, #4]
 80013ea:	019b      	lsls	r3, r3, #6
 80013ec:	461a      	mov	r2, r3
 80013ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80013f2:	4013      	ands	r3, r2
 80013f4:	4a44      	ldr	r2, [pc, #272]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_N = Address_Pll->rcc_PLL_N_From50To432;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	889b      	ldrh	r3, [r3, #4]
 80013fe:	4a44      	ldr	r2, [pc, #272]	; (8001510 <Rcc_enuConfigPLL+0x174>)
 8001400:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_P_Factor(Address_Pll->rcc_select_pllp);
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001414:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 8001416:	430b      	orrs	r3, r1
 8001418:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_P = Address_Pll->rcc_select_pllp*TWO_VALUE+TWO_VALUE; // y = 2x+2
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	785b      	ldrb	r3, [r3, #1]
 800141e:	3301      	adds	r3, #1
 8001420:	b29b      	uxth	r3, r3
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	b29b      	uxth	r3, r3
 8001426:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <Rcc_enuConfigPLL+0x178>)
 8001428:	8013      	strh	r3, [r2, #0]

		RCC_setPLL_Q_Factor(Address_Pll->rcc_select_pllq);
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	061b      	lsls	r3, r3, #24
 8001438:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 800143e:	430b      	orrs	r3, r1
 8001440:	6053      	str	r3, [r2, #4]
		Global_u16StaticPLL_Q = Address_Pll->rcc_select_pllq;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	789b      	ldrb	r3, [r3, #2]
 8001446:	b29b      	uxth	r3, r3
 8001448:	4a33      	ldr	r2, [pc, #204]	; (8001518 <Rcc_enuConfigPLL+0x17c>)
 800144a:	8013      	strh	r3, [r2, #0]

		RCC_setPLLClk(Address_Pll->rcc_select_pll_source);
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	059b      	lsls	r3, r3, #22
 800145a:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <Rcc_enuConfigPLL+0x16c>)
 800145c:	430b      	orrs	r3, r1
 800145e:	6053      	str	r3, [r2, #4]
		Global_u64StaticPLL_Freq = !(Address_Pll->rcc_select_pll_source)*HSI_FREQ+ (Address_Pll->rcc_select_pll_source)*HSE_FREQ;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <Rcc_enuConfigPLL+0xd0>
 8001468:	492c      	ldr	r1, [pc, #176]	; (800151c <Rcc_enuConfigPLL+0x180>)
 800146a:	e000      	b.n	800146e <Rcc_enuConfigPLL+0xd2>
 800146c:	2100      	movs	r1, #0
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <Rcc_enuConfigPLL+0x184>)
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	440b      	add	r3, r1
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <Rcc_enuConfigPLL+0x188>)
 8001484:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001488:	e9c3 1200 	strd	r1, r2, [r3]
		Global_u64StaticPLL_Freq = (Global_u64StaticPLL_Freq)/((u64)Global_u16StaticPLL_P*(u64)Global_u16StaticPLL_M)*Global_u16StaticPLL_N;
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <Rcc_enuConfigPLL+0x188>)
 800148e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <Rcc_enuConfigPLL+0x178>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	2200      	movs	r2, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <Rcc_enuConfigPLL+0x170>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	60fa      	str	r2, [r7, #12]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	fb02 f203 	mul.w	r2, r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	693e      	ldr	r6, [r7, #16]
 80014b6:	fb06 f303 	mul.w	r3, r6, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68be      	ldr	r6, [r7, #8]
 80014c0:	fba2 8906 	umull	r8, r9, r2, r6
 80014c4:	444b      	add	r3, r9
 80014c6:	4699      	mov	r9, r3
 80014c8:	4642      	mov	r2, r8
 80014ca:	464b      	mov	r3, r9
 80014cc:	f7ff fa5c 	bl	8000988 <__aeabi_uldivmod>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	490e      	ldr	r1, [pc, #56]	; (8001510 <Rcc_enuConfigPLL+0x174>)
 80014d6:	8809      	ldrh	r1, [r1, #0]
 80014d8:	b289      	uxth	r1, r1
 80014da:	2000      	movs	r0, #0
 80014dc:	468a      	mov	sl, r1
 80014de:	4683      	mov	fp, r0
 80014e0:	fb0a f003 	mul.w	r0, sl, r3
 80014e4:	fb02 f10b 	mul.w	r1, r2, fp
 80014e8:	4401      	add	r1, r0
 80014ea:	fba2 450a 	umull	r4, r5, r2, sl
 80014ee:	194b      	adds	r3, r1, r5
 80014f0:	461d      	mov	r5, r3
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <Rcc_enuConfigPLL+0x188>)
 80014f4:	e9c3 4500 	strd	r4, r5, [r3]
	}

	return Loc_enuRccStatusError;
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	372c      	adds	r7, #44	; 0x2c
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	20000204 	.word	0x20000204
 8001510:	20000206 	.word	0x20000206
 8001514:	20000208 	.word	0x20000208
 8001518:	2000020a 	.word	0x2000020a
 800151c:	00f42400 	.word	0x00f42400
 8001520:	007a1200 	.word	0x007a1200
 8001524:	20000210 	.word	0x20000210

08001528 <Rcc_enuInitMCO2>:

Rcc_StatusErrorType Rcc_enuInitMCO2(Rcc_MCO2PinSelectClkSoruceType Copy_enuMCO2ClkSource,Rcc_MCO2PinSelectPrescalerType Copy_enuMCO2Prescaler){
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]

	RCC_selectMoc2Prescaler(Copy_enuMCO2Prescaler);
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <Rcc_enuInitMCO2+0x4c>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 5260 	bic.w	r2, r3, #939524096	; 0x38000000
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	06db      	lsls	r3, r3, #27
 8001548:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800154c:	4909      	ldr	r1, [pc, #36]	; (8001574 <Rcc_enuInitMCO2+0x4c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
	RCC_selectMoc2ClkSource(Copy_enuMCO2ClkSource);
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <Rcc_enuInitMCO2+0x4c>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	0792      	lsls	r2, r2, #30
 800155e:	4611      	mov	r1, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <Rcc_enuInitMCO2+0x4c>)
 8001562:	430b      	orrs	r3, r1
 8001564:	6093      	str	r3, [r2, #8]

	return Loc_enuRccStatusError;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800

08001578 <Rcc_enuSelectAPB2Prescaler>:
	RCC_selectMoc1ClkSource(Copy_enuMCO1ClkSource);

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuSelectAPB2Prescaler(Rcc_APB2SelectPrescalerType Copy_enuAPB2Prescaler){
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4601      	mov	r1, r0
 8001580:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001582:	2101      	movs	r1, #1
 8001584:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB2Prescaler(Copy_enuAPB2Prescaler);
 8001586:	4910      	ldr	r1, [pc, #64]	; (80015c8 <Rcc_enuSelectAPB2Prescaler+0x50>)
 8001588:	6889      	ldr	r1, [r1, #8]
 800158a:	f421 4060 	bic.w	r0, r1, #57344	; 0xe000
 800158e:	79f9      	ldrb	r1, [r7, #7]
 8001590:	0349      	lsls	r1, r1, #13
 8001592:	b289      	uxth	r1, r1
 8001594:	4c0c      	ldr	r4, [pc, #48]	; (80015c8 <Rcc_enuSelectAPB2Prescaler+0x50>)
 8001596:	4301      	orrs	r1, r0
 8001598:	60a1      	str	r1, [r4, #8]
	Global_u64ABP2Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB2Prescaler];
 800159a:	490c      	ldr	r1, [pc, #48]	; (80015cc <Rcc_enuSelectAPB2Prescaler+0x54>)
 800159c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a0:	79fc      	ldrb	r4, [r7, #7]
 80015a2:	4d0b      	ldr	r5, [pc, #44]	; (80015d0 <Rcc_enuSelectAPB2Prescaler+0x58>)
 80015a4:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 80015a8:	b2a4      	uxth	r4, r4
 80015aa:	2500      	movs	r5, #0
 80015ac:	4622      	mov	r2, r4
 80015ae:	462b      	mov	r3, r5
 80015b0:	f7ff f9ea 	bl	8000988 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <Rcc_enuSelectAPB2Prescaler+0x54>)
 80015ba:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdb0      	pop	{r4, r5, r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	200001c0 	.word	0x200001c0
 80015d0:	20000184 	.word	0x20000184

080015d4 <Rcc_enuSelectAPB1Prescaler>:
Rcc_StatusErrorType Rcc_enuSelectAPB1Prescaler(Rcc_APB1SelectPrescalerType Copy_enuAPB1Prescaler){
 80015d4:	b5b0      	push	{r4, r5, r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4601      	mov	r1, r0
 80015dc:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 80015de:	2101      	movs	r1, #1
 80015e0:	73f9      	strb	r1, [r7, #15]
	RCC_selectAPB1Prescaler(Copy_enuAPB1Prescaler);
 80015e2:	4911      	ldr	r1, [pc, #68]	; (8001628 <Rcc_enuSelectAPB1Prescaler+0x54>)
 80015e4:	6889      	ldr	r1, [r1, #8]
 80015e6:	f421 50e0 	bic.w	r0, r1, #7168	; 0x1c00
 80015ea:	79f9      	ldrb	r1, [r7, #7]
 80015ec:	0289      	lsls	r1, r1, #10
 80015ee:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
 80015f2:	4c0d      	ldr	r4, [pc, #52]	; (8001628 <Rcc_enuSelectAPB1Prescaler+0x54>)
 80015f4:	4301      	orrs	r1, r0
 80015f6:	60a1      	str	r1, [r4, #8]
	Global_u64ABP1Freq /=Global_u16APBPrescalerValuesArr[Copy_enuAPB1Prescaler];
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <Rcc_enuSelectAPB1Prescaler+0x58>)
 80015fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015fe:	79fc      	ldrb	r4, [r7, #7]
 8001600:	4d0b      	ldr	r5, [pc, #44]	; (8001630 <Rcc_enuSelectAPB1Prescaler+0x5c>)
 8001602:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 8001606:	b2a4      	uxth	r4, r4
 8001608:	2500      	movs	r5, #0
 800160a:	4622      	mov	r2, r4
 800160c:	462b      	mov	r3, r5
 800160e:	f7ff f9bb 	bl	8000988 <__aeabi_uldivmod>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4905      	ldr	r1, [pc, #20]	; (800162c <Rcc_enuSelectAPB1Prescaler+0x58>)
 8001618:	e9c1 2300 	strd	r2, r3, [r1]



	return Loc_enuRccStatusError;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	200001b8 	.word	0x200001b8
 8001630:	20000184 	.word	0x20000184

08001634 <Rcc_enuSelectAHBPrescaler>:
Rcc_StatusErrorType Rcc_enuSelectAHBPrescaler(Rcc_AHBSelectPrescalerType Copy_enuAHBPrescaler){
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4601      	mov	r1, r0
 800163c:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800163e:	2101      	movs	r1, #1
 8001640:	73f9      	strb	r1, [r7, #15]
	RCC_selectAHBPrescaler(Copy_enuAHBPrescaler);
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <Rcc_enuSelectAHBPrescaler+0x48>)
 8001644:	6889      	ldr	r1, [r1, #8]
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <Rcc_enuSelectAHBPrescaler+0x48>)
 8001648:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800164c:	6081      	str	r1, [r0, #8]

	Global_u64AHBFreq /=Global_u16AHBPrescalerValuesArr[Copy_enuAHBPrescaler];
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <Rcc_enuSelectAHBPrescaler+0x4c>)
 8001650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001654:	79fc      	ldrb	r4, [r7, #7]
 8001656:	4d0b      	ldr	r5, [pc, #44]	; (8001684 <Rcc_enuSelectAHBPrescaler+0x50>)
 8001658:	f835 4014 	ldrh.w	r4, [r5, r4, lsl #1]
 800165c:	b2a4      	uxth	r4, r4
 800165e:	2500      	movs	r5, #0
 8001660:	4622      	mov	r2, r4
 8001662:	462b      	mov	r3, r5
 8001664:	f7ff f990 	bl	8000988 <__aeabi_uldivmod>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <Rcc_enuSelectAHBPrescaler+0x4c>)
 800166e:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuRccStatusError;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	200001b0 	.word	0x200001b0
 8001684:	20000164 	.word	0x20000164

08001688 <Rcc_enuSelectSystemClkSource>:

Rcc_StatusErrorType Rcc_enuSelectSystemClkSource(Rcc_SystemClkSoruceIndexType Copy_enuSystemClkSource){
 8001688:	b490      	push	{r4, r7}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4601      	mov	r1, r0
 8001690:	71f9      	strb	r1, [r7, #7]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001692:	2101      	movs	r1, #1
 8001694:	73f9      	strb	r1, [r7, #15]

	RCC_selectSystemClk(Copy_enuSystemClkSource);
 8001696:	491e      	ldr	r1, [pc, #120]	; (8001710 <Rcc_enuSelectSystemClkSource+0x88>)
 8001698:	6889      	ldr	r1, [r1, #8]
 800169a:	f021 0003 	bic.w	r0, r1, #3
 800169e:	79f9      	ldrb	r1, [r7, #7]
 80016a0:	f001 0103 	and.w	r1, r1, #3
 80016a4:	4c1a      	ldr	r4, [pc, #104]	; (8001710 <Rcc_enuSelectSystemClkSource+0x88>)
 80016a6:	4301      	orrs	r1, r0
 80016a8:	60a1      	str	r1, [r4, #8]

	if(Copy_enuSystemClkSource == RCC_SYSTEM_CLK_PLL_INDEX){
 80016aa:	79f9      	ldrb	r1, [r7, #7]
 80016ac:	2902      	cmp	r1, #2
 80016ae:	d106      	bne.n	80016be <Rcc_enuSelectSystemClkSource+0x36>
		Global_u64SystemFreq = Global_u64StaticPLL_Freq;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <Rcc_enuSelectSystemClkSource+0x8c>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	4918      	ldr	r1, [pc, #96]	; (8001718 <Rcc_enuSelectSystemClkSource+0x90>)
 80016b8:	e9c1 2300 	strd	r2, r3, [r1]
 80016bc:	e022      	b.n	8001704 <Rcc_enuSelectSystemClkSource+0x7c>
	}

	else{
		Global_u64SystemFreq = !(Copy_enuSystemClkSource)*HSI_FREQ + Copy_enuSystemClkSource*HSE_FREQ;
 80016be:	79f9      	ldrb	r1, [r7, #7]
 80016c0:	2900      	cmp	r1, #0
 80016c2:	d101      	bne.n	80016c8 <Rcc_enuSelectSystemClkSource+0x40>
 80016c4:	4815      	ldr	r0, [pc, #84]	; (800171c <Rcc_enuSelectSystemClkSource+0x94>)
 80016c6:	e000      	b.n	80016ca <Rcc_enuSelectSystemClkSource+0x42>
 80016c8:	2000      	movs	r0, #0
 80016ca:	79f9      	ldrb	r1, [r7, #7]
 80016cc:	4c14      	ldr	r4, [pc, #80]	; (8001720 <Rcc_enuSelectSystemClkSource+0x98>)
 80016ce:	fb04 f101 	mul.w	r1, r4, r1
 80016d2:	4401      	add	r1, r0
 80016d4:	17c8      	asrs	r0, r1, #31
 80016d6:	460a      	mov	r2, r1
 80016d8:	4603      	mov	r3, r0
 80016da:	490f      	ldr	r1, [pc, #60]	; (8001718 <Rcc_enuSelectSystemClkSource+0x90>)
 80016dc:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64AHBFreq = Global_u64SystemFreq;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <Rcc_enuSelectSystemClkSource+0x90>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	490f      	ldr	r1, [pc, #60]	; (8001724 <Rcc_enuSelectSystemClkSource+0x9c>)
 80016e8:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP1Freq = Global_u64SystemFreq;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <Rcc_enuSelectSystemClkSource+0x90>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	490d      	ldr	r1, [pc, #52]	; (8001728 <Rcc_enuSelectSystemClkSource+0xa0>)
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
		Global_u64ABP2Freq = Global_u64SystemFreq;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <Rcc_enuSelectSystemClkSource+0x90>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	490b      	ldr	r1, [pc, #44]	; (800172c <Rcc_enuSelectSystemClkSource+0xa4>)
 8001700:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return Loc_enuRccStatusError;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bc90      	pop	{r4, r7}
 800170e:	4770      	bx	lr
 8001710:	40023800 	.word	0x40023800
 8001714:	20000210 	.word	0x20000210
 8001718:	200001a8 	.word	0x200001a8
 800171c:	00f42400 	.word	0x00f42400
 8001720:	007a1200 	.word	0x007a1200
 8001724:	200001b0 	.word	0x200001b0
 8001728:	200001b8 	.word	0x200001b8
 800172c:	200001c0 	.word	0x200001c0

08001730 <Rcc_enuEnablePeripheralClk>:
	}

	return Loc_enuRccStatusError;
}

Rcc_StatusErrorType Rcc_enuEnablePeripheralClk(Rcc_BusIndexType Copy_enuBusIndex, u8 Copy_u8PeripheralIndex){
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralIndex>THIRTYONE_VALUE  || Copy_enuBusIndex > FOUR_VALUE){
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	2b1f      	cmp	r3, #31
 8001748:	d802      	bhi.n	8001750 <Rcc_enuEnablePeripheralClk+0x20>
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d902      	bls.n	8001756 <Rcc_enuEnablePeripheralClk+0x26>
		Loc_enuRccStatusError = RCC_STATUS_WRONG_INDEX;
 8001750:	2302      	movs	r3, #2
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e015      	b.n	8001782 <Rcc_enuEnablePeripheralClk+0x52>
	}
	else{
		WRITE_BIT((*Global_PeripheralClkRegEnArr[Copy_enuBusIndex]),Copy_u8PeripheralIndex,ONE_VALUE);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <Rcc_enuEnablePeripheralClk+0x60>)
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	79ba      	ldrb	r2, [r7, #6]
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	43d2      	mvns	r2, r2
 800176a:	401a      	ands	r2, r3
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	4618      	mov	r0, r3
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4905      	ldr	r1, [pc, #20]	; (8001790 <Rcc_enuEnablePeripheralClk+0x60>)
 800177a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800177e:	4302      	orrs	r2, r0
 8001780:	601a      	str	r2, [r3, #0]
	}

	return Loc_enuRccStatusError;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	20000150 	.word	0x20000150

08001794 <Rcc_enuConfigPLLI2S>:

	return Loc_enuRccStatusError;
}


Rcc_StatusErrorType Rcc_enuConfigPLLI2S(const Rcc_PllI2SConfigType* Address_PllI2S){
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]

	if(Address_PllI2S == NULL){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <Rcc_enuConfigPLLI2S+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 80017a6:	2303      	movs	r3, #3
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e032      	b.n	8001812 <Rcc_enuConfigPLLI2S+0x7e>
	}
	else{

		RCC_setPLL_I2S_N_Factor(Address_PllI2S->rcc_PLLI2S_N_From50To432);
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	8852      	ldrh	r2, [r2, #2]
 80017be:	0192      	lsls	r2, r2, #6
 80017c0:	4611      	mov	r1, r2
 80017c2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80017c6:	400a      	ands	r2, r1
 80017c8:	4915      	ldr	r1, [pc, #84]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_R_Factor(Address_PllI2S->rcc_select_pll_I2S_R);
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017de:	6093      	str	r3, [r2, #8]
		RCC_setPLL_I2S_Q_Factor(Address_PllI2S->rcc_select_pll_I2S_Q);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	061b      	lsls	r3, r3, #24
 80017f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80017f4:	490a      	ldr	r1, [pc, #40]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		RCC_setPLL_I2S_Clk(Address_PllI2S->rcc_select_pll_i2s_source_clk);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	7912      	ldrb	r2, [r2, #4]
 8001808:	05d2      	lsls	r2, r2, #23
 800180a:	4611      	mov	r1, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <Rcc_enuConfigPLLI2S+0x8c>)
 800180e:	430b      	orrs	r3, r1
 8001810:	6093      	str	r3, [r2, #8]
	}

	return Loc_enuRccStatusError;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40023800 	.word	0x40023800

08001824 <Rcc_enuConfigPLLSAI>:


Rcc_StatusErrorType Rcc_enuConfigPLLSAI(const Rcc_PllSAIConfigType* Address_PllSAI){
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]

	if(Address_PllSAI == NULL){
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <Rcc_enuConfigPLLSAI+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 8001836:	2303      	movs	r3, #3
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	e06e      	b.n	800191a <Rcc_enuConfigPLLSAI+0xf6>
	}
	else{

		RCC_setPLL_SAI_N_Factor(Address_PllSAI->rcc_PLLSAI_N_From50To432);
 800183c:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	8852      	ldrh	r2, [r2, #2]
 800184e:	0192      	lsls	r2, r2, #6
 8001850:	4611      	mov	r1, r2
 8001852:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001856:	400a      	ands	r2, r1
 8001858:	4933      	ldr	r1, [pc, #204]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 800185a:	4313      	orrs	r3, r2
 800185c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_Q_Factor(Address_PllSAI->rcc_select_pll_SAI_Q);
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001866:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001874:	492c      	ldr	r1, [pc, #176]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 8001876:	4313      	orrs	r3, r2
 8001878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		RCC_setPLL_SAI_R_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a29      	ldr	r2, [pc, #164]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 8001884:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		RCC_setPLL_SAI_QX_PLLI2SDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLI2SDIVQ_Qx_Last_FROM1to50);
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 8001892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001896:	f023 021f 	bic.w	r2, r3, #31
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	88db      	ldrh	r3, [r3, #6]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	4921      	ldr	r1, [pc, #132]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_QY_PLLSAIDIVQ_Factor(Address_PllSAI->rcc_PLLSAI_PLLSAIDIVQ_Qy_Last_FROM1to50);
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	889b      	ldrh	r3, [r3, #4]
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80018be:	491a      	ldr	r1, [pc, #104]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI_RLcd_PLLSAIDIVR_Factor(Address_PllSAI->rcc_select_pll_SAI_R);
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	019b      	lsls	r3, r3, #6
 80018d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018da:	4913      	ldr	r1, [pc, #76]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		RCC_setPLL_SAI1A_Clk(Address_PllSAI->rcc_select_SAI1A_source);
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7a5b      	ldrb	r3, [r3, #9]
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018f6:	490c      	ldr	r1, [pc, #48]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		RCC_setPLL_SAI1B_Clk(Address_PllSAI->rcc_select_SAI1B_source);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 8001900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a9b      	ldrb	r3, [r3, #10]
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001912:	4905      	ldr	r1, [pc, #20]	; (8001928 <Rcc_enuConfigPLLSAI+0x104>)
 8001914:	4313      	orrs	r3, r2
 8001916:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c



	}

	return Loc_enuRccStatusError;
 800191a:	7bfb      	ldrb	r3, [r7, #15]


}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40023800 	.word	0x40023800

0800192c <Rcc_enuInit>:


Rcc_StatusErrorType Rcc_enuInit(const Rcc_ConfigType* Address_Rcc){
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	Rcc_StatusErrorType Loc_enuRccStatusError = RCC_STATUS_OK;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]

	if(Address_Rcc == NULL){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <Rcc_enuInit+0x18>
		Loc_enuRccStatusError = RCC_STATUS_NULL_POINTER_ADDRESS;
 800193e:	2303      	movs	r3, #3
 8001940:	73fb      	strb	r3, [r7, #15]
 8001942:	e09b      	b.n	8001a7c <Rcc_enuInit+0x150>
	}
	else{

		/*  Enable Clocks */
		if(Address_Rcc->rcc_hse_on_or_off == RCC_ON){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <Rcc_enuInit+0x30>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hse_on_or_off);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fc3f 	bl	80011d4 <Rcc_enuEnableClock>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e006      	b.n	800196a <Rcc_enuInit+0x3e>
		}

		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hse_on_or_off);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fcd5 	bl	8001310 <Rcc_enuDisableClock>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_hsi_on_or_off == RCC_ON){
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <Rcc_enuInit+0x56>
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_hsi_on_or_off);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	785b      	ldrb	r3, [r3, #1]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fc2c 	bl	80011d4 <Rcc_enuEnableClock>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e006      	b.n	8001990 <Rcc_enuInit+0x64>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_hsi_on_or_off);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fcc2 	bl	8001310 <Rcc_enuDisableClock>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
		}


		if(Address_Rcc->rcc_pll_on_or_off == RCC_ON && Address_Rcc->address_pll_cfg  != NULL){
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d112      	bne.n	80019be <Rcc_enuInit+0x92>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <Rcc_enuInit+0x92>
			Loc_enuRccStatusError = Rcc_enuConfigPLL(Address_Rcc->address_pll_cfg);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fcf9 	bl	800139c <Rcc_enuConfigPLL>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pll_on_or_off);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fc0e 	bl	80011d4 <Rcc_enuEnableClock>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e006      	b.n	80019cc <Rcc_enuInit+0xa0>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pll_on_or_off);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	789b      	ldrb	r3, [r3, #2]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fca4 	bl	8001310 <Rcc_enuDisableClock>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllI2S_on_or_off == RCC_ON && Address_Rcc->adress_pll_i2s_cfg  != NULL){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d112      	bne.n	80019fa <Rcc_enuInit+0xce>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <Rcc_enuInit+0xce>
			Loc_enuRccStatusError = 	Rcc_enuConfigPLLI2S(Address_Rcc->adress_pll_i2s_cfg);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fed7 	bl	8001794 <Rcc_enuConfigPLLI2S>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	78db      	ldrb	r3, [r3, #3]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fbf0 	bl	80011d4 <Rcc_enuEnableClock>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e006      	b.n	8001a08 <Rcc_enuInit+0xdc>
		}
		else{
			Loc_enuRccStatusError = 	Rcc_enuDisableClock(Address_Rcc->rcc_pllI2S_on_or_off);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	78db      	ldrb	r3, [r3, #3]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fc86 	bl	8001310 <Rcc_enuDisableClock>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
		}

		if(Address_Rcc->rcc_pllSAI_on_or_off == RCC_ON && Address_Rcc->address_pll_sai_cfg  != NULL){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d112      	bne.n	8001a36 <Rcc_enuInit+0x10a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <Rcc_enuInit+0x10a>
			Loc_enuRccStatusError = Rcc_enuConfigPLLSAI(Address_Rcc->address_pll_sai_cfg);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff01 	bl	8001824 <Rcc_enuConfigPLLSAI>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
			Loc_enuRccStatusError = Rcc_enuEnableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fbd2 	bl	80011d4 <Rcc_enuEnableClock>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e006      	b.n	8001a44 <Rcc_enuInit+0x118>
		}
		else{
			Loc_enuRccStatusError = Rcc_enuDisableClock(Address_Rcc->rcc_pllSAI_on_or_off);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	791b      	ldrb	r3, [r3, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fc68 	bl	8001310 <Rcc_enuDisableClock>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
		}

		Loc_enuRccStatusError = Rcc_enuSelectAPB2Prescaler(Address_Rcc->rcc_apb2_select_prescaler );
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7d1b      	ldrb	r3, [r3, #20]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fd95 	bl	8001578 <Rcc_enuSelectAPB2Prescaler>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAPB1Prescaler( Address_Rcc->rcc_apb1_select_prescaler);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7d5b      	ldrb	r3, [r3, #21]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fdbc 	bl	80015d4 <Rcc_enuSelectAPB1Prescaler>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectAHBPrescaler( Address_Rcc->rcc_ahb_select_prescaler);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7d9b      	ldrb	r3, [r3, #22]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fde5 	bl	8001634 <Rcc_enuSelectAHBPrescaler>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
		Loc_enuRccStatusError = Rcc_enuSelectSystemClkSource(Address_Rcc->rcc_sysmte_clk_soruce);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7ddb      	ldrb	r3, [r3, #23]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe08 	bl	8001688 <Rcc_enuSelectSystemClkSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]


	}

	return Loc_enuRccStatusError;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <Scb_enuSetGroupPrioirty>:




/******************************* Software Interfaces Implementation *******************/
SCB_ErrorStatusType Scb_enuSetGroupPrioirty(Scb_SelectGroupPriorityAndSubPriorityType Copy_enuSelectGroupPriority){
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]

	SCB_ErrorStatusType Loc_enuScbErrorStatus = SCB_STATUS_OK;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]

	Scb_SetGroupPrioirty(Copy_enuSelectGroupPriority);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a9e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <Scb_enuSetGroupPrioirty+0x38>)
 8001aa8:	6013      	str	r3, [r2, #0]

	/* it's used for NVIC Driver */
	Global_GroupPrioritySelection =Copy_enuSelectGroupPriority;
 8001aaa:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <Scb_enuSetGroupPrioirty+0x3c>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
	return Loc_enuScbErrorStatus;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed0c 	.word	0xe000ed0c
 8001ac4:	20000218 	.word	0x20000218

08001ac8 <Systick_enuInit>:


/******************************* Software Interfaces Implementation **********************************/


Systick_ErrorStatusType Systick_enuInit(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	Systick_ErrorStatusType Loc_enuSystickErrorStatus = SYSTICK_STATUS_OK;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]

	/* Disable Interrupt */
	Systick_disableInterrupt();
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <Systick_enuInit+0x70>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <Systick_enuInit+0x70>)
 8001ad8:	f023 0302 	bic.w	r3, r3, #2
 8001adc:	6013      	str	r3, [r2, #0]

	/* Select Clock Source */
	Systick_setClkSoruce(STK_CLK_SORUCE);
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <Systick_enuInit+0x70>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <Systick_enuInit+0x70>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6013      	str	r3, [r2, #0]

	GlobalStatic_u64SystickFreq =Global_u64AHBFreq / (!STK_CLK_SORUCE*8 + STK_CLK_SORUCE);
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <Systick_enuInit+0x74>)
 8001aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	08c2      	lsrs	r2, r0, #3
 8001afa:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8001afe:	08cb      	lsrs	r3, r1, #3
 8001b00:	490f      	ldr	r1, [pc, #60]	; (8001b40 <Systick_enuInit+0x78>)
 8001b02:	e9c1 2300 	strd	r2, r3, [r1]
	Global_f64TimeOverflow = (f64)STK_LOAD_FULL_VALUE/(f64)GlobalStatic_u64SystickFreq;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <Systick_enuInit+0x78>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe fcf2 	bl	80004f8 <__aeabi_ul2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8001b1c:	4909      	ldr	r1, [pc, #36]	; (8001b44 <Systick_enuInit+0x7c>)
 8001b1e:	f7fe fe4b 	bl	80007b8 <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <Systick_enuInit+0x80>)
 8001b28:	e9c1 2300 	strd	r2, r3, [r1]

	return Loc_enuSystickErrorStatus;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]


}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010
 8001b3c:	200001b0 	.word	0x200001b0
 8001b40:	20000230 	.word	0x20000230
 8001b44:	416fffff 	.word	0x416fffff
 8001b48:	20000220 	.word	0x20000220

08001b4c <SysTick_Handler>:


}

/**************************** ISR Implementation ************************************/
void SysTick_Handler (void){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

	if(Systick_OverflowInterruptHandler != NULL){
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <SysTick_Handler+0x38>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <SysTick_Handler+0x12>
		Systick_OverflowInterruptHandler();
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <SysTick_Handler+0x38>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4798      	blx	r3
	else{
		/* Error in setting callback */

	}

	if(Global_u8TimerTypeFlag == SYSTICK_INTERVAL_FLAG){
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <SysTick_Handler+0x3c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10b      	bne.n	8001b7e <SysTick_Handler+0x32>
		Systick_disableInterrupt();
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <SysTick_Handler+0x40>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <SysTick_Handler+0x40>)
 8001b6c:	f023 0302 	bic.w	r3, r3, #2
 8001b70:	6013      	str	r3, [r2, #0]
		Systick_stopTimer();
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <SysTick_Handler+0x40>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <SysTick_Handler+0x40>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6013      	str	r3, [r2, #0]
	}
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000228 	.word	0x20000228
 8001b88:	20000219 	.word	0x20000219
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <Usart_enuSetBaudrate>:


static volatile USARTx_Type* uartArr[] = {USART1,USART2,USART3,USART4,USART5,USART6,USART7,USART8};

/********************************** Software Interfaces Declarations *******************/
static Usart_StatusErrorType Usart_enuSetBaudrate(const Usart_ConfigType* Address_Usart){
 8001b90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b94:	b08c      	sub	sp, #48	; 0x30
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	f64 Loc_f64Brr ;
	u64 Loc_u64Fraction ;
	u64 Loc_u64IntPart ;
	u8 Loc_u8OverRun;
	if(Address_Usart == NULL){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d103      	bne.n	8001bae <Usart_enuSetBaudrate+0x1e>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001bac:	e158      	b.n	8001e60 <Usart_enuSetBaudrate+0x2d0>
	}
	else if(Address_Usart->select_sync_mode == USART_SELECT_ASYNCHRONOUS_MODE){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	789b      	ldrb	r3, [r3, #2]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 8151 	bne.w	8001e5a <Usart_enuSetBaudrate+0x2ca>
		Loc_u8OverRun = Address_Usart->select_oversample & 0b10;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	795b      	ldrb	r3, [r3, #5]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]

		switch(Address_Usart->select_channel_number){
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	f200 8143 	bhi.w	8001e52 <Usart_enuSetBaudrate+0x2c2>
 8001bcc:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <Usart_enuSetBaudrate+0x44>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001bf5 	.word	0x08001bf5
 8001bd8:	08001d25 	.word	0x08001d25
 8001bdc:	08001d25 	.word	0x08001d25
 8001be0:	08001d25 	.word	0x08001d25
 8001be4:	08001d25 	.word	0x08001d25
 8001be8:	08001bf5 	.word	0x08001bf5
 8001bec:	08001d25 	.word	0x08001d25
 8001bf0:	08001d25 	.word	0x08001d25

		case USART_SELECT_CHANNEL_1:
		case USART_SELECT_CHANNEL_6:

			Loc_f64Brr = (f64)Global_u64ABP2Freq/(Address_Usart->baude_rate)/(8*(2-Loc_u8OverRun));
 8001bf4:	4b9e      	ldr	r3, [pc, #632]	; (8001e70 <Usart_enuSetBaudrate+0x2e0>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fc7b 	bl	80004f8 <__aeabi_ul2d>
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe fc72 	bl	80004f8 <__aeabi_ul2d>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fdcc 	bl	80007b8 <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4614      	mov	r4, r2
 8001c26:	461d      	mov	r5, r3
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	f1c3 0302 	rsb	r3, r3, #2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc2d 	bl	8000490 <__aeabi_i2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fdbb 	bl	80007b8 <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_u64IntPart = (u64)Loc_f64Brr;
 8001c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c4e:	f7fe feb3 	bl	80009b8 <__aeabi_d2ulz>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_u64Fraction =(Loc_f64Brr-Loc_u64IntPart)*16+0.5;
 8001c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5e:	f7fe fc4b 	bl	80004f8 <__aeabi_ul2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c6a:	f7fe fac3 	bl	80001f4 <__aeabi_dsub>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b7e      	ldr	r3, [pc, #504]	; (8001e74 <Usart_enuSetBaudrate+0x2e4>)
 8001c7c:	f7fe fc72 	bl	8000564 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <Usart_enuSetBaudrate+0x2e8>)
 8001c8e:	f7fe fab3 	bl	80001f8 <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7fe fe8d 	bl	80009b8 <__aeabi_d2ulz>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_u64Fraction ==16){
 8001ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001caa:	f1a2 0110 	sub.w	r1, r2, #16
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	d10d      	bne.n	8001cce <Usart_enuSetBaudrate+0x13e>
				Loc_u64Fraction = 0;
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_u64IntPart++;
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	f112 0801 	adds.w	r8, r2, #1
 8001cc6:	f143 0900 	adc.w	r9, r3, #0
 8001cca:	e9c7 8906 	strd	r8, r9, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b69      	ldr	r3, [pc, #420]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b291      	uxth	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4a62      	ldr	r2, [pc, #392]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001cf2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_u64Fraction);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 010f 	bic.w	r1, r3, #15
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001d1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]

			break;
 8001d22:	e09d      	b.n	8001e60 <Usart_enuSetBaudrate+0x2d0>
		case USART_SELECT_CHANNEL_4:
		case USART_SELECT_CHANNEL_5:
		case USART_SELECT_CHANNEL_7:
		case USART_SELECT_CHANNEL_8:

			Loc_f64Brr = (f64)Global_u64ABP1Freq/(Address_Usart->baude_rate)/(8*(2-Loc_u8OverRun));
 8001d24:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <Usart_enuSetBaudrate+0x2f0>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fbe3 	bl	80004f8 <__aeabi_ul2d>
 8001d32:	4680      	mov	r8, r0
 8001d34:	4689      	mov	r9, r1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe fbda 	bl	80004f8 <__aeabi_ul2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fd34 	bl	80007b8 <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4690      	mov	r8, r2
 8001d56:	4699      	mov	r9, r3
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	f1c3 0302 	rsb	r3, r3, #2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fb95 	bl	8000490 <__aeabi_i2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	f7fe fd23 	bl	80007b8 <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_u64IntPart = (u64)Loc_f64Brr;
 8001d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d7e:	f7fe fe1b 	bl	80009b8 <__aeabi_d2ulz>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_u64Fraction =(Loc_f64Brr-Loc_u64IntPart)*16+0.5;
 8001d8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d8e:	f7fe fbb3 	bl	80004f8 <__aeabi_ul2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9a:	f7fe fa2b 	bl	80001f4 <__aeabi_dsub>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <Usart_enuSetBaudrate+0x2e4>)
 8001dac:	f7fe fbda 	bl	8000564 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <Usart_enuSetBaudrate+0x2e8>)
 8001dbe:	f7fe fa1b 	bl	80001f8 <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fdf5 	bl	80009b8 <__aeabi_d2ulz>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_u64Fraction ==16){
 8001dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dda:	f1a2 0110 	sub.w	r1, r2, #16
 8001dde:	430b      	orrs	r3, r1
 8001de0:	d10c      	bne.n	8001dfc <Usart_enuSetBaudrate+0x26c>
				Loc_u64Fraction = 0;
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_u64IntPart++;
 8001dee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df2:	1c54      	adds	r4, r2, #1
 8001df4:	f143 0500 	adc.w	r5, r3, #0
 8001df8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b291      	uxth	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001e20:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_u64IntPart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 010f 	bic.w	r1, r3, #15
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <Usart_enuSetBaudrate+0x2ec>)
 8001e48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]

			break;
 8001e50:	e006      	b.n	8001e60 <Usart_enuSetBaudrate+0x2d0>


		default :
			Loc_UsartStatusError = USART_STATUS_FAIL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e58:	e002      	b.n	8001e60 <Usart_enuSetBaudrate+0x2d0>

		}
	}
	else{
		/* Sync Mode */
		Loc_UsartStatusError = USART_STATUS_FAIL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return Loc_UsartStatusError;
 8001e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3730      	adds	r7, #48	; 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e6e:	bf00      	nop
 8001e70:	200001c0 	.word	0x200001c0
 8001e74:	40300000 	.word	0x40300000
 8001e78:	3fe00000 	.word	0x3fe00000
 8001e7c:	200001c8 	.word	0x200001c8
 8001e80:	200001b8 	.word	0x200001b8

08001e84 <Usart_enuEnableRccClock>:


static Usart_StatusErrorType Usart_enuEnableRccClock(const Usart_ConfigType* Address_Usart){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]

		if(Address_Usart == NULL){
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <Usart_enuEnableRccClock+0x18>
			Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8001e96:	2302      	movs	r3, #2
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	e03c      	b.n	8001f16 <Usart_enuEnableRccClock+0x92>
		}
		else {
			switch(Address_Usart->select_channel_number){
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d836      	bhi.n	8001f12 <Usart_enuEnableRccClock+0x8e>
 8001ea4:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <Usart_enuEnableRccClock+0x28>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001ecd 	.word	0x08001ecd
 8001eb0:	08001ee1 	.word	0x08001ee1
 8001eb4:	08001ee9 	.word	0x08001ee9
 8001eb8:	08001ef1 	.word	0x08001ef1
 8001ebc:	08001ef9 	.word	0x08001ef9
 8001ec0:	08001ed7 	.word	0x08001ed7
 8001ec4:	08001f01 	.word	0x08001f01
 8001ec8:	08001f09 	.word	0x08001f09
			case USART_SELECT_CHANNEL_1:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB2, FOUR_VALUE);
 8001ecc:	2104      	movs	r1, #4
 8001ece:	2004      	movs	r0, #4
 8001ed0:	f7ff fc2e 	bl	8001730 <Rcc_enuEnablePeripheralClk>
				break;
 8001ed4:	e01f      	b.n	8001f16 <Usart_enuEnableRccClock+0x92>
			case USART_SELECT_CHANNEL_6:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB2, FIVE_VALUE);
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	2004      	movs	r0, #4
 8001eda:	f7ff fc29 	bl	8001730 <Rcc_enuEnablePeripheralClk>
				break;
 8001ede:	e01a      	b.n	8001f16 <Usart_enuEnableRccClock+0x92>

			case USART_SELECT_CHANNEL_2:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, SEVENTEEN_VALUE);
 8001ee0:	2111      	movs	r1, #17
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f7ff fc24 	bl	8001730 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_3:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, EIGHTEEN_VALUE);
 8001ee8:	2112      	movs	r1, #18
 8001eea:	2003      	movs	r0, #3
 8001eec:	f7ff fc20 	bl	8001730 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_4:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, NINETEEN_VALUE);
 8001ef0:	2113      	movs	r1, #19
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f7ff fc1c 	bl	8001730 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_5:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, TWENTY_VALUE);
 8001ef8:	2114      	movs	r1, #20
 8001efa:	2003      	movs	r0, #3
 8001efc:	f7ff fc18 	bl	8001730 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_7:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, THIRTY_VALUE);
 8001f00:	211e      	movs	r1, #30
 8001f02:	2003      	movs	r0, #3
 8001f04:	f7ff fc14 	bl	8001730 <Rcc_enuEnablePeripheralClk>
			case USART_SELECT_CHANNEL_8:
				Rcc_enuEnablePeripheralClk(RCC_BUS_INDEX_APB1, THIRTYONE_VALUE);
 8001f08:	211f      	movs	r1, #31
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f7ff fc10 	bl	8001730 <Rcc_enuEnablePeripheralClk>
				break;
 8001f10:	e001      	b.n	8001f16 <Usart_enuEnableRccClock+0x92>

			default :
					Loc_UsartStatusError = USART_STATUS_FAIL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]

			}
		}

		return Loc_UsartStatusError;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]

}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <Usart_enuInit>:



/******************************* Software Interfaces Implementation *******************/

Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
	if(Address_Usart == NULL){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <Usart_enuInit+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8001f32:	2302      	movs	r3, #2
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e10a      	b.n	800214e <Usart_enuInit+0x22e>
	}
	else{
			/* Enable Usartx Rcc Clock */
			Loc_UsartStatusError = Usart_enuEnableRccClock(Address_Usart);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffa3 	bl	8001e84 <Usart_enuEnableRccClock>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]

			/* Set Baudrate */
			Loc_UsartStatusError = Usart_enuSetBaudrate(Address_Usart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fe24 	bl	8001b90 <Usart_enuSetBaudrate>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]

			/* Set Data Size */
			Usart_SetDataSize((Address_Usart->select_channel_number),(Address_Usart->select_character_size));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b81      	ldr	r3, [pc, #516]	; (8002158 <Usart_enuInit+0x238>)
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	031b      	lsls	r3, r3, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <Usart_enuInit+0x238>)
 8001f6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]

			/* Set Clock Phase if Sync */
			Usart_SetClockPhase((Address_Usart->select_channel_number),(Address_Usart->select_clock_phase));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b76      	ldr	r3, [pc, #472]	; (8002158 <Usart_enuInit+0x238>)
 8001f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	79db      	ldrb	r3, [r3, #7]
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	4619      	mov	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <Usart_enuInit+0x238>)
 8001f98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	611a      	str	r2, [r3, #16]

			/* Set Clock Polarity if Sync */
			Usart_SetClockPolarity((Address_Usart->select_channel_number),(Address_Usart->select_clock_polarity));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <Usart_enuInit+0x238>)
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	799b      	ldrb	r3, [r3, #6]
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4619      	mov	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4b65      	ldr	r3, [pc, #404]	; (8002158 <Usart_enuInit+0x238>)
 8001fc2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	611a      	str	r2, [r3, #16]

			/* enable or disable DMA */
			Usart_SetDmaMode((Address_Usart->select_channel_number),(Address_Usart->select_dma_tx_enable_rx_enable));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b61      	ldr	r3, [pc, #388]	; (8002158 <Usart_enuInit+0x238>)
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7a1b      	ldrb	r3, [r3, #8]
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <Usart_enuInit+0x238>)
 8001fec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	615a      	str	r2, [r3, #20]

			/* enable or disable FULL-Duplex */
			Usart_SetDuplexMode((Address_Usart->select_channel_number),(Address_Usart->select_full_duplex_half_duplex));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <Usart_enuInit+0x238>)
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f023 0208 	bic.w	r2, r3, #8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7a5b      	ldrb	r3, [r3, #9]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4619      	mov	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	4b50      	ldr	r3, [pc, #320]	; (8002158 <Usart_enuInit+0x238>)
 8002016:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800201a:	430a      	orrs	r2, r1
 800201c:	615a      	str	r2, [r3, #20]

			/* Select OverSample mode  */
			Usart_SelectOversampleMode((Address_Usart->select_channel_number),(Address_Usart->select_oversample));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <Usart_enuInit+0x238>)
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	795b      	ldrb	r3, [r3, #5]
 8002034:	02db      	lsls	r3, r3, #11
 8002036:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	4b45      	ldr	r3, [pc, #276]	; (8002158 <Usart_enuInit+0x238>)
 8002042:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002046:	430a      	orrs	r2, r1
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <Usart_enuInit+0x238>)
 8002052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	795b      	ldrb	r3, [r3, #5]
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	03db      	lsls	r3, r3, #15
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <Usart_enuInit+0x238>)
 8002070:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]


			/* Select Parity bit mode  */
			Usart_SelectParityBitMode((Address_Usart->select_channel_number),(Address_Usart->select_parity_bits));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <Usart_enuInit+0x238>)
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f423 61c0 	bic.w	r1, r3, #1536	; 0x600
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	791b      	ldrb	r3, [r3, #4]
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <Usart_enuInit+0x238>)
 800209c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]


			/* Select Stop bits  */
			Usart_SelectStopBits((Address_Usart->select_channel_number),(Address_Usart->select_stop_bits));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <Usart_enuInit+0x238>)
 80020ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <Usart_enuInit+0x238>)
 80020ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020c2:	611a      	str	r2, [r3, #16]

			/* Enable Clk if Sync  */
			Usart_SetClkInSyncMode((Address_Usart->select_channel_number),(Address_Usart->select_sync_mode));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b23      	ldr	r3, [pc, #140]	; (8002158 <Usart_enuInit+0x238>)
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	789b      	ldrb	r3, [r3, #2]
 80020da:	02db      	lsls	r3, r3, #11
 80020dc:	4619      	mov	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <Usart_enuInit+0x238>)
 80020e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	611a      	str	r2, [r3, #16]


			/* Enable Tx, Rx , UART */
			Usart_Enable(Address_Usart->select_channel_number);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <Usart_enuInit+0x238>)
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <Usart_enuInit+0x238>)
 8002104:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210c:	60da      	str	r2, [r3, #12]
			Usart_EnableTx(Address_Usart->select_channel_number);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <Usart_enuInit+0x238>)
 8002116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <Usart_enuInit+0x238>)
 8002124:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002128:	f042 0208 	orr.w	r2, r2, #8
 800212c:	60da      	str	r2, [r3, #12]
			Usart_EnableRx(Address_Usart->select_channel_number);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <Usart_enuInit+0x238>)
 8002136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <Usart_enuInit+0x238>)
 8002144:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002148:	f042 0204 	orr.w	r2, r2, #4
 800214c:	60da      	str	r2, [r3, #12]


	}
	return Loc_UsartStatusError;
 800214e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200001c8 	.word	0x200001c8

0800215c <Usart_enuEnableRxInterrupt>:
/////////////////////////////// Interrupt Part ////////////////////////////////////////////

/*
 * Look At Page 1006
 */
Usart_StatusErrorType Usart_enuEnableRxInterrupt(const Usart_ConfigType* Address_Usart){
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]

	if(Address_Usart == NULL ){
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <Usart_enuEnableRxInterrupt+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 800216e:	2302      	movs	r3, #2
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e00f      	b.n	8002194 <Usart_enuEnableRxInterrupt+0x38>
	}
	else{


		Usart_EnableRxCompleteInterrupt(( Address_Usart->select_channel_number));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <Usart_enuEnableRxInterrupt+0x48>)
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <Usart_enuEnableRxInterrupt+0x48>)
 800218a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800218e:	f042 0220 	orr.w	r2, r2, #32
 8002192:	60da      	str	r2, [r3, #12]
	}
	return Loc_UsartStatusError;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200001c8 	.word	0x200001c8

080021a8 <Usart_enuSetCallbackRxFunction>:

	}
	return Loc_UsartStatusError;
}

Usart_StatusErrorType Usart_enuSetCallbackRxFunction(const Usart_ConfigType* Address_Usart,void (*callback)(u16 Copy_u16Result)){
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]

	if(Address_Usart == NULL || NULL == callback ){
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <Usart_enuSetCallbackRxFunction+0x1a>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <Usart_enuSetCallbackRxFunction+0x20>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 80021c2:	2302      	movs	r3, #2
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e006      	b.n	80021d6 <Usart_enuSetCallbackRxFunction+0x2e>
	}
	else{
		Usart_RxInterruptHandler[( Address_Usart->select_channel_number)] =callback;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <Usart_enuSetCallbackRxFunction+0x3c>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	return Loc_UsartStatusError;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20000238 	.word	0x20000238

080021e8 <USART1_IRQHandler>:



/**************************** Private Software Interface Implementation **************/

void USART1_IRQHandler(void){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0

	u16 Loc_u16Result;

	if(Usart_GetRxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsRxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <USART1_IRQHandler+0x88>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d118      	bne.n	8002230 <USART1_IRQHandler+0x48>
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <USART1_IRQHandler+0x88>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d110      	bne.n	8002230 <USART1_IRQHandler+0x48>

		Loc_u16Result = Usart_GetDataReg(USART_SELECT_CHANNEL_1);
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <USART1_IRQHandler+0x88>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	80fb      	strh	r3, [r7, #6]
		Usart_RxInterruptHandler[USART_SELECT_CHANNEL_1](Loc_u16Result);
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <USART1_IRQHandler+0x8c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3

		Usart_ClearRxCompleteFlag(USART_SELECT_CHANNEL_1);
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <USART1_IRQHandler+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <USART1_IRQHandler+0x88>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	601a      	str	r2, [r3, #0]
	}

	if(Usart_GetTxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsTxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <USART1_IRQHandler+0x88>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d112      	bne.n	8002266 <USART1_IRQHandler+0x7e>
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <USART1_IRQHandler+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10a      	bne.n	8002266 <USART1_IRQHandler+0x7e>

		Usart_TxCompleteInterruptHandler[USART_SELECT_CHANNEL_1]();
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <USART1_IRQHandler+0x90>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4798      	blx	r3
		Usart_ClearTxCompleteFlag(USART_SELECT_CHANNEL_1);
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <USART1_IRQHandler+0x88>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <USART1_IRQHandler+0x88>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002264:	601a      	str	r2, [r3, #0]
	}

}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200001c8 	.word	0x200001c8
 8002274:	20000238 	.word	0x20000238
 8002278:	20000258 	.word	0x20000258

0800227c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800227e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	; (80022b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	; (80022bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <LoopForever+0xe>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	; (80022c8 <LoopForever+0x16>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022aa:	f000 f811 	bl	80022d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ae:	f7fe fd3d 	bl	8000d2c <main>

080022b2 <LoopForever>:

LoopForever:
  b LoopForever
 80022b2:	e7fe      	b.n	80022b2 <LoopForever>
  ldr   r0, =_estack
 80022b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80022c0:	08002340 	.word	0x08002340
  ldr r2, =_sbss
 80022c4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022c8:	20000278 	.word	0x20000278

080022cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>
	...

080022d0 <__libc_init_array>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	4d0d      	ldr	r5, [pc, #52]	; (8002308 <__libc_init_array+0x38>)
 80022d4:	4c0d      	ldr	r4, [pc, #52]	; (800230c <__libc_init_array+0x3c>)
 80022d6:	1b64      	subs	r4, r4, r5
 80022d8:	10a4      	asrs	r4, r4, #2
 80022da:	2600      	movs	r6, #0
 80022dc:	42a6      	cmp	r6, r4
 80022de:	d109      	bne.n	80022f4 <__libc_init_array+0x24>
 80022e0:	4d0b      	ldr	r5, [pc, #44]	; (8002310 <__libc_init_array+0x40>)
 80022e2:	4c0c      	ldr	r4, [pc, #48]	; (8002314 <__libc_init_array+0x44>)
 80022e4:	f000 f818 	bl	8002318 <_init>
 80022e8:	1b64      	subs	r4, r4, r5
 80022ea:	10a4      	asrs	r4, r4, #2
 80022ec:	2600      	movs	r6, #0
 80022ee:	42a6      	cmp	r6, r4
 80022f0:	d105      	bne.n	80022fe <__libc_init_array+0x2e>
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f8:	4798      	blx	r3
 80022fa:	3601      	adds	r6, #1
 80022fc:	e7ee      	b.n	80022dc <__libc_init_array+0xc>
 80022fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002302:	4798      	blx	r3
 8002304:	3601      	adds	r6, #1
 8002306:	e7f2      	b.n	80022ee <__libc_init_array+0x1e>
 8002308:	08002338 	.word	0x08002338
 800230c:	08002338 	.word	0x08002338
 8002310:	08002338 	.word	0x08002338
 8002314:	0800233c 	.word	0x0800233c

08002318 <_init>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr

08002324 <_fini>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr
